VECTOR_ENTRY_RESET:
	CLD  ;starts here.
	SEI 
WAIT_VBL:
	LDA PPU_Status ;waits for vbl
	BPL WAIT_VBL
	LDX #$00 ;disable graphics and whatnot.
	STX PPU_Ctrl
	STX PPU_Mask
	DEX  ;X=#$FF
	TXS  ;Setup stack to #$FF.
	LDX RNG_ARRAY ;0x5EC - 0x5EF RNG values. RNG[0]->X
	LDY #$06
	STY TMP_01
	LDY #$00
	STY TMP_00
	LDA #$00
CLR_RAM_LOOP:
	STA (TMP_00),Y
	DEY 
	BNE CLR_RAM_LOOP
	DEC TMP_01
	BPL CLR_RAM_LOOP
	TXA  ;RNG[0]->A
	BNE SKIP_SEED_RNG ;if !0, seed with that. More random!
	LDX #$5F ;Otherwise seed with #$5F
SKIP_SEED_RNG:
	STX RNG_ARRAY ;Seed RNG array.
	JSR CLEAR_BOTH_SCREENS
	JSR CLEAR_SPRITES
	LDY #$00
	STA PPU_Scroll ;latch was reset in screen clearing
	STA PPU_Scroll
	LDY #$01
	STY IN_MENU_FLAG ;set in-menu to true
	LDA #$0F
	STA APU_STATUS ;enable all except DMC
	JSR #F4->$611+613
	LDA #$90
	STA PPU_Ctrl ;sprites from 0x1000, enable NMI.
	STA PPU_CTRL_RAM ;i personally would reverse these writes.
	LDA #$02
	STA PPU_MASK_RAM
	LDX #$0B
LOOP_MOVE_DAT:
	LDA DEFAULT_HIGH_SCORES,X ;move default high scores into place.
	STA HIGH_SCORES_ARRAY,X
	DEX 
	BPL LOOP_MOVE_DAT
	BMI LOOP_FOREVER
RUN_FRAME:
	LDA IN_MENU_FLAG
	BEQ SOUND_STUFF
	LDA SWITCH_BACK_TO_MENU_FALSE
	CMP #$01 ;not 1 by def
	BNE NO_SOUND_STUFF
SOUND_STUFF:
	JSR PLAY_SOUNDS ;play sounds.
NO_SOUND_STUFF:
	JSR DEC_TIMERS_2B-2E ;handle timers.
	JSR READ_CONTROLLERS
	JSR MAIN_ZAPPER_LOGIC
	INC FRAME_COUNTER
	JSR CLEAR_NMIRAN/PPUSTUFFFLAG
LOOP_FOREVER:
	LDA NMI_RAN
	BNE RUN_FRAME ;run code for frame
	JSR RNG_ADVANCE
	JMP LOOP_FOREVER
VECTOR_ENTRY_NMI:
	PHP  ;Save stack and whatnot.
	PHA 
	TXA 
	PHA 
	TYA 
	PHA 
	LDA #$00
	STA PPU_OAM_Addr
	LDA #$02
	STA PPU_DMA ;write sprites to screen.
	LDA PPU_BLOCK_UPDATE_IN_NMI
	BNE NO_PPU_STUFF ;needs to be 0 to run PPU stuff.
	JSR PPU_PROCESS_UPDATE_BUF
	JSR UPLOAD_PALETTE
	JSR UPDATE_PALATTE_FROM_400_DUR_WHITEBOX
	JSR SET_PPU_SCROLL
NO_PPU_STUFF:
	LDY #$01
	STY PPU_BLOCK_UPDATE_IN_NMI
	STY NMI_RAN
	PLA 
	TAY 
	PLA 
	TAX 
	PLA 
	PLP 
	RTI 
MAIN_ZAPPER_LOGIC:
	LDA IN_MENU_FLAG
	BEQ NOT_IN_MENU ;not in menu go here?
	JMP IN_MENU
NOT_IN_MENU:
	LDA CTRL_HELD
	AND #$10 ;button start
	BEQ SWITCH_UNBLOCK_PAUSE ;no change.
	LDY BLOCK_UNPAUSE
	BNE GOTO_STATE ;skip unpausing for one update?
	INY  ;Y=1
	STY BLOCK_UNPAUSE ;set to 1
	LDY IN_GAME_STATE ;pausable states?
	CPY #$10 ;paused state value
	BEQ UNPAUSE_GAME ;Unpause this state.
	CPY #$03 ;these are all the possible pause states.
	BEQ PAUSE_GAME
	CPY #$04
	BEQ PAUSE_GAME
	CPY #$0B
	BEQ PAUSE_GAME
	CPY #$0C
	BNE GOTO_STATE ;state cant be paused continue on.
PAUSE_GAME:
	LDX #$05
SAVE_TIMERS_LOOP:
	LDA TIMER_LARGE_COUNT,X
	STA TIMER_STATE_SAVE,X ;save timers.
	DEX 
	BPL SAVE_TIMERS_LOOP
	LDA PPU_MASK_RAM
	AND #$0E ;Enable BG/SPR in left 8, BG, no SPR.
	STA PPU_Mask
	STA PPU_MASK_RAM
	LDA IN_GAME_STATE
	STA PREV_GAME_STATE ;save state to restore.
	LDA #$10
	STA IN_GAME_STATE
	LDA #$07 ;ppu update group #
	JMP DONT_CHANGE_STATE ;could have used bne, tsk tsk, 1 byte lost.
UNPAUSE_GAME:
	LDA PPU_MASK_RAM
	ORA #$10 ;enable sprites.
	STA PPU_Mask
	STA PPU_MASK_RAM
	LDA #$11
	STA IN_GAME_STATE ;switch state.
	LDA #$30
	STA GAME_SUBSTATE? ;substate...why?
	LDA #$00
DONT_CHANGE_STATE:
	JSR UPDATE_PPU_GROUP ;show graphics needed.
	JSR SND_SET_F0_#$01 ;Do sound.
	JSR WAIT_FOR_NMI
	JMP SND_SET_F1_#$80 ;pause sound?
SWITCH_UNBLOCK_PAUSE:
	LDA #$00
	STA BLOCK_UNPAUSE ;clear paused setup flag.
GOTO_STATE:
	LDA IN_GAME_STATE
	JSR GOTO_TABLE_PAST_JSR
	.LOW GAME_STATE_0_INIT_RAM+SCREENS ;setup game start.
	.HIGH GAME_STATE_0_INIT_RAM+SCREENS
	.LOW GAME_STATE_1_SETUP_DUCKS ;ducks main setup.
	.HIGH GAME_STATE_1_SETUP_DUCKS
	.LOW GAME_STATE_2_SETUP_SUBROUND ;ducks info setup.
	.HIGH GAME_STATE_2_SETUP_SUBROUND
	.LOW GAME_STATE_3_ZAP+TRGTS(+STATUS)+SHOT ;main game loop?
	.HIGH GAME_STATE_3_ZAP+TRGTS(+STATUS)+SHOT
	.LOW GAME_STATE_C_END_RND_OPTIONS ;end round routines.
	.HIGH GAME_STATE_C_END_RND_OPTIONS
	.LOW RTS ;RTS's
	.HIGH RTS
	.LOW GAME_STATE_6_IDK ;start of round stuff?
	.HIGH GAME_STATE_6_IDK
	.LOW GAME_STATE_7_SCORE+TRGT3 ;continue target 3 only?
	.HIGH GAME_STATE_7_SCORE+TRGT3
	.LOW GAME_STATE_8_SETUP_PIGEONS ;Pigeons init.
	.HIGH GAME_STATE_8_SETUP_PIGEONS
	.LOW GAME_STATE_9_PIGEON_RND_SETUP ;pigeon setup.
	.HIGH GAME_STATE_9_PIGEON_RND_SETUP
	.LOW GAME_STATE_A_SUBROUND_INIT ;sets up duck targets and inits stuff.
	.HIGH GAME_STATE_A_SUBROUND_INIT
	.LOW GAME_STATE_B_PIGEON_MAIN ;target/anim processing
	.HIGH GAME_STATE_B_PIGEON_MAIN
	.LOW GAME_STATE_C_END_RND_OPTIONS ;end round routines.
	.HIGH GAME_STATE_C_END_RND_OPTIONS
	.LOW GAME_STATE_D_WAIT_UPDATES ;unsure
	.HIGH GAME_STATE_D_WAIT_UPDATES
	.LOW RTS ;removed?
	.HIGH RTS
	.LOW RTS ;removed?
	.HIGH RTS
	.LOW RTS ;Pause state actual, does nothing.
	.HIGH RTS
	.LOW GAME_STATE_11_UNPAUSE
	.HIGH GAME_STATE_11_UNPAUSE
	.LOW GAME_STATE_12_WAIT_TO_FORWARD
	.HIGH GAME_STATE_12_WAIT_TO_FORWARD
IN_MENU:
	LDA #$00
	STA ZAPPER_RESULT ;init result
	LDA #$01
	STA ZAP_SHOT_ENABLED ;menu always enables zapper.
	STA SHOTS_REMAINING ;menu always has 1 shot.
	LDA SWITCH_BACK_TO_MENU_FALSE
	BEQ SKIP_MENU ;switches screen.
	JSR ZAP_PROC_TRIGGER ;process zapper trigger
	JSR PROCESS_ZAPPER ;changes result
	LDA ZAPPER_RESULT ;menu was hit?
	CMP #$01 ;was hit
	BEQ MENU_GOTO_GAME
	CMP #$02 ;miss
	BEQ INC_MENU_OPTION
	LDA CTRL_HELD ;get buttons held
	AND #$30 ;get select and start
	CMP #$10 ;comp start
	BNE START_NOT_PRESSED ;not pressed alone. (Why alone checked?)
MENU_GOTO_GAME:
	LDA #$00 ;go to game here.
	STA IN_MENU_FLAG ;not in menu now.
	STA IN_GAME_STATE ;No in-game state?
	JSR SND_SET_F0_#$01 ;disable all sounds
	JSR NMI_DISABLE_SPRITS/BG ;disable screen
	LDA #$02
	STA TIMER_LARGE_COUNT ;play music when back on title screen
	STA TIMER_SLOW ;set to low number.
	RTS 
START_NOT_PRESSED:
	LDX SWITCH_BACK_TO_MENU_FALSE ;wait for selection
	BNE START_NOT_PRESSED/ALONE ;always taken?
SKIP_MENU:
	JMP COUNT_DOWN_MENU ;X=0=selected?
START_NOT_PRESSED/ALONE:
	CMP #$20 ;select pressed?
	BNE SELECT_NOT_PRESSED/ALONE ;no press/alone
	LDA CURSOR_UPDATE_DISALLOWED
	BNE RESET_COUNTDOWN ;no update without full release
INC_MENU_OPTION:
	LDY MENU_OPTION_SELECTING
	INY 
	CPY #$03 ;only 0-2 options available
	BNE WRITE_MENU_OPTION
	LDY #$00 ;wrap
WRITE_MENU_OPTION:
	STY MENU_OPTION_SELECTING
	JMP DISALLOW_CURSOR_UPDATES
SELECT_NOT_PRESSED/ALONE:
	CMP #$00
	BNE DISALLOW_CURSOR_UPDATES
	STA CURSOR_UPDATE_DISALLOWED ;allow updates, all released.
	BEQ NOTHING_PRESSED ;always taken
DISALLOW_CURSOR_UPDATES:
	LDA #$01 ;moved cursor, needs full release for next go.
	STA CURSOR_UPDATE_DISALLOWED
RESET_COUNTDOWN:
	LDA #$FF
	STA TIMER_SLOW ;reset countdown for menu music.
NOTHING_PRESSED:
	CPX #$01 ;blocking switch?
	BNE COUNT_DOWN_MENU ;no?
	LDA #$51 ;loop counter= 5 times, 1 byte each
	STA PPU_BLOCK_BUF_SETTING
	LDA #$24 ;blanks
	LDX #$04
Write_Data_Loop:
	STA PPU_UPDATE_BUF,X ;store 505-501
	DEX 
	BPL Write_Data_Loop
	LDA MENU_OPTION_SELECTING ;0-2
	ASL A ;mul by 2
	TAX 
	LDA #$26 ;cursor char
	STA PPU_UPDATE_BUF,X ;save to row
	LDX #$26 ;nametable addr starting 2622
	LDY #$22
	JSR MAKE_SETUP_PPU_BLOCK ;write blanks
	LDA MENU_OPTION_SELECTING ;0-2
	ASL A
	ASL A ;mul by 4
	CLC 
	ADC #$03 ;put at end
	TAX  ;X=score digit index
	LDY #$05 ;6 digits to move
MOVE_DIGITS_FOR_DISP_LOOP:
	LDA HIGH_SCORES_ARRAY,X
	AND #$0F ;get digit
	STA PPU_UPDATE_BUF,Y ;write to update buf
	DEY 
	LDA HIGH_SCORES_ARRAY,X
	LSR A
	LSR A
	LSR A
	LSR A
	STA PPU_UPDATE_BUF,Y ;again
	DEX 
	DEY 
	BPL MOVE_DIGITS_FOR_DISP_LOOP
	LDA PPU_UPDATE_BUF ;get top char
	BNE NO_BLANK_ZERO ;is 0?
	LDA #$24
	STA PPU_UPDATE_BUF ;make top 0 space instead
NO_BLANK_ZERO:
	LDA #$16 ;setting is 1 group of 6 bytes
	STA PPU_BLOCK_BUF_SETTING
	LDX #$12 ;put to PPUADDR 2312
	LDY #$23
	JSR MAKE_SETUP_PPU_BLOCK ;make the buffer to upload.
COUNT_DOWN_MENU:
	LDA TIMER_SLOW ;count down for menu music
	BNE Switch_State ;only set music when "switched" to
	JSR SND_SET_F1_#$02 ;title sound play?
	LDA #$FF ;why not just DEC $2D? Hmm...
	STA TIMER_SLOW ;title screen countdown reset
Switch_State:
	LDA SWITCH_BACK_TO_MENU_FALSE ;which selected?
	JSR GOTO_TABLE_PAST_JSR ;1=RTS, 0=UPLOAD FILE
	.LOW TABLE_UNK_STUFF_00
	.HIGH TABLE_UNK_STUFF_00 ;selection made?
	.LOW RTS
	.HIGH RTS ;RTS's.
CLEAR_BOTH_SCREENS:
	LDA #$02 ;clear screen $2400
	JSR SETUP_CLEAR_SCREEN ;screen cleared here
CLEAR_NAMETABLE_$2000:
	LDA #$01 ;clear screen $2000
SETUP_CLEAR_SCREEN:
	STA TMP_01 ;screen updating
	LDA #$24
	STA TMP_00 ;tile to clear with.
	JMP CLEAR_SCREEN
CLEAR_SPRITES:
	LDY #$00
	LDA #$F4 ;Clear value.
CLR_LOOP:
	STA $0200,Y ;clr sprites.
	INY 
	INY 
	INY 
	INY 
	BNE CLR_LOOP
	RTS 
UPLOAD_PALETTE:
	LDY PALETTE_UPLOAD
	BEQ RTS ;none to upload
	DEY  ;flag is zero'd index?
	TYA 
	ASL A ;mul by 2 for index
	TAY 
	LDA PALLETE_PTR_L,Y ;low
	LDX PALLETE_PTR_H,Y ;high
	LDY #$00
	STY PALETTE_UPLOAD ;clear flag
PREP_PPU_FILE_PTR:
	STA TMP_00 ;set up pointers to data
	STX TMP_01
	JSR PPU_FILE_TEST_STREAM
RTS:
	RTS 
UPDATE_PALATTE_FROM_400_DUR_WHITEBOX:
	LDY WHITE_BOX_DISPLAYED
	BEQ RTS ;no white box displayed
	LDY #$00 ;could be optim by removing LDY using A
	STY WHITE_BOX_DISPLAYED ;clear flag.
	LDA #$00
	LDX #$04 ;get data from 0x400
	BNE PREP_PPU_FILE_PTR ;file from RAM.
GAME_STATE_11_UNPAUSE:
	DEC GAME_SUBSTATE? ;has to do with unpausing?
	BNE RTS ;leave if still counting. for sound to play?
	LDX #$05 ;move 6 bytes
MOVE_LOOP:
	LDA TIMER_STATE_SAVE,X ;load saved timers.
	STA TIMER_LARGE_COUNT,X ;store back at main timers.
	DEX 
	BPL MOVE_LOOP
	LDA PREV_GAME_STATE ;get state before pause.
	STA IN_GAME_STATE ;by back, effectively unpausing.
RTS:
	RTS 
READ_CONTROLLERS:
	LDX #$01
	STX NES_CONTROLLER1
	DEX 
	STX NES_CONTROLLER1
	JSR READ_CTRL_SETUP
	INX 
READ_CTRL_SETUP:
	LDY #$08 ;bits to pull
READ_CTRL_LOOP:
	PHA  ;save buttons
	LDA NES_CONTROLLER1,X ;get data
	STA TMP_00 ;=a
	LSR A ;shift off bottom bit.
	ORA TMP_00 ;get famicom expansion bit+controller bit
	LSR A ;to carry
	PLA  ;pull a
	ROL A ;rotate into a
	DEY 
	BNE READ_CTRL_LOOP
	CMP CTRL_PREV,X
	BNE READ_CTRL_STORE_PREV ;didn't match prev
	INC CTRL_SAME,X ;times matched
	LDY CTRL_SAME,X
	CPY #$05
	BCC READ_CTRL_RTS ;Y < 5, RTS
	STA CTRL_HELD,X ;store held
	JMP READ_CTRL_CLEAR_SAME
READ_CTRL_STORE_PREV:
	STA CTRL_PREV,X ;update new expected buttons
READ_CTRL_CLEAR_SAME:
	LDA #$00
	STA CTRL_SAME,X ;reset counter for held.
READ_CTRL_RTS:
	RTS 
PPU_PROCESS_UPDATE_BUF:
	LDA PPU_UPDATE_FLAG ;see if updates
	BEQ RTS ;->RTS
	LDA #$61 ;ptr to PPU_UPDATE_BUF
	STA TMP_00
	LDA #$05
	STA TMP_01
	LDA PPU_CTRL_RAM
	AND #$FB ;make sure vram in by 1
	STA PPU_Ctrl
	STA PPU_CTRL_RAM
	LDX PPU_Status ;reset latch
	LDY #$00
	BEQ TEST_PPU_DATA_BUFFER ;always taken
WRITE_PPU_ADDR:
	STA PPU_Addr ;store location writing to.
	INY 
	LDA (TMP_00),Y
	STA PPU_Addr ;store low
	INY 
	LDA (TMP_00),Y ;length
	AND #$3F ;make max length
	TAX 
PPU_DATA_WRITE_LOOP:
	INY  ;ptr++
	LDA (TMP_00),Y ;ptr
	STA PPU_Data ;write data
	DEX 
	BNE PPU_DATA_WRITE_LOOP
	INY  ;ptr++
TEST_PPU_DATA_BUFFER:
	LDA (TMP_00),Y ;see if ppuaddr, will be #$20+
	BNE WRITE_PPU_ADDR ;!= 0 means update screen
	LDA #$00
	STA PPU_UPD8_BUF_INDEX ;init index
	STA PPU_UPDATE_BUF ;init buffer
	STA PPU_UPDATE_FLAG ;init index
RTS:
	RTS 
CLEAR_SCREEN:
	LDA PPU_Status ;reset latch
	LDA PPU_CTRL_RAM
	AND #$FB ;1111.1011, vram inc by 1
	STA PPU_Ctrl
	STA PPU_CTRL_RAM ;init/store status
	LDA #$1C
	CLC 
COMPUTE_NAMETBL_ADDR_HIGH:
	ADC #$04
	DEC TMP_01 ;screen updating?
	BNE COMPUTE_NAMETBL_ADDR_HIGH
	STA TMP_02 ;screen addr high
	STA PPU_Addr ;set screen addr
	LDA #$00
	STA PPU_Addr
	LDX #$04 ;init looping values
	LDY #$00
	LDA TMP_00 ;get tile to clear with
WRITE_NAMETABLE_LOOP:
	STA PPU_Data
	DEY 
	BNE WRITE_NAMETABLE_LOOP
	DEX 
	BNE WRITE_NAMETABLE_LOOP
	LDA TMP_02
	ADC #$03 ;attribute table
	STA PPU_Addr
	LDA #$C0
	STA PPU_Addr
	LDY #$40
	LDA #$00
WRITE_ATTR_LOOP:
	STA PPU_Data ;always #$00
	DEY 
	BNE WRITE_ATTR_LOOP
	RTS 
DEC_TIMERS_2B-2E:
	LDX #$01 ;index
	DEC TIMER_LARGE_COUNT
	BPL DEC_TIMER(X) ;Only B+C
	LDA #$0A ;Timers[2+] only dec every 12 frames.
	STA TIMER_LARGE_COUNT
	LDX #$03 ;index 2E instead
DEC_TIMER(X):
	LDA FAST_TIMERS,X
	BEQ ALREADY_0 ;dont dec if 0.
	DEC FAST_TIMERS,X ;dec if not already 0
ALREADY_0:
	DEX  ;next timer
	BPL DEC_TIMER(X)
	RTS 
GOTO_TABLE_PAST_JSR:
	STX SAVE_STATE_X ;save x and y
	STY SAVE_STATE_Y
	ASL A ;mul by 2 for index
	TAY 
	INY  ;go past instruction byte.
	PLA  ;get location after JSR to us.
	STA INDIR_JMP_LOW
	PLA 
	STA INDIR_JMP_HIGH
	LDA (INDIR_JMP_LOW),Y ;load which ptr to go to.
	TAX 
	INY 
	LDA (INDIR_JMP_LOW),Y
	STA INDIR_JMP_HIGH
	STX INDIR_JMP_LOW
	LDX SAVE_STATE_X ;load X and Y again.
	LDY SAVE_STATE_Y
	JMP (INDIR_JMP_LOW) ;jump to routine.
PPU_WRITE_FILE:
	STA PPU_Addr ;store addrs first
	INY 
	LDA (TMP_00),Y
	STA PPU_Addr
	INY 
	LDA (TMP_00),Y ;this 3rd byte has flag bits
	ASL A ;get increment setting
	PHA  ;save the flag for later
	LDA PPU_CTRL_RAM
	ORA #$04 ;Set PPU_CTRL to inc by 32
	BCS SET_PPUCTRL
	AND #$FB ;Set PPU_CTRL to inc by 1
SET_PPUCTRL:
	STA PPU_Ctrl
	STA PPU_CTRL_RAM
	PLA  ;get flags again
	ASL A ;single block flag
	BCC DATA_CHUNK ;setting up a chunk
	ORA #$02 ;single block flag
	INY  ;move ptr to block data
DATA_CHUNK:
	LSR A ;move other parts all back
	LSR A ;this sets carry to 0:screen, or 1:block
	TAX  ;X=original bottom bits 0-5, used as counter.
PPU_DATA_LOOP:
	BCS SINGLE BLOCK ;if CS, only writing one block type.
	INY  ;only moves on carry clear
SINGLE BLOCK:
	LDA (TMP_00),Y ;get data
	STA PPU_Data ;store data
	DEX  ;move bytes
	BNE PPU_DATA_LOOP ;loop if not done. MAX=64 bytes
	SEC  ;not sure
	TYA  ;get ready for maffs
	ADC TMP_00 ;move pointer
	STA TMP_00
	LDA #$00
	ADC TMP_01
	STA TMP_01
PPU_FILE_TEST_STREAM:
	LDX PPU_Status ;reset latch.
	LDY #$00 ;start at beginning
	LDA (TMP_00),Y ;get data at ptr
	BNE PPU_WRITE_FILE ;0 = EOF, the universal truth.
SET_PPU_SCROLL:
	PHA  ;set scroll at end of PPU_ADDR access.
	LDA PPU_SCROLL_X_RAM
	STA PPU_Scroll
	LDA PPU_SCROLL_Y_RAM
	STA PPU_Scroll
	PLA  ;good for avoiding bugs. :D
	RTS 
PPU_UPDATE_BLOCK:
	LDA #$01
	STA PPU_UPDATE_FLAG ;set update flag
	LDY #$00 ;start at beginning
	LDA (TMP_02),Y ;setup byte at pointed data
	AND #$0F
	STA TMP_05 ;number of bytes in group, upto 15
	LDA (TMP_02),Y
	LSR A
	LSR A
	LSR A
	LSR A
	STA TMP_04 ;number of groups, upto 15
	LDX PPU_UPD8_BUF_INDEX
PROCESS_GROUP:
	LDA TMP_01
	STA PPU_UPDATE_BUF,X ;store high addr of ppu addr
	JSR INCREASE_PPU_UPD8_INDEX
	LDA TMP_00
	STA PPU_UPDATE_BUF,X ;store low ppu addr
	JSR INCREASE_PPU_UPD8_INDEX
	LDA TMP_05
	STA TMP_06 ;num bytes counter
	STA PPU_UPDATE_BUF,X ;store to update buf
MORE_BYTES_IN_GROUP:
	JSR INCREASE_PPU_UPD8_INDEX
	INY 
	LDA (TMP_02),Y
	STA PPU_UPDATE_BUF,X
	DEC TMP_06 ;dec num bytes left
	BNE MORE_BYTES_IN_GROUP
	JSR INCREASE_PPU_UPD8_INDEX
	STX PPU_UPD8_BUF_INDEX ;save new index.
	CLC 
	LDA #$20 ;move ppu to next line.
	ADC TMP_00
	STA TMP_00
	LDA #$00
	ADC TMP_01
	STA TMP_01
	DEC TMP_04 ;more groups?
	BNE PROCESS_GROUP
	LDA #$00 ;null terminate
	STA PPU_UPDATE_BUF,X ;end of data
	RTS 
INCREASE_PPU_UPD8_INDEX:
	INX 
	TXA  ;not sure why not CPX below without this. TODO.
	CMP #$4F ;last byte possible.
	BCC NO_TERM ;if index < 4F
	LDX PPU_UPD8_BUF_INDEX ;Stop overflow if >=4F.
	LDA #$00 ;terminate
	STA PPU_UPDATE_BUF,X
	PLA  ;leave 2 routines back, wtf?
	PLA 
NO_TERM:
	RTS 
SCORE_ADD/SUB:
	CLC 
	ADC #$01 ;10
	AND #$0F ;0
	ASL A
	ASL A
	TAX 
	LDA TMP_04 ;subtract score flag?
	BEQ L_046A ;dead code maybe?
	LDA SCORE_LOWER,X
	BEQ SCORE_GROUP_SUBTRACT
SCORE_ADD:
	CLC 
	LDA SCORE_0000XX,X
	STA TMP_03 ;digits group scratch
	LDA TMP_07 ;adding digits 0000XX
	JSR SCORE_ADD_GROUP
	STA SCORE_0000XX,X ;store new score.
	LDA SCORE_00XX00,X ;same as above
	STA TMP_03 ;digits group scratch
	LDA TMP_06 ;adding digits 00XX00
	JSR SCORE_ADD_GROUP
	STA SCORE_00XX00,X
	LDA SCORE_XX0000,X ;same as above
	STA TMP_03 ;digits group scratch
	LDA TMP_05 ;adding digits 0000XX
	JSR SCORE_ADD_GROUP
	STA SCORE_XX0000,X
	RTS 
L_046A:
	LDA SCORE_LOWER,X
	BEQ SCORE_ADD ;always taken? code below possibly dead.
SCORE_GROUP_SUBTRACT:
	SEC 
	LDA SCORE_0000XX,X
	STA TMP_03 ;digit groups scratch
	LDA TMP_07 ;digits subtracting 0000XX
	JSR SCORE_SUBTRACT_FROM_03
	STA SCORE_0000XX,X
	LDA SCORE_00XX00,X
	STA TMP_03 ;digit groups scratch
	LDA TMP_06 ;digits subtracting 00XX00
	JSR SCORE_SUBTRACT_FROM_03
	STA SCORE_00XX00,X
	LDA SCORE_XX0000,X
	STA TMP_03 ;digit groups scratch
	LDA TMP_05 ;digits subtracting XX0000
	JSR SCORE_SUBTRACT_FROM_03
	STA SCORE_XX0000,X
	LDA SCORE_XX0000,X ;why load what we just stored?
	BNE L_049C
	LDA SCORE_00XX00,X
	BNE L_049C
	LDA SCORE_0000XX,X
	BEQ L_04A2 ;if zero skip
L_049C:
	BCS L_04BE
	LDA SCORE_LOWER,X ;invert C3
	EOR #$FF
L_04A2:
	STA SCORE_LOWER,X ;store c3
	SEC 
	LDA #$00
	STA TMP_03
	LDA SCORE_0000XX,X
	JSR SCORE_SUBTRACT_FROM_03
	STA SCORE_0000XX,X
	LDA SCORE_00XX00,X
	JSR SCORE_SUBTRACT_FROM_03
	STA SCORE_00XX00,X
	LDA SCORE_XX0000,X
	JSR SCORE_SUBTRACT_FROM_03
	STA SCORE_XX0000,X
L_04BE:
	RTS 
SCORE_ADD_GROUP:
	JSR SETUP_RAM,RET_LOW_DIGIT ;A=value to add to base.
	ADC TMP_01
	CMP #$0A ;see if above 9
	BCC NO_ROLLOVER
	ADC #$05 ;roll first digit, carry important.
NO_ROLLOVER:
	CLC 
	ADC TMP_02 ;add high digit
	STA TMP_02 ;stores whole value.
	LDA TMP_03
	AND #$F0
	ADC TMP_02
	BCC L_04DB
L_04D7:
	ADC #$5F ;adds #$60 because c always set.
	SEC  ;unneeded because it should always roll.
	RTS 
L_04DB:
	CMP #$A0
	BCS L_04D7 ;roll
	RTS  ;no roll, leave alone
SCORE_SUBTRACT_FROM_03:
	JSR SETUP_RAM,RET_LOW_DIGIT
	SBC TMP_01 ;subtract low digit
	STA TMP_01
	BCS SCORE_SUB_NOUNDER
	ADC #$0A ;put digit 0-9 range, carry set after
	STA TMP_01
	LDA TMP_02 ;load high digit
	ADC #$0F ;adds 10
	STA TMP_02 ;store back
SCORE_SUB_NOUNDER:
	LDA TMP_03 ;score digit high
	AND #$F0 ;get high digit
	SEC 
	SBC TMP_02
	BCS NO_UNDERFLOW
	ADC #$A0 ;put top in 0-9 range
	CLC  ;underflow next jsr
NO_UNDERFLOW:
	ORA TMP_01 ;combine digits
	RTS  ;done subbing
SETUP_RAM,RET_LOW_DIGIT:
	PHA  ;A=add/sub value
	AND #$0F
	STA TMP_01 ;store lower digit
	PLA 
	AND #$F0
	STA TMP_02 ;store higher digit
	LDA TMP_03 ;add/sub from these digits
	AND #$0F ;get lower digplayed digits
	RTS  ;ret lower digit.
MOVE_HIGHER_TO_SCORE:
	LDA #$00
	STA TMP_04 ;clear
	CLC 
	LDA TMP_00 ;F0
	ADC #$10 ;put into range
	AND #$F0 ;mask bits
	LSR A
	LSR A ;>> 2
	TAY  ;Y=0
	LDA TMP_00
	AND #$07
	ASL A
	ASL A ;<< 2
	TAX  ;X=0
LOOP_ALL_X_INDEXES:
	LDA SCORE_LOWER,Y ;wrong addr mode lol.
	BEQ ACCESS_NO_VAL
	LDA SCORE_ACCESS_CPY,X
	BEQ SET_SCORE_CPY
SUBTRACT_CPY_FROM_SCORE:
	SEC 
	LDA SCORE_0000XX,Y ;wrong addr modes here
	STA TMP_03
	LDA SCORE_CPY_0000XX,X
	JSR SCORE_SUBTRACT_FROM_03
	LDA SCORE_00XX00,Y ;again
	STA TMP_03
	LDA SCORE_CPY_00XX00,X
	JSR SCORE_SUBTRACT_FROM_03
	LDA SCORE_XX0000,Y ;again
	STA TMP_03
	LDA SCORE_CPY_XX0000,X
	JSR SCORE_SUBTRACT_FROM_03
	BCS SCORE_LOWER ;>= ?
	LDA SCORE_LOWER,Y ;again
	BNE SCORE_HIGHER ;always taken?
SET_SCORE_CPY:
	LDA #$FF
	STA TMP_04 ;which higher flag?
	SEC 
SCORE_WRITE_CPY_LOWER:
	TYA 
	BNE RTS ;don't write if Y not 0
	BCC SKIP_COPY ;skip on no carry
	LDA SCORE_ACCESS_CPY,X
	STA SCORE_LOWER
	LDA SCORE_CPY_XX0000,X
	STA SCORE_XX0000
	LDA SCORE_CPY_00XX00,X
	STA SCORE_00XX00
	LDA SCORE_CPY_0000XX,X
	STA SCORE_0000XX
SKIP_COPY:
	LDA TMP_00
	AND #$08
	BEQ RTS
	DEX 
	DEX 
	DEX 
	DEX 
	BPL LOOP_ALL_X_INDEXES
RTS:
	RTS 
ACCESS_NO_VAL:
	LDA SCORE_ACCESS_CPY,X ;see if cpy has value
	BEQ SUBTRACT_CPY_FROM_SCORE ;both are empty, sub.
SCORE_LOWER:
	LDA SCORE_LOWER,Y
	BNE SET_SCORE_CPY
SCORE_HIGHER:
	CLC 
	BCC SCORE_WRITE_CPY_LOWER
RNG_ADVANCE:
	LDA RNG_ARRAY ;LFSR between 0-2,1-2
	AND #$02
	STA TMP_07 ;either #$02 or #$00
	LDA RNG_ARRAY+1
	AND #$02
	EOR TMP_07 ;if match, C=0, otherwise C=1
	CLC 
	BEQ RNG_ROTATE
	SEC 
RNG_ROTATE:
	ROR RNG_ARRAY
	ROR RNG_ARRAY+1
	ROR RNG_ARRAY+2
	ROR RNG_ARRAY+3
	LDA RNG_ARRAY
	RTS 
TABLE_UNK_STUFF_00:
	JSR NMI_DISABLE_SPRITS/BG ;JUMPS TO FROM MENU SELECTION
	JSR CLEAR_NAMETABLE_$2000 ;clears nametable
	JSR WAIT_FOR_NMI ;wait for nmi.
	LDA #$02
	STA TMP_01 ;nametable $2400 to clear
	LDA #$50
	STA TMP_00 ;tile to clear with
	JSR CLEAR_SCREEN
	JSR CLEAR_SPRITES
	JSR WAIT_FOR_NMI
	LDX #$04
	LDY #$E4 ;upload file from E404
	JSR UPLOAD_PPU_FILE
	LDA #$01
	STA PALETTE_UPLOAD
	LDA #$01
	STA CURSOR_UPDATE_DISALLOWED
	INC SWITCH_BACK_TO_MENU_FALSE
	JMP PPU_ENABLE_SPRITES/BG
WAIT_FOR_NMI:
	JSR CLEAR_NMIRAN/PPUSTUFFFLAG ;waited always clears current.
WAIT_FOR_NMI_LOOP:
	LDA NMI_RAN
	BEQ WAIT_FOR_NMI_LOOP
RTS:
	RTS  ;Jumped to from somewhere else.
NMI_DISABLE_SPRITS/BG:
	JSR WAIT_FOR_NMI
	LDA PPU_MASK_RAM
	AND #$E7
STORE_PPUMASK:
	STA PPU_MASK_RAM
	STA PPU_Mask
	RTS 
PPU_ENABLE_SPRITES/BG:
	JSR WAIT_FOR_NMI
	LDA PPU_MASK_RAM
	ORA #$18 ;set sprits/bg
	BNE STORE_PPUMASK
COPY_OBJ_$3YY_TO_OBJ_ZP:
	STY MV_FROM_300_LOCATION ;save for move back later
	LDX #$00 ;these bytes are the object data.
Loopy:
	LDA TRGT1_TYPE,Y ;it moves them to work on them all in zp.
	STA OBJ_ZP_COPY,X ;and then moves them back.
	INY  ;thanks for coming to my ted talk.
	INX 
	CPX #$50
	BNE Loopy
	RTS 
MOVE_$50B_BACK:
	LDY MV_FROM_300_LOCATION ;get original location.
	LDX #$00
Loopy:
	LDA OBJ_ZP_COPY,X
	STA TRGT1_TYPE,Y ;store back.
	INY 
	INX 
	CPX #$50
	BNE Loopy ;not done.
	RTS  ;done.
UPLOAD_PPU_FILE:
	STX TMP_00
	STY TMP_01
	JMP PPU_FILE_TEST_STREAM
CLEAR_NMIRAN/PPUSTUFFFLAG:
	LDA #$00
	STA NMI_RAN ;NMI not ran.
	STA PPU_BLOCK_UPDATE_IN_NMI ;dont block ppu stuff.
	RTS  ;return.
GAME_STATE_12_WAIT_TO_FORWARD:
	LDA TIMER_SLOW ;timer slow is handled by NMI.
	BNE RTS ;wait to move state.
	LDA IN_GAME_FUTURE_STATE ;future is now...
	STA IN_GAME_STATE
RTS:
	RTS  ;leave.
SET_NEW_STATE_AFTER_TIMER:
	STX IN_GAME_FUTURE_STATE ;X = state to go to.
	STA TIMER_SLOW ;A = time until switch.
	LDA #$12 ;wait game state.
	STA IN_GAME_STATE ;move to state now.
	RTS 
CLEAR_0300-03FF:
	LDY #$00
	TYA 
more_data:
	STA TRGT1_TYPE,Y ;$300 generic.
	INY 
	BNE more_data
	RTS 
CLEAR_RAM_$30-$FF:
	LDA #$00
	LDX #$30 ;start
LOOPX:
	STA TMP_00,X
	INX 
	BNE LOOPX ;end when we write $FF
	RTS 
CLEAR_0040_00BF:
	LDA #$00 ;half of obj data? and other vars?
	LDX #$7F
MORE_CLEAR:
	STA OBJ_ZP_PTR_L_UNK,X
	DEX 
	BPL MORE_CLEAR
	RTS 
SCORE_TO_SCREEN:
	LDX #$03 ;3 groups of digits.
	LDY #$05 ;index?
DIGITS_TO_UPDATE_BUF:
	LDA SCORE_LOWER,X ;get digits.
	AND #$0F
	STA PPU_UPDATE_BUF,Y ;store digits.
	DEY  ;next spot.
	LDA SCORE_LOWER,X ;get digit.
	LSR A ;shift data.
	LSR A
	LSR A
	LSR A
	STA PPU_UPDATE_BUF,Y ;store to buffer.
	DEX  ;next group.
	DEY  ;count.
	BPL DIGITS_TO_UPDATE_BUF ;if not 6 digits, loop.
	LDA #$16
	STA PPU_BLOCK_BUF_SETTING ;1 group 6 bytes.
	LDX BONUS_ADDR_LOW ;get location on screen.
	LDY BONUS_ADDR_HIGH
	JMP MAKE_SETUP_PPU_BLOCK ;commit data.
SPRITE_SOMETHING_UNK:
	LDA TMP_0C ;get temp data byte.
	ASL A ;make index.
	TAY  ;to index reg.
	LDA UNK_PTR_ARR_LOW,Y
	STA TMP_$10
	LDA UNK_PTR_ARR_HIGH,Y
	STA TMP_$11
	LDY #$00 ;start of stream/data.
	LDX #$00
LOOP_SPRITE_IDK:
	LDA (TMP_$10),Y ;check stream.
	CMP #$AA ;end of data/stream/file marker.
	BNE COMMIT_SPRITE_DATA ;not end, write bytes.
RTS:
	RTS  ;leave if the end.
COMMIT_SPRITE_DATA:
	CLC 
	ADC TARGET_Y_COORD_CPY ;get Y after offset.
	CMP #$A8 ;if >A9...
	BCC L_069E
	LDA #$F4 ;move off screen.
L_069E:
	STA TMP_0D ;Y coord.
	INY 
	LDA (TMP_$10),Y ;get next byte.
	CLC 
	ADC TARGET_X_COORD_CPY ;add X.
	STA TMP_$0E ;save X.
	INY 
	LDA TMP_0D ;get saved Y
	STA $0200,X ;store  Y
	INX  ;next OAM
	LDA #$56 ;tile 56, is blank, hmm... filled out later?
	STA $0200,X
	INX  ;next addr
	LDA #$00 ;no mods to tile.
	STA $0200,X
	INX 
	LDA TMP_$0E ;get saved X
	STA $0200,X ;write saved X
	INX  ;point to next area.
	JMP LOOP_SPRITE_IDK
DISP_TARGETS_HIT:
	LDA UPDATE_TARGETS_HIT
	BEQ RTS ;not set
	LDA #$00
	STA UPDATE_TARGETS_HIT ;clear flag
PPU_DISP_TARGET_STATUS:
	LDA #$D6 ;duck ppu tile. unconditional JSR.
	LDY GAME_MODE_IN
	CPY #$02
	BNE DUCKS_GAME ;is ducks game
	LDA #$D4 ;pigeon ppu tile
DUCKS_GAME:
	STA TMP_0C ;TMP_OC = game tile here.
	LDX #$09 ;items to shoot.
MOVE_DAT_LOOP:
	LDY TMP_0C ;get tile shown.
	LDA DUCKS_HIT_ARRAY,X ;get if hit.
	BEQ DUCK_NOT_HIT
	DEY  ;make graphic the hit graphic.
DUCK_NOT_HIT:
	TYA  ;graphic to A.
	STA PPU_UPDATE_BUF,X ;store.
	DEX  ;next entry.
	BPL MOVE_DAT_LOOP
PPU_SHOW_TARGETS_BUFFER:
	LDA #$1A ;1 group, 10 things. entry point.
	STA PPU_BLOCK_BUF_SETTING
	LDX #$4C ;location on screen.
	LDY #$23
	JMP MAKE_SETUP_PPU_BLOCK ;put to screen.
PPU_DISP_SHOTS_LEFT:
	LDA SHOT_FIRED
	BEQ RTS ;no shot fired.
	LDA #$00
	STA SHOT_FIRED ;clear fired.
	LDX SHOTS_REMAINING
	LDY #$00 ;setup index.
MOVE_MORE_TILES:
	CPX #$00
	BEQ NO_SHOTS_REMAINING
	DEX  ;1 less shot.
	LDA #$D9 ;bullet tile
	BNE L_070C
NO_SHOTS_REMAINING:
	LDA #$B7 ;blank shot tile.
L_070C:
	STA PPU_UPDATE_BUF,Y ;store to spot.
	INY  ;next spot.
	CPY #$03 ;check for 3 bullets.
	BNE MOVE_MORE_TILES ;do all tiles.
	LDA #$13 ;1 group of 3
	STA PPU_BLOCK_BUF_SETTING
	LDX #$43 ;put where they go.
	LDY #$23
MAKE_SETUP_PPU_BLOCK:
	STX TMP_00 ;low ppu addr
	STY TMP_01 ;high ppu addr
	LDX #$00
	LDY #$05
	STX TMP_02
	STY TMP_03 ;setup ram pointer
	JMP PPU_UPDATE_BLOCK ;WARNING-2RTS'S POSSIBLE
GAME_STATE_7_SCORE+TRGT3:
	LDA TIMER_SLOW
	BEQ SCORE_SOMETHING ;wait until 0 to score.
	LDA GAME_MODE_IN
	CMP #$02
	BEQ RTS ;if pigeons, no dog advance.
	JMP FORWARD_TARGET_3
RTS:
	RTS 
SCORE_SOMETHING:
	LDX #$03 ;score digits loop counter
SCORE_TO_C7:
	LDA SCORE_LOWER,X
	STA SCORE_ACCESS_CPY,X
	DEX 
	BPL SCORE_TO_C7
	LDA GAME_MODE_IN
	ASL A
	ASL A ;mul game mode by 4
	TAY  ;index
	STY TMP_0F ;score index
	LDX #$00 ;ugh counting up
LOOP_MOVE_HIGHSCORE_TO_CURR:
	LDA HIGH_SCORES_ARRAY,Y
	STA SCORE_LOWER,X
	INY 
	INX 
	CPX #$04 ;moved 4 bytes?
	BNE LOOP_MOVE_HIGHSCORE_TO_CURR ;move more
	LDA #$F0 ;looking at
	STA TMP_00
	JSR MOVE_HIGHER_TO_SCORE
	LDY TMP_0F
	LDX #$00
WRITE_HIGH_SCORE:
	LDA SCORE_LOWER,X
	STA HIGH_SCORES_ARRAY,Y
	INY 
	INX 
	CPX #$04
	BNE WRITE_HIGH_SCORE
	LDY #$00
	STY ZAPPER_TRIG_RELEASED
	STY SWITCH_BACK_TO_MENU_FALSE
	INY 
	STY IN_MENU_FLAG
	JMP NMI_DISABLE_SPRITS/BG
GAME_STATE_6_IDK:
	JSR SND_SET_F1_#$04 ;clear sound?
	JSR WAIT_FOR_NMI
	JSR SND_SET_F0_#$40 ;set sound now?
	LDA #$01
	STA TRGT3_TYPE ;not sure.
	STA TRGT3_STATE
	LDA #$07
	STA IN_GAME_STATE
	LDA #$15 ;set timer.
	STA TIMER_SLOW
	RTS 
MAKE_DISP_BUF_REQUIRED:
	LDX #$0A
WRITE_NEEDED_LINE:
	CPX HITS_REQUIRED_RAM
	BCC REQUIRED_BLOCK ;X >= HITS_REQD
	BEQ REQUIRED_BLOCK ;whoops. can be taken. still bad, could LDA #$0B, BCS
	LDA #$B7 ;Display blank.
	BNE WRITE_SETTING
REQUIRED_BLOCK:
	LDA #$D7 ;Display required lines.
WRITE_SETTING:
	STA PPU_BLOCK_BUF_SETTING,X ;store blank/lines
	DEX 
	BNE WRITE_NEEDED_LINE
	LDA #$1A ;1 group, 10 chars
	STA PPU_BLOCK_BUF_SETTING
	LDX #$6C
	LDY #$23 ;PPU ADDR
	JMP MAKE_SETUP_PPU_BLOCK ;make update block
MAKE_DISP_BUF_LEVEL:
	LDA LEVEL
	STA TMP_03
	LDA #$01
	CLC 
	JSR SCORE_ADD_GROUP ;inc level
	STA LEVEL
	LDA #$12 ;1 group of 2 bytes
	STA PPU_BLOCK_BUF_SETTING
	LDX #$DD ;PIGEONS DEFAULT ROUND CHR
	LDA GAME_MODE_IN
	CMP #$02
	BEQ WRITE_TILE
	LDX #$50 ;DUCK DEFAULT ROUND CHR
WRITE_TILE:
	STX PPU_UPDATE_BUF+1 ;Always blank just in case.
	LDX #$00 ;set chr writing
	LDA LEVEL
	AND #$F0
	BEQ WRITE_DIGIT ;Write only 1 digit if taken.
	LSR A
	LSR A
	LSR A
	LSR A
	STA PPU_UPDATE_BUF,X ;store high digit
	INX  ;next digit
WRITE_DIGIT:
	LDA LEVEL
	AND #$0F
	STA PPU_UPDATE_BUF,X ;store low digit
	LDX #$05
	LDY #$23 ;PPU ADDR for update
	JMP MAKE_SETUP_PPU_BLOCK ;make buffer.
GAME_STATE_D_WAIT_UPDATES:
	LDA MULTIPLE_BG_UPDATE_INDEX
	BEQ 9D_IS_ZERO ;if not done updating the BG.
	JMP BG_UPDATES_AUTOMATIC ;handle timer if not 0, abuse RTS.
9D_IS_ZERO:
	LDA #$0A ;Move to state A when update done.
	STA IN_GAME_STATE ;new state when timer = 0.
	RTS 
BG_UPDATES_AUTOMATIC:
	LDA FAST_TIMERS
	BNE RTS ;rts if timer !0
	LDY MULTIPLE_BG_UPDATE_INDEX
	BEQ RTS ;rts if flag clear.
	LDA TIMER_9D_STUFF?,Y
	CMP #$AA
	BEQ EOF ;clear 9D if loaded?
	PHA  ;save otherwise.
	INY 
	LDA TIMER_9D_STUFF?,Y ;get next byte.
	STA FAST_TIMERS ;set timer.
	INY 
	STY MULTIPLE_BG_UPDATE_INDEX ;save next value.
	PLA  ;pull first value.
	JMP SPR_BG_UNK ;use it to...
EOF:
	LDA #$00
	STA MULTIPLE_BG_UPDATE_INDEX ;No 9D index when reset.
RTS:
	RTS 
GAME_STATE_0_INIT_RAM+SCREENS:
	JSR CLEAR_RAM_$30-$FF
	JSR WAIT_FOR_NMI
	JSR CLEAR_BOTH_SCREENS
	JSR CLEAR_MEMORIES ;clear sprites, $3XX, and 40-BF
	LDX #$01 ;ducks.
	LDA MENU_OPTION_SELECTING
	STA GAME_MODE_IN ;0-1 = ducks, 2 = pigeons
	CMP #$02
	BCC GAME_MODE_<2 ;bne should work too.
	LDX #$08 ;pigeons.
GAME_MODE_<2:
	STX IN_GAME_STATE ;now either 1 or 8.
	RTS 
GAME_STATE_1_SETUP_DUCKS:
	JSR WAIT_FOR_NMI ;set up game for ducks here.
	LDX #$42
	LDY #$E0
	JSR UPLOAD_PPU_FILE ;upload file for screen.
	LDA #$02
	STA PALETTE_UPLOAD ;game palette
	LDA #$02
	STA IN_GAME_STATE ;next game state
	JSR SET_PPU_SCROLL ;set scroll
	JSR PPU_ENABLE_SPRITES/BG ;turn on screeen
	JMP SND_SET_F1_#$10 ;set a sound. intro music?
GAME_STATE_2_SETUP_SUBROUND:
	JSR CLEAR_MEMORIES
	JSR SETUP_HITSREQD_TARGETS_OTHER ;sets up level hits number, targets, etc.
	JSR MAKE_DISP_BUF_REQUIRED
	JSR MAKE_DISP_BUF_LEVEL
	NOP  ;removed feature?
	NOP 
	NOP 
	LDA #$00
	STA ZAPPER_TRIG_RELEASED ;not true.
	STA MULTIPLE_BG_UPDATE_INDEX ;(cleared with above jsr's)
	LDA #$03
	STA IN_GAME_STATE ;switch state
	RTS 
GAME_STATE_3_ZAP+TRGTS(+STATUS)+SHOT:
	JSR ZAP_PROC_TRIGGER
	JSR PROCESS_ZAPPER
	JSR FORWARD_TARGET_3 ;dog obj handling.
	JSR FORWARD_TARGETS_1+2 ;target handling.
	JSR PPU_DISP_SHOTS_LEFT
	JSR UPDATE_ACTIVE_TARGET_STATUS
	JSR DISP_TARGETS_HIT
	JSR DISP_SCORE_SPRITES
	JSR DISP_BLINK_WORD_SHOT
	JSR BG_UPDATES_AUTOMATIC
	NOP  ;removed feature?
	NOP 
	NOP 
	RTS  ;return.
FORWARD_TARGETS_1+2:
	LDA TRGT1_TYPE
	BEQ FORWARD_TARGET_2 ;not active
	LDY #$00
	STY OBJ_ZP_ORIGIN_SLOT# ;where obj came from
	JSR COPY_OBJ_$3YY_TO_OBJ_ZP ;move obj data.
	JSR PROCESS_OBJ_TARGET
	JSR MOVE_$50B_BACK
FORWARD_TARGET_2:
	LDA TRGT2_TYPE
	BEQ Zapper_shot? ;not active
	LDY #$50
	INC OBJ_ZP_ORIGIN_SLOT# ;apparently active target will ALWAYS be in slot 1?
	JSR COPY_OBJ_$3YY_TO_OBJ_ZP
	JSR PROCESS_OBJ_TARGET
	JSR MOVE_$50B_BACK
Zapper_shot?:
	LDA ZAP_SHOT_ENABLED
	BEQ RTS ;Zapper shot disabled.
	LDY DEACTIVATE_SHOOTING_COUNDOWN?
	BNE WRITE_COUNTDOWN ;count down
	LDY #$41 ;set value
	LDA SHOTS_REMAINING
	BNE WRITE_COUNTDOWN ;if has shots.
	LDY #$15 ;otherwise, this value if no shots.
WRITE_COUNTDOWN:
	DEY 
	STY DEACTIVATE_SHOOTING_COUNDOWN?
	LDA #_TRGTS_IN_MODE
	BNE DEC_A6 ;bc_exists
	LDA TRGT1_STATE
	BNE RTS ;in state, rts
	LDA TRGT2_STATE
	BNE RTS ;in state, rts
	LDA FAST_TIMERS
	BNE RTS ;has time, rts
	LDA #$0A ;state
	LDY #$07 ;palette
	LDX TRGT_SHOT_DURING_ATTEMPT
	BEQ BD_IS_0
	LDA #$0C ;state
	LDY #$02 ;palette
BD_IS_0:
	STA TRGT3_STATE
	STY PALETTE_UPLOAD
	JSR WAIT_FOR_NMI
	JSR PPU_DISP_SHOT_TEXT
	LDA #$40
	STA FAST_TIMERS ;store timer
	LDA #$00
	STA ZAP_SHOT_ENABLED ;disable shots
	JMP UPDATE_PPU_GROUP
DEC_A6:
	LDA UNK_$A6
	BEQ RTS
	DEC UNK_$A6 ;if not zero, dec.
RTS:
	RTS 
PROCESS_OBJ_TARGET:
	LDA OBJ_ZP_STATE
	JSR GOTO_TABLE_PAST_JSR
	.LOW RTS
	.HIGH RTS ;RTS
	.LOW TRGT_STATE_1_INIT_OBJ+MODIFY ;inits target data in $30 area, sets tile range.
	.HIGH TRGT_STATE_1_INIT_OBJ+MODIFY
	.LOW TRGT_STATE_2_UNK ;does a lot of stuff.
	.HIGH TRGT_STATE_2_UNK
	.LOW TARGET_STATES_INDIRECT_03 ;something to do with shooting.
	.HIGH TARGET_STATES_INDIRECT_03
	.LOW TARGET_STATES_INDIRECT_04 ;something with target hit.
	.HIGH TARGET_STATES_INDIRECT_04
	.LOW TARGET_STATES_INDIRECT_05 ;shot? something sound.
	.HIGH TARGET_STATES_INDIRECT_05
	.LOW TARGET_STATES_INDIRECT_06 ;sprite, range, idk.
	.HIGH TARGET_STATES_INDIRECT_06
	.LOW TARGET_STATES_INDIRECT_07 ;falling?
	.HIGH TARGET_STATES_INDIRECT_07
	.LOW TRGT_STATE_8_REMOVE_OBJ ;take spr off screen?
	.HIGH TRGT_STATE_8_REMOVE_OBJ
TRGT_STATE_1_INIT_OBJ+MODIFY:
	LDX #$1F ;move 0 to 1F bytes.
LOOP:
	LDA TARGET_INIT_DATA_PIGEON/DUCK,X ;initial target data?
	STA OBJ_ZP_COPY,X ;store to in-ram buffer.
	DEX 
	BPL LOOP ;move 1F to 0
	LDA OBJ_ZP_ORIGIN_SLOT# ;if origin was obj 0?
	BEQ TARGET_ZERO ;not sure why. find last shot? idk.
	LDA #$40
	STA OBJ_INDEX_START ;different obj area for target 1.
	LDA #$7F
	STA OBJ_INDEX_FINAL ;ending inded for obj.
TARGET_ZERO:
	INC OBJ_ZP_STATE ;inc target state.
RTS:
	RTS 
TRGT_STATE_2_UNK:
	LDA ZAP_SHOT_ENABLED ;is zapper enabled?
	BEQ RTS ;leave if not enabled
	LDA UNK_$A6 ;unk
	BNE RTS ;if equal leave
	JSR RNG_ADVANCE ;get random number.
	AND #$0F
	LDY GAME_MODE_IN
	BNE Don't Add 10
	CLC 
	ADC #$10 ;up to 1F now.
Don't Add 10:
	CMP UNK_$9C ;not sure what is comparing against.
	BNE NOT_EQ ;not eq
	CLC 
	ADC #$01 ;up to #$20 now.
	CMP #$10
	BEQ IS_10 ;is eq
	CMP #$20
	BNE NOT_EQ ;not 20
IS_10:
	SEC 
	SBC #$10 ;subtract 10.
NOT_EQ:
	STA UNK_$9C ;update 9C...hmm...
	ASL A
	TAX 
	LDA OBJ_DATA_UNK_HIGH,X
	STA OBJ_ZP_STEP?
	LDA OBJ_DATA_UNK_LOW,X
	STA OBJ_ZP_COPY+21
	JSR RNG_ADVANCE ;get new rand number.
	AND #$3F ;range
	TAY 
	INY  ;1 to 40
	STY UNK_$A6 ;store
	LDY #$00 ;reset index
	LDA (OBJ_ZP_STEP?),Y ;load data pointer.
	INY 
	STY OBJ_ZP_POPUP_OFFSET ;store next index
	STA OBJ_ZP_X_COORD ;store loaded data.
	LDY #$00
	LDX UNK_$99 ;set something.
	BEQ $99_CLEAR
	LDY #$02 ;load 2 if $99 is 0. why?
$99_CLEAR:
	STY OBJ_ZP_DISP_ATTR? ;store
	INC UNK_$99 ;INC
	LDX DUCK_TYPE?_98
	LDA TARGET_DATA_COMBO,X
	CPY #$00
	BEQ SHIFT_DATA ;shift if =0
	AND #$0F ;get lower byte data if not.
	JMP DATA_LOW_START ;jump to code.
SHIFT_DATA:
	LSR A ;XXXX0000 -> 0000XXXX
	LSR A
	LSR A
	LSR A
DATA_LOW_START:
	STA DUCK_COLOR_SHOT ;store.
	LDX LEVEL
	LDA GAME_MODE_IN
	BNE ONE_TRGT_GAME?
	LDA #$0B
	CPX #$12
	BCS L_09B2
	LDA #$0A
	CPX #$11
	BCS L_09B2
	LDA #$09
	CPX #$10
	BCS L_09B2
	DEX 
	TXA 
L_09B2:
	TAX 
	LDA UNK_DATA_275A,X
	JMP L_09D0
ONE_TRGT_GAME?:
	LDA #$1B
	LDX LEVEL
	CPX #$10
	BCS L_09C9
	DEX 
	TXA 
	STA TMP_0C
	ASL A
	CLC 
	ADC TMP_0C
L_09C9:
	CLC 
	ADC DUCK_COLOR_SHOT
	TAX 
	LDA L_273C,X
L_09D0:
	STA OBJ_ZP_$5E
	LDX LEVEL
	LDA #$0B
	CPX #$27
	BCS L_09E2
	LDA #$0A
	CPX #$24
	BCS L_09E2
	LDA #$09
L_09E2:
	STA OBJ_ZP_COPY+10
	LDA #$00
	STA OBJ_ZP_TIMER_POPUP
	STA OBJ_ZP_ANIM_TIMER
	STA OBJ_ZP_COPY+30
	STA OBJ_ZP_COPY+31
	LDA #$01
	STA OBJ_ZP_$4B
	STA $AE
	LDA GAME_MODE_IN
	BNE L_0A0E
	LDX LEVEL
	LDA #$7D
	CPX #$11
	BCC L_0A08
	LDA #$5D
	CPX #$20
	BCC L_0A08
	LDA #$3E
L_0A08:
	STA OBJ_ZP_COPY+28
	LDA #$00
	STA $AF
L_0A0E:
	INC GAME_TARGETS_SHOWN?
	LDA GAME_TARGETS_SHOWN?
	STA OBJ_ZP_$3B
	DEC #_TRGTS_IN_MODE
	INC OBJ_ZP_STATE
	RTS 
TARGET_STATES_INDIRECT_03:
	LDA FRAME_COUNTER
	AND #$07
	BNE L_0A22
	JSR SND_SET_F0_#$08
L_0A22:
	LDA DEACTIVATE_SHOOTING_COUNDOWN?
	BNE L_0A29
	JSR SND_SET_F2_#$02
L_0A29:
	LDA SHOTS_REMAINING
	BNE L_0A3E
	LDA OBJ_ZP_COPY+30
	BNE L_0A3E
	LDA #$01
	STA OBJ_ZP_COPY+30
	LDA #$F0
	STA OBJ_ZP_TIMER_POPUP
	LDA #$00
	JMP L_0B77
L_0A3E:
	LDA GAME_MODE_IN
	BEQ L_0A45
L_0A42:
	JMP L_0B59
L_0A45:
	LDA OBJ_ZP_$4B
	BEQ L_0A53
	LDA OBJ_ZP_Y_COORD
	CMP #$88
	BCS L_0A42
	LDA #$00
	STA OBJ_ZP_$4B
L_0A53:
	LDX #$01
	LDA OBJ_ZP_COPY+28
	BEQ L_0A70
	LDA SHOTS_REMAINING
	BNE L_0A66
	STA OBJ_ZP_COPY+28
L_0A5F:
	JSR L_0F96
	LDX #$01
	BNE L_0A70
L_0A66:
	DEX 
	LDA FRAME_COUNTER
	LSR A
	BCC L_0A70
	DEC OBJ_ZP_COPY+28
	BEQ L_0A5F
L_0A70:
	STX $AE
	CPX #$01
	BEQ L_0A8A
	LDA CTRL_HELD
	AND #$0F
	BNE L_0AA8
	LDA $17
	AND #$0F
	BNE L_0AA8
	LDA #$00
	STA $AF
	LDA $AE
	BEQ L_0A8D
L_0A8A:
	JMP L_0F16
L_0A8D:
	LDA OBJ_ZP_Y_COORD
	CMP #$20
	BCC L_0AD1
	CMP #$90
	BCS L_0AD7
	LDX #$00
	LDA OBJ_ZP_X_COORD
	CMP #$10
	BCC L_0AE3
	LDX #$08
	CMP #$F0
	BCS L_0AE9
L_0AA5:
	JMP L_0BC3
L_0AA8:
	CMP $AF
	BEQ L_0A8A
	STA $AF
	LDX #$35
	LSR A
	BCS L_0ABF
	LDX #$DB
	LSR A
	BCS L_0ABF
	LDX #$79
	LSR A
	BCS L_0ABF
	LDX #$1F
L_0ABF:
	LDA FRAME_COUNTER
	LSR A
	TXA 
	BCC L_0ACA
	AND #$0F
	JMP L_0B56
L_0ACA:
	LSR A
	LSR A
	LSR A
	LSR A
	JMP L_0B56
L_0AD1:
	INC OBJ_ZP_Y_COORD
	LDY #$00
	BEQ L_0ADB
L_0AD7:
	DEC OBJ_ZP_Y_COORD
	LDY #$02
L_0ADB:
	LDA OBJ_ZP_$48
	AND #$08
	TAX 
	JMP L_0AED
L_0AE3:
	INC OBJ_ZP_X_COORD
	LDY #$04
	BNE L_0AED
L_0AE9:
	DEC OBJ_ZP_X_COORD
	LDY #$02
L_0AED:
	STX TMP_0C
	STY TMP_0F
	LDA OBJ_ZP_$48
	AND #$07
	EOR #$07
	ORA TMP_0C
	STA TMP_0C
	JSR RNG_ADVANCE
	AND #$03
	CMP #$03
	BNE L_0B06
	LDA #$02
L_0B06:
	CLC 
	ADC TMP_0C
	STA TMP_$0E
	LDY TMP_0F
	CMP #$00
	BNE L_0B1B
	CPY #$01
	BEQ L_0B4B
	CPY #$02
	BEQ L_0B45
	BNE L_0B50
L_0B1B:
	CMP #$04
	BNE L_0B29
	CPY #$00
	BEQ L_0B50
	CPY #$02
	BEQ L_0B4B
	BNE L_0B45
L_0B29:
	CMP #$08
	BNE L_0B37
	CPY #$00
	BEQ L_0B45
	CPY #$01
	BEQ L_0B50
	BNE L_0B4B
L_0B37:
	CMP #$0C
	BNE L_0B52
	CPY #$00
	BEQ L_0B4B
	CPY #$01
	BEQ L_0B45
	BNE L_0B50
L_0B45:
	JSR RNG_ADVANCE
	ASL A
	BCS L_0B50
L_0B4B:
	DEC TMP_$0E
	JMP L_0B52
L_0B50:
	INC TMP_$0E
L_0B52:
	LDA TMP_$0E
	AND #$0F
L_0B56:
	JMP L_0B77
L_0B59:
	LDA OBJ_ZP_TIMER_POPUP
	BNE L_0BC3
	LDY OBJ_ZP_POPUP_OFFSET
	LDA (OBJ_ZP_STEP?),Y
	INY 
	CMP #$FF
	BNE L_0B70
	LDA (OBJ_ZP_STEP?),Y
	INY 
	STA OBJ_ZP_STATE
	LDA (OBJ_ZP_STEP?),Y
	STA OBJ_ZP_ANIM_TIMER
	RTS 
L_0B70:
	STA OBJ_ZP_TIMER_POPUP
	LDA (OBJ_ZP_STEP?),Y
	INY 
	STY OBJ_ZP_POPUP_OFFSET
L_0B77:
	STA OBJ_ZP_$48
	TAX 
	LDA UNK_OBJ_DATA_264B,X
	STA OBJ_ZP_$49
	STA OBJ_ZP_$4A
	LDA #$00
	STA OBJ_ZP_DIRECTION
	LDA OBJ_ZP_$48
	CMP #$11
	BCC L_0BA2
	TAX 
	LDA #$00
	CPX #$15
	BEQ L_0BBC
	CPX #$14
	BEQ L_0BB0
	CPX #$13
	BEQ L_0BA8
	INC OBJ_ZP_DIRECTION
	CPX #$12
	BEQ L_0BB0
	BNE L_0BBC
L_0BA2:
	CMP #$08
	BCC L_0BA8
	INC OBJ_ZP_DIRECTION
L_0BA8:
	LDX #$0C
	LDY #$E7
	AND #$07
	BEQ L_0BC0
L_0BB0:
	LDX #$05
	LDY #$E7
	CMP #$03
	BCC L_0BC0
	CMP #$06
	BCS L_0BC0
L_0BBC:
	LDX #$1D
	LDY #$E7
L_0BC0:
	JSR SETUP_OBJ_PTR+INIT_SUBSTATE+INDEX
L_0BC3:
	JSR L_181B
L_0BC6:
	PHA 
	LDA OBJ_ZP_Y_COORD
	CMP #$F0
	BCC L_0BD1
	PLA 
	JMP L_0F2A
L_0BD1:
	LDA OBJ_ZP_TIMER_POPUP
	BEQ L_0BD7
	DEC OBJ_ZP_TIMER_POPUP
L_0BD7:
	LDY OBJ_ZP_$49
L_0BD9:
	LDA L_2661,Y
	INY 
	CMP #$AA
	BNE L_0BE6
	LDY OBJ_ZP_$4A
	JMP L_0BD9
L_0BE6:
	CLC 
	ADC OBJ_ZP_Y_COORD
	LDX OBJ_ZP_$4B
	BNE L_0BF9
	LDX $AE
	BNE L_0BF9
	CMP #$1E
	BCC L_0BFB
	CMP #$92
	BCS L_0BFB
L_0BF9:
	STA OBJ_ZP_Y_COORD
L_0BFB:
	LDA L_2661,Y
	INY 
	STY OBJ_ZP_$49
	CLC 
	ADC OBJ_ZP_X_COORD
	LDX OBJ_ZP_$4B
	BNE L_0C14
	LDX $AE
	BNE L_0C14
	CMP #$0E
	BCC L_0C16
	CMP #$F2
	BCS L_0C16
L_0C14:
	STA OBJ_ZP_X_COORD
L_0C16:
	PLA 
	SEC 
	SBC #$01
	BNE L_0BC6
	JMP TARGET_ANIM_TIMER_CHECK/DISP
TARGET_STATES_INDIRECT_04:
	LDX OBJ_ZP_$3B
	LDA #$01
	STA DUCKS_HIT_ARRAY-1,X
	LDA #$01
	STA UPDATE_TARGETS_HIT
	STA OBJ_ZP_$5E
	LDA #$12
	STA OBJ_ZP_$4D
	JSR L_0F68
	LDX #$13
	LDY #$E7
SETUP_SCRIPT_NEXT_STATE:
	JSR SETUP_OBJ_PTR+INIT_SUBSTATE+INDEX
	INC OBJ_ZP_STATE
	RTS 
TARGET_STATES_INDIRECT_05:
	LDA OBJ_ZP_$4D
	BEQ L_0C4C
	DEC OBJ_ZP_$4D
	AND #$0F
	CMP #$0A
	BNE L_0C4C
	JSR SND_SET_F2_#$02
L_0C4C:
	JMP TARGET_ANIM_TIMER_CHECK/DISP
TARGET_STATES_INDIRECT_06:
	JSR SPRITE_SOMETHING_2
	JSR SND_SET_F0_#$10
	LDA OBJ_ZP_X_COORD
	LDX #$48 ;Ranged value.
	CMP #$48
	BCC RANGE_DATA ;<48 on screen.
	LDX #$A0 ;Ranged value.
	CMP #$A0
	BCS RANGE_DATA ;>A0
	TAX 
RANGE_DATA:
	STX $03A3 ;Range dog sprite on screen.
	LDA #$01
	STA OBJ_ZP_$4B
	LDX #$10
	STX OBJ_ZP_$48
	LDA UNK_OBJ_DATA_264B,X ;alwys X=$10?
	STA OBJ_ZP_$49 ;store 2x?
	STA OBJ_ZP_$4A
	LDX #$18
	LDY #$E7 ;script $E718
	BNE SETUP_SCRIPT_NEXT_STATE ;setup script+state
TARGET_STATES_INDIRECT_07:
	LDA OBJ_ZP_Y_COORD ;Y-coord?
	CMP #$B0
	BCS GREATER_THAN_#$B0 ;>=
	JMP L_0BC3 ;falling?
GREATER_THAN_#$B0:
	JSR SND_SET_F2_#$08 ;thump sound?
	INC OBJ_ZP_STATE ;next state, removed from screen.
	RTS 
TRGT_STATE_8_REMOVE_OBJ:
	LDA #$00
	STA OBJ_ZP_STATE ;disable object.
	LDX OBJ_INDEX_START ;get its start.
	JMP SPRITE_OFF_SCREEN ;put off screen.
FORWARD_TARGET_3:
	LDA TRGT3_TYPE
	BEQ RTS ;deativated, nothing to display.
	LDA #$02
	STA OBJ_ZP_ORIGIN_SLOT#
	LDY #$A0
	JSR COPY_OBJ_$3YY_TO_OBJ_ZP ;move object to $30
	JSR PROCESS_OBJ_DOG
	JSR MOVE_$50B_BACK ;put into high RAM
RTS:
	RTS 
PROCESS_OBJ_DOG:
	LDA OBJ_ZP_STATE
	JSR GOTO_TABLE_PAST_JSR
	.LOW RTS ;RTS, default state?
	.HIGH RTS
	.LOW TRGT_STATE_1_SETUP_GAME_VARS ;setup dog, moves to 2.
	.HIGH TRGT_STATE_1_SETUP_GAME_VARS
	.LOW TRGT_STATE_2_ANIMATE_DOG_INTRO/LEVEL ;setup obj anim ptr, display.
	.HIGH TRGT_STATE_2_ANIMATE_DOG_INTRO/LEVEL
	.LOW TRGT_STATE_3_COUNT_FRAME ;watch counter, animate, go to state 6 or 4.
	.HIGH TRGT_STATE_3_COUNT_FRAME
	.LOW TRGT_STATE_4_STEP_0+SCRIPT ;step 0, setup animation script.
	.HIGH TRGT_STATE_4_STEP_0+SCRIPT
	.LOW TARGET_ANIM_TIMER_CHECK/DISP ;copy of state 0x11
	.HIGH TARGET_ANIM_TIMER_CHECK/DISP
	.LOW TRGT_STATE_6_SETUP_ANIM_SCRIPT ;setup.
	.HIGH TRGT_STATE_6_SETUP_ANIM_SCRIPT
	.LOW TARGET_ANIM_TIMER_CHECK/DISP ;another copy.
	.HIGH TARGET_ANIM_TIMER_CHECK/DISP
	.LOW TRGT_STATE_8_SET_SND_COUNTDOWN+SCRIPT ;setup script, set 9E=4
	.HIGH TRGT_STATE_8_SET_SND_COUNTDOWN+SCRIPT
	.LOW TRGT_STATE_9_CNTDWN_TO_SND ;9E, sound.
	.HIGH TRGT_STATE_9_CNTDWN_TO_SND
	.LOW TRGT_STATE_A_FTIMER_CNTDWN2SND+_SETXY+SCRIPT ;as named, lots here.
	.HIGH TRGT_STATE_A_FTIMER_CNTDWN2SND+_SETXY+SCRIPT
	.LOW TARGET_ANIM_TIMER_CHECK/DISP ;unused?
	.HIGH TARGET_ANIM_TIMER_CHECK/DISP
	.LOW TRGT_STATE_C_CNTDOWNTMR2SND_SETY_SCRIPT1/2 ;2B,setup,sound.
	.HIGH TRGT_STATE_C_CNTDOWNTMR2SND_SETY_SCRIPT1/2
	.LOW TARGET_ANIM_TIMER_CHECK/DISP ;unused?
	.HIGH TARGET_ANIM_TIMER_CHECK/DISP
	.LOW TRGT_STATE_E_SETUP_BETWEEN_ROUNDS? ;init game and other?
	.HIGH TRGT_STATE_E_SETUP_BETWEEN_ROUNDS?
	.LOW TRGT_STATE_F_CHK_TRGTS+IDK ;end of round?
	.HIGH TRGT_STATE_F_CHK_TRGTS+IDK
	.LOW TRGT_STATE_10_SET_X_BEHIND_BG_SETY_SCRIPT ;pigeons start from state 1?
	.HIGH TRGT_STATE_10_SET_X_BEHIND_BG_SETY_SCRIPT
	.LOW TARGET_ANIM_TIMER_CHECK/DISP ;disp obj?
	.HIGH TARGET_ANIM_TIMER_CHECK/DISP
	.LOW TRGT_STATE_12_CLR_WHEN_SCRIPT_DONE ;clears sprites when animation ends.
	.HIGH TRGT_STATE_12_CLR_WHEN_SCRIPT_DONE
TRGT_STATE_1_SETUP_GAME_VARS:
	LDX #$1F ;index
MOVE_DATA:
	LDA TARGET_3_DATA,X ;move initial data here to OBJ_ZP_COPY
	STA OBJ_ZP_COPY,X
	DEX 
	BPL MOVE_DATA
	LDA #$03
	STA SHOTS_REMAINING ;set shots remaining.
	LDA #$01
	STA SHOT_FIRED ;disable shooting the screen.
	STA UPDATE_TARGETS_HIT ;unk, set to 1.
	LDA #$02
	STA PALETTE_UPLOAD ;upload pallette.
	LDA IN_GAME_STATE
	CMP #$07 ;if game state is 7 (pigeons start?)
	BNE GAME_HAS_DOG
	LDA #$10
	STA OBJ_ZP_STATE ;move this to state #$10 if state is 7.
	RTS 
GAME_HAS_DOG:
	LDA LEVEL
	LDY #$18 ;X coord for dog in intro, very left.
	LDX #$00 ;not sure.
	CMP #$01
	BEQ IS_LEVEL_1_FARTHER_AWAY
	LDY #$50 ;puts dog mid screen.
	LDX #$18
IS_LEVEL_1_FARTHER_AWAY:
	STY OBJ_ZP_X_COORD ;X coord.
	STX OBJ_ZP_STEP? ;animation step? Not sure.
	LDA #$01
	STA MULTIPLE_BG_UPDATE_INDEX ;Set index 1 for stepped updates.
	JSR WAIT_FOR_NMI
	JSR PLAY_SOUNDS ;init sounds to clear garbage up?
	INC OBJ_ZP_STATE ;inc object state to 2.
	RTS 
TRGT_STATE_2_ANIMATE_DOG_INTRO/LEVEL:
	LDX #$8E ;points to $E78E, animation script.
	LDY #$E7 ;this is the dog walking across the screen.
	JMP SETUP_INC_TRGT_GOTO_11
TRGT_STATE_3_COUNT_FRAME:
	LDA OBJ_ZP_FRAME ;get frame showing.
	CMP #$0C ;if is frame X.
	BNE FRAME_NOT_C
	INC OBJ_ZP_STEP? ;next step.
	LDA OBJ_ZP_STEP? ;get step counter.
	CMP #$20 ;if is 20...
	BCC FRAME_NOT_C
	INC OBJ_ZP_STATE ;go to next state.
RTS:
	RTS 
FRAME_NOT_C:
	JSR TARGET_ANIM_TIMER_CHECK/DISP ;check animation/disp.
	LDA OBJ_ZP_X_COORD
	CMP OBJ_ZP_COPY+21 ;idk what for yet. is pointer data? why this?
	BNE RTS ;if not eq, rts.
	LDA #$06
	STA OBJ_ZP_STATE ;set state to 6 when eq.
	RTS 
TRGT_STATE_4_STEP_0+SCRIPT:
	LDA #$00
	STA OBJ_ZP_STEP?
	LDX #$98
	LDY #$E7 ;script at E798
SETUP_INC_TRGT_GOTO_11:
	JSR SETUP_OBJ_PTR+INIT_SUBSTATE+INDEX
	INC OBJ_ZP_STATE ;State++
	JMP TARGET_ANIM_TIMER_CHECK/DISP ;display this obj NOW.
TRGT_STATE_6_SETUP_ANIM_SCRIPT:
	LDX #$A7 ;Animation ptr to script.
	LDY #$E7
	BNE SETUP_INC_TRGT_GOTO_11
TRGT_STATE_8_SET_SND_COUNTDOWN+SCRIPT:
	LDA #$04
	STA OBJ3_SOUND_COUNT_DOWN ;unk why.
	LDX #$AC
	LDY #$E7 ;animation script.
	BNE SETUP_INC_TRGT_GOTO_11
TRGT_STATE_9_CNTDWN_TO_SND:
	DEC OBJ3_SOUND_COUNT_DOWN
	LDA OBJ3_SOUND_COUNT_DOWN
	BNE ANIMATE_ONLY ;if 9E != 0, no sound, just animate.
	LDA #$10 ;new timer.
	STA OBJ3_SOUND_COUNT_DOWN ;save.
	JSR SND_SET_F2_#$01 ;play sound.
ANIMATE_ONLY:
	JMP TARGET_ANIM_TIMER_CHECK/DISP ;animate, abuse their rts.
TRGT_STATE_A_FTIMER_CNTDWN2SND+_SETXY+SCRIPT:
	LDA FAST_TIMERS
	BNE RTS ;if timer not 0.
	JSR SND_SET_F0_#$40 ;play sound.
	LDA #$80
	STA OBJ_ZP_X_COORD ;move obj to near center screen.
	JSR CLEAR_46-47,SET OBJ_Y
	LDX #$46 ;anim script ptr to E846
	LDY #$E8
	BNE SETUP_INC_TRGT_GOTO_11
TRGT_STATE_C_CNTDOWNTMR2SND_SETY_SCRIPT1/2:
	LDA FAST_TIMERS
	BNE RTS ;if timer not 0, leave.
	JSR SND_SET_F1 ;set sound.
	JSR CLEAR_46-47,SET OBJ_Y ;more clearing of stuff.
	LDX #$94
	LDY #$E8 ;loads animation ptr. E894
	LDA TRGT_SHOT_DURING_ATTEMPT
	CMP #$01
	BEQ SETUP_INC_TRGT_GOTO_11 ;use this animation script if BD=1
	LDX #$A3 ;load this ptr instead, E8A3.
	LDY #$E8
	BNE SETUP_INC_TRGT_GOTO_11
TRGT_STATE_E_SETUP_BETWEEN_ROUNDS?:
	LDA #$30 ;mostly self explainatory.
	STA UNK_$A6
	LDA #$01
	STA ZAP_SHOT_ENABLED
	LDA #$03
	STA SHOTS_REMAINING
	LDA #$01
	STA SHOT_FIRED
	LDA #$00
	STA TRGT_SHOT_DURING_ATTEMPT
	LDA #$02 ;targets in mode
	LDY #$01 ;target 2 state+type
	LDX GAME_MODE_IN
	BNE TWO_TARGET_GAME
	LDA #$01 ;one target
	LDY #$00 ;disable target 2
TWO_TARGET_GAME:
	STA #_TRGTS_IN_MODE
	STY TRGT2_TYPE
	STY TRGT2_STATE ;enabled for 2 target games, disabled for 1 target.
	LDA #$01 ;always enabled, enable.
	STA TRGT1_TYPE
	STA TRGT1_STATE
	JSR RNG_ADVANCE ;rng advance and get number in A.
	STA TMP_0C ;random number stored.
	LDA #$03 ;blue and black ducks.
	LDY LEVEL
	CPY #$01
	BEQ FIRST_LEVEL ;if not the 2+ level, no red ducks!
	LDA #$07 ;red ducks possible now.
FIRST_LEVEL:
	AND TMP_0C
	STA DUCK_TYPE?_98 ;DUCK_TYPE
	LDY #$00
	STY UNK_$99 ;idk
	TAX 
	LDA TARGET_DATA_COMBO,X ;get types from array
	STA TMP_0C ;store
	AND #$F0 ;get high group of 4 bits.
	LSR A ;index mul by 8, basically.
	LDY #$00 ;index
	JSR MOVE_DATA_TO_403+Y ;init state data?
	LDA TMP_0C ;get target info again
	AND #$0F ;get low byte
	ASL A
	ASL A
	ASL A ;shift mul by 8
	JSR MOVE_DATA_TO_403+Y ;Y continued.
	LDA #$3F
	STA UNK_0400 ;idk
	LDA #$10
	STA UNK_0401
	STA UNK_0402
	LDA #$00
	STA UNK_0413
	LDA #$01
	STA WHITE_BOX_DISPLAYED ;init?
	LDA #$12
	STA OBJ_ZP_STATE ;move state
	LDA #$00
	STA OBJ_ZP_ANIM_TIMER ;init
	RTS 
TRGT_STATE_F_CHK_TRGTS+IDK:
	LDA GAME_TARGETS_SHOWN?
	CMP #$0A ;is targets shown 100%?
	BNE OBJ_GOTO_STATE_E ;if not complete, continue.
	LDA #$00
	STA END_OF_ROUND_STATE ;clear A9 state.
	LDA #$04
	STA IN_GAME_STATE ;move to state end of round.
	JMP CLEAR_SPRITES
OBJ_GOTO_STATE_E:
	LDA #$0E
	STA OBJ_ZP_STATE ;sets up round of targets and whatnot.
	RTS 
TRGT_STATE_10_SET_X_BEHIND_BG_SETY_SCRIPT:
	LDA #$80
	STA OBJ_ZP_X_COORD ;sets x coord to $80.
	LDA #$01
	STA OBJ_ZP_COPY_BEHIND_BG? ;set to behind BG.
	JSR CLEAR_46-47,SET OBJ_Y ;set Y, unsure what 46+47 are.
	LDX #$B2 ;animation script ptr E8B2
	LDY #$E8
	JMP SETUP_INC_TRGT_GOTO_11
TRGT_STATE_12_CLR_WHEN_SCRIPT_DONE:
	LDA OBJ_ZP_ANIM_TIMER
	BNE TARGET_ANIM_TIMER_CHECK/DISP ;Do animation stuff if timer valid.
	LDA #$00 ;else, clear obj and remove from screen.
	STA OBJ_ZP_STATE ;clear state, disable object.
	LDX OBJ_INDEX_START ;get start of index to clear.
	JMP SPRITE_OFF_SCREEN
TARGET_ANIM_TIMER_CHECK/DISP:
	LDA OBJ_ZP_ANIM_TIMER ;obj substate?
	BEQ UPDATE_ANIMATION_TO_PTR ;if update time...?
	DEC OBJ_ZP_ANIM_TIMER ;not sure why dec.
	JMP OBJ_TO_SCREEN_ROUTINE
UPDATE_ANIMATION_TO_PTR:
	LDY OBJ_ZP_PTR_INDEX ;index of animation data pointed to by OBJ.
	LDA (OBJ_ZP_PTR_L_UNK),Y ;get either 1. frames until change, or 2. flag.
	CMP #$FA ;if <= FA, not flag.
	BCC OBJ_ANIM_NO_FLAG ;if < FA, go here.
	INC OBJ_ZP_PTR_INDEX ;next index.
	SEC 
	SBC #$FA ;if >= #$FA, make index 0 to 5.
	JSR GOTO_TABLE_PAST_JSR ;ANIMATION COMMANDS BELOW.
	.LOW RTS ;FA, does nothing.
	.HIGH RTS
	.LOW RTS ;FB, does nothing.
	.HIGH RTS
	.LOW OBJ_ZP_INDEX_TO_#$1E ;FC, sets animation index to #$1E.
	.HIGH OBJ_ZP_INDEX_TO_#$1E
	.LOW OBJ_ZP+8_TO_1 ;FD, push animation behind BG.
	.HIGH OBJ_ZP+8_TO_1
	.LOW OBJ_ZP_PTR_INDEX=0 ;FE, restarts animation.
	.HIGH OBJ_ZP_PTR_INDEX=0
	.LOW OBJ_ZP_NEW_STATE_FROM_PTR ;sets up substate from own ptr. FF
	.HIGH OBJ_ZP_NEW_STATE_FROM_PTR
OBJ_ANIM_NO_FLAG:
	LDY OBJ_ZP_PTR_INDEX ;get index int anim data.
	LDX OBJ_ZP_ORIGIN_SLOT#
	CPX #$02 ;if dog origin?
	BNE OBJ_STATE_NOT_3 ;if not dog, go here.
	LDX OBJ_ZP_STATE ;load dog state.
	CPX #$09 ;state
	BEQ OBJ_STATE_9 ;if is
	CPX #$0B ;state
	BEQ OBJ_STATE_B/D/11_(POPUP) ;if is
	CPX #$0D ;state
	BEQ OBJ_STATE_B/D/11_(POPUP) ;if is
	CPX #$11 ;state
	BNE NOT_ANY_OBJ_STATE_WANTED ;Not any obj state we care for.
OBJ_STATE_B/D/11_(POPUP):
	LDX OBJ_ZP_TIMER_POPUP ;load idk.
	BEQ OBJ_POPUP_ZERO ;skip if 0.
	DEC OBJ_ZP_TIMER_POPUP ;count down otherwise.
	LDA OBJ_ZP_POPUP_OFFSET ;load popup amount.
	CLC 
	ADC OBJ_ZP_Y_COORD ;Add to Y.
	STA OBJ_ZP_Y_COORD ;store changed.
	JMP OBJ_TO_SCREEN_ROUTINE
OBJ_POPUP_ZERO:
	STA OBJ_ZP_TIMER_POPUP ;store data loaded by ptr
	INY  ;next byte.
	LDA (OBJ_ZP_PTR_L_UNK),Y ;load next byte.
	BPL IS_POSITIVE ;unsigned positive value.
	AND #$7F ;get lower bits.
	JSR TWO_COMPLIMENT_A_REG ;get inverse.
IS_POSITIVE:
	STA OBJ_ZP_POPUP_OFFSET ;store
	JMP MOVE_MORE_PTR_DATA
OBJ_STATE_9:
	TAX 
	BPL L_0EB5
	AND #$7F
	JSR TWO_COMPLIMENT_A_REG
L_0EB5:
	CLC 
	ADC OBJ_ZP_Y_COORD
	STA OBJ_ZP_Y_COORD
	INY 
	LDA (OBJ_ZP_PTR_L_UNK),Y
	LDX OBJ_ZP_DIRECTION
	BEQ L_0EC4
	JSR TWO_COMPLIMENT_A_REG
L_0EC4:
	CLC 
	ADC OBJ_ZP_X_COORD
	STA OBJ_ZP_X_COORD
MOVE_MORE_PTR_DATA:
	INY  ;next data ptr.
	LDA (OBJ_ZP_PTR_L_UNK),Y ;load
	STA OBJ_ZP_FRAME ;animation frame from file.
	INY 
	STY OBJ_ZP_PTR_INDEX ;store pointer to next byte.
	JMP OBJ_TO_SCREEN_ROUTINE ;sprite on screen.
NOT_ANY_OBJ_STATE_WANTED:
	CPX #$03 ;If state isn't currently 3.
	BNE OBJ_STATE_NOT_3
	LDA #$02 ;offset two each step?
	LDX OBJ_ZP_DIRECTION ;get direction?
	BEQ MOVING_RIGHT ;if right, dont invert.
	JSR TWO_COMPLIMENT_A_REG ;invert for -2
MOVING_RIGHT:
	CLC 
	ADC OBJ_ZP_X_COORD ;add to coord.
	STA OBJ_ZP_X_COORD ;save to obj.
OBJ_STATE_NOT_3:
	LDA (OBJ_ZP_PTR_L_UNK),Y ;get frame timer to hold this animation.
	STA OBJ_ZP_ANIM_TIMER ;write that to obj timer.
	JMP MOVE_MORE_PTR_DATA
OBJ_ZP_NEW_STATE_FROM_PTR:
	LDY OBJ_ZP_PTR_INDEX
	LDA (OBJ_ZP_PTR_L_UNK),Y
	STA OBJ_ZP_STATE
	INY 
	LDA (OBJ_ZP_PTR_L_UNK),Y
	STA OBJ_ZP_ANIM_TIMER
	RTS 
OBJ_ZP_PTR_INDEX=0:
	LDA #$00
WRITE_OBJ_PTR_INDEX:
	STA OBJ_ZP_PTR_INDEX
	JMP UPDATE_ANIMATION_TO_PTR
OBJ_ZP+8_TO_1:
	LDA #$01
	STA OBJ_ZP_COPY_BEHIND_BG?
	JMP UPDATE_ANIMATION_TO_PTR
OBJ_ZP_INDEX_TO_#$1E:
	LDA #$1E
	BNE WRITE_OBJ_PTR_INDEX ;always taken.
SETUP_OBJ_PTR+INIT_SUBSTATE+INDEX:
	STX OBJ_ZP_PTR_L_UNK ;Pointer from X+Y, aination to play.
	STY OBJ_ZP_PTR_H_UNK
	LDA #$00
	STA OBJ_ZP_PTR_INDEX ;index to obj data of some type.
	STA OBJ_ZP_ANIM_TIMER ;substate counter?
	RTS 
L_0F16:
	LDA OBJ_ZP_Y_COORD
	CMP #$08
	BCC L_0F2A
	CMP #$90
	BCS L_0F33
	LDA OBJ_ZP_X_COORD
	CMP #$0C
	BCC L_0F2A
	CMP #$F4
	BCC L_0F36
L_0F2A:
	LDA #$08
	STA OBJ_ZP_STATE
	LDA #$00
	STA OBJ_ZP_ANIM_TIMER
	RTS 
L_0F33:
	JMP L_0AD7
L_0F36:
	JMP L_0AA5
CLEAR_46-47,SET OBJ_Y:
	LDA #$00
	STA OBJ_ZP_TIMER_POPUP
	STA OBJ_ZP_POPUP_OFFSET
	LDA #$AC
	STA OBJ_ZP_Y_COORD
	RTS 
MOVE_DATA_TO_403+Y:
	TAX  ;A to index?
	LDA #$08
	STA TMP_0D ;counter
LOOP_DATA_8:
	LDA TARGET_3_STATE_INIT?,X
	STA UNK_403,Y ;store to $403+Y
	INX 
	INY 
	DEC TMP_0D
	BNE LOOP_DATA_8
	RTS 
L_0F56:
	LDA LEVEL
	LDY #$02
	CMP #$06
	BCC L_0F7F
	LDY #$03
	CMP #$11
	BCC L_0F7F
	LDY #$05
	BNE L_0F7F
L_0F68:
	LDX LEVEL
	LDA #$00
	CPX #$06 ;increase score at level 6
	BCC L_0F78
	LDA #$03
	CPX #$11 ;increase score at level 11
	BCC L_0F78
	LDA #$06
L_0F78:
	CLC 
	ADC DUCK_COLOR_SHOT
	TAX 
	LDY TBL_DUCK_INDEXES,X
L_0F7F:
	STY OBJ_ZP_DUCK_INDEX? ;unknown why saved.
	LDA TBL_DUCK_SCORES,Y
	STA TMP_06 ;score adding 00XX00
	LDA #$00
	STA TMP_04 ;add/subtract flag.
	STA TMP_05 ;score adding 00XX00
	STA TMP_07 ;adding digits 0000XX
	LDA #$0F ;jsr setup
	JSR SCORE_ADD/SUB
	JMP SCORE_TO_SCREEN
L_0F96:
	LDA TRGT_SHOT_DURING_ATTEMPT
	BNE L_0FB9
	LDA #$06
	JSR UPDATE_PPU_GROUP
	LDA #$30
	STA FAST_TIMERS
	LDA #$06
	STA PALETTE_UPLOAD
	LDA #$01
	STA WHITE_BOX_DISPLAYED
	LDA #$36
	STA UNK_403
	STA $0407
	STA $040B
	STA $040F
L_0FB9:
	RTS 
DISP_SCORE_SPRITES:
	LDX #$00 ;obj 0
	LDY #$00 ;spr slot 60
	JSR SPRITE_SOMETHING_1
	LDX #$04 ;obj 1
	LDY #$08 ;spr slot 62
SPRITE_SOMETHING_1:
	LDA SCORE_ANIM_COUNTER,X
	BEQ RTS ;already ended.
	DEC SCORE_ANIM_COUNTER,X ;Dec counter
	BNE KEEP_ON_SCREEN
	LDA #$F4 ;Sprite Y value, removed from screen
	STA SPR_OBJ_Y,X
	STA SPR_OBJ_X,X
KEEP_ON_SCREEN:
	LDA SPR_OBJ_Y,X
	STA $02F0,Y
	STA $02F4,Y ;Store Y
	LDA SPR_SCORE_TILE,X ;get tile for score.
	STA $02F1,Y ;store tile
	LDA #$FF
	STA $02F5,Y ;2nd blank?
	LDA #$00 ;no attributes.
	STA $02F2,Y
	STA $02F6,Y
	LDA SPR_OBJ_X,X ;get x pos
	STA $02F3,Y ;store.
	CLC 
	ADC #$08
	STA $02F7,Y ;store +8
RTS:
	RTS 
SPRITE_SOMETHING_2:
	LDX #$00
	LDA SCORE_ANIM_COUNTER,X ;load.
	BEQ IS_ZER0
	LDX #$04
IS_ZER0:
	LDA OBJ_ZP_Y_COORD ;Y-coord?
	SEC 
	SBC #$04
	STA SPR_OBJ_Y,X ;store at index...
	LDA OBJ_ZP_X_COORD ;X coord?
	SEC 
	SBC #$08
	STA SPR_OBJ_X,X ;store 
	LDA OBJ_ZP_DUCK_INDEX?
	CLC 
	ADC #$F7 ;Get score char.
	STA SPR_SCORE_TILE,X
	LDA #$30 ;counter value to show scores for.
	STA SCORE_ANIM_COUNTER,X ;Store score animation length.
	RTS 
OBJ_TO_SCREEN_ROUTINE:
	LDA OBJ_INDEX_START ;unk
	STA SPRITE_INDEX_VAL ;last index of sprite? not sure yet.
	LDA OBJ_ZP_FRAME ;get frame to show.
	ASL A ;make index val.
	TAY  ;put to Y index.
	LDA #$C5 ;set up pointer to $DAC5, anim file pointers.
	STA TMP_12
	LDA #$DA
	STA TMP_13
	LDA (TMP_12),Y ;get frame from OBJ_ZP_FRAME
	STA TMP_$10
	INY  ;next data
	LDA (TMP_12),Y
	STA TMP_$11 ;$10 is now points to the file.
	LDY #$00
	STY FRAME_PTR_INDEX ;clear index into the frame pointer.
END_FRAME_DATA_CHECK:
	LDY FRAME_PTR_INDEX ;get frame index to display now.
	LDA (TMP_$10),Y ;load data from ANIM_FILE
	CMP #$00 ;EOF. Bad code, no need to compare smh.
	BNE NOT_END_OF_FRAME_FILE ;if not 0, maniuplate data.
	LDX SPRITE_INDEX_VAL ;index for sprite obj something.
SPRITE_OFF_SCREEN:
	LDA #$F4 ;move sprite off screen.
CLEAR_SPRITE_LOOP:
	CPX OBJ_INDEX_FINAL ;Last index of object?
	BEQ RTS ;if at end, leave.
	STA $0200,X ;store data.
	INX  ;next byte.
	JMP CLEAR_SPRITE_LOOP
RTS:
	RTS 
NOT_END_OF_FRAME_FILE:
	STA TMP_13 ;store high byte of FRAME_DATA
	INY 
	LDA (TMP_$10),Y ;load other pointer byte from ANIM_FILE.
	INY 
	STA TMP_12 ;$12 now points to FRAME_DATA
	LDA (TMP_$10),Y ;Y offset
	INY 
	CLC 
	ADC OBJ_ZP_Y_COORD ;Add to Y coord.
	STA TARGET_Y_COORD_CPY ;store copy of value for later use? speculation?
	LDA (TMP_$10),Y ;X offset. From file?
	INY 
	LDX OBJ_ZP_DIRECTION ;get direction.
	BEQ DIRECTION_RIGHT ;3 below.
	JSR TWO_COMPLIMENT_A_REG ;if left, invert.
	SEC 
	SBC #$08 ;subtract sprite width also, for right math.
DIRECTION_RIGHT:
	CLC 
	ADC OBJ_ZP_X_COORD ;X position of obj.
	STA TARGET_X_COORD_CPY ;store to copy. speculation?
	STY FRAME_PTR_INDEX ;store new $10 index.
	LDY #$00 ;reset index to load ANIM_DATA
	LDA (TMP_12),Y ;get anim data.
	LDX #$00 ;set index for object.
	CMP #$00 ;this cmp not needed if rearranged. or use an array.
	BEQ WRITE_UPDATE_GROUP ;if is, X index correct.
	LDX #$10 ;index for this obj.
	CMP #$01 ;position 1, index 10.
	BEQ WRITE_UPDATE_GROUP
	LDX #$38
	CMP #$02 ;position 2, index #$38.
	BEQ WRITE_UPDATE_GROUP
	LDX #$44 ;default
WRITE_UPDATE_GROUP:
	STX SPRITE_UPDATE_BASE ;index into $2XX to start at.
ANIM_DATA_NEXT:
	INY  ;next $12 ptr data.
MORE_ANIM_DATA:
	LDA (TMP_12),Y ;get anim data.
	CMP #$FF ;EOF for anim data.
	BEQ END_FRAME_DATA_CHECK ;goes back to $10 stream data.
	CMP #$FE
	BNE $12_NOT_#$FE
	INC SPRITE_UPDATE_BASE ;FE value skips 1 sprite. 2 point offsets.
	INC SPRITE_UPDATE_BASE
	JMP ANIM_DATA_NEXT ;keep processing $12
$12_NOT_#$FE:
	CMP #$FD
	BNE SPRITE_OUTPUT_FINALLY
	INY  ;FD command does...
	LDA (TMP_12),Y ;gets the next byte.
	CLC 
	ADC OBJ_ZP_DISP_ATTR? ;add it to obj attr. for pallaette selection?
	STA SPRITE_ATTR_COPY? ;store outside of obj data.
	LDA OBJ_ZP_COPY_BEHIND_BG?
	BEQ ANIM_DATA_NEXT ;but if it's 0, process more data.
	LDA SPRITE_ATTR_COPY? ;set B3 %0010 0000, behind background?
	ORA #$20
	STA SPRITE_ATTR_COPY? ;save
	JMP ANIM_DATA_NEXT ;do more data.
SPRITE_OUTPUT_FINALLY:
	LDX SPRITE_UPDATE_BASE ;which index updating.
	LDA SPR_X/Y_OFFSETS_ARRAY,X ;get spr skeleton from base index.
	INC SPRITE_UPDATE_BASE ;next byte for array.
	CLC 
	ADC TARGET_Y_COORD_CPY ;add Y copy with data. does it do this to overflow if going to always?
	JSR MAKE_Y_PROPER ;something to do with Y, proper value, and FF.
	LDX SPRITE_INDEX_VAL ;get updating.
	STA $0200,X ;finally some sprite code jesus. sprite Y stored.
	INC SPRITE_INDEX_VAL ;next byte.
	LDA (TMP_12),Y ;get data.
	INY  ;next data.
	LDX SPRITE_INDEX_VAL ;get index. idk why not using X here.
	STA $0200,X ;store sprite tile.
	INC SPRITE_INDEX_VAL ;next data.
	LDA SPRITE_ATTR_COPY? ;get sprite attr copy.
	LDX OBJ_ZP_DIRECTION ;direction? 0=>,1=<?
	BEQ DIRECTION_RIGHT
	AND #$BF ;This rtn sets the sprite going <, all default going >. clear attr flip x
	STA TMP_0C ;store to temp.
	LDA SPRITE_ATTR_COPY? ;get attr again
	AND #$40 ;get bit 0100 0000
	EOR #$40 ;invert bit, sets sprite to flip horiz.
	ORA TMP_0C ;store in TMP. Does this because setting in obj would be screwed up.
DIRECTION_RIGHT:
	LDX SPRITE_INDEX_VAL ;get index.
	STA $0200,X ;store sprite attr.
	INC SPRITE_INDEX_VAL ;next index.
	LDX SPRITE_UPDATE_BASE ;get group index.
	LDA SPR_X/Y_OFFSETS_ARRAY,X ;get value
	INC SPRITE_UPDATE_BASE ;next data.
	LDX OBJ_ZP_DIRECTION ;get direction.
	BEQ IS_RIGHT
	JSR TWO_COMPLIMENT_A_REG ;invert if left. x?
IS_RIGHT:
	CLC 
	ADC TARGET_X_COORD_CPY ;add with X coord.
	JSR MAKE_X_PROPER ;make X proper value.
	LDX SPRITE_INDEX_VAL ;get index.
	STA $0200,X ;sprite data store X.
	INC SPRITE_INDEX_VAL ;next index.
	JMP MORE_ANIM_DATA ;LOOP.
MAKE_Y_PROPER:
	PHA  ;save A
	LDA OBJ_ZP_Y_COORD ;Y coord.
	JMP MAKE_A_PROPER_VALUE
MAKE_X_PROPER:
	PHA  ;save return.
	LDA OBJ_ZP_X_COORD ;X coord.
MAKE_A_PROPER_VALUE:
	STA TMP_0F ;A to 0F
	PLA  ;pull data on stack.
	PHA  ;push back for later again.
	SEC 
	SBC TMP_0F ;subtract with Y.
	BCS IS_ON_SCREEN_STILL
	JSR TWO_COMPLIMENT_A_REG ;invert otherwise.
IS_ON_SCREEN_STILL:
	CMP #$30 ;idk why this value.
	PLA  ;pull old value back.
	BCC SPRITE_OKAY ;if < #$30
	LDA #$FF ;off screen?
SPRITE_OKAY:
	RTS 
TWO_COMPLIMENT_A_REG:
	EOR #$FF ;invert
	CLC 
	ADC #$01 ;add 1 to correct.
	RTS  ;return value.
ZAP_PROC_TRIGGER:
	LDA APU_FRAMECOUNTER ;zapper input
	AND #$10 ;read trigger
	CMP ZAP_PREVIOUS_STATE ;see if match
	BEQ INT_STATE_MATCH
	STA ZAP_PREVIOUS_STATE ;save state
INT_ZERO_MATCH_CNT:
	LDA #$00
	STA ZAP_STATE_COUNT ;clear on change.
RTS:
	RTS 
INT_STATE_MATCH:
	INC ZAP_STATE_COUNT ;trig in same state as prev
	LDY ZAP_STATE_COUNT
	CPY #$01
	BNE RTS ;leave on not first match
	AND #$10 ;A=zapper state
	BEQ INT_ZAP_TRIG_UNPRESSED ;not pressed
	LDA #$01
	STA ZAPPER_PRESSED ;state pressed
	BNE INT_ZERO_MATCH_CNT
INT_ZAP_TRIG_UNPRESSED:
	LDA ZAPPER_PRESSED
	BEQ INT_ZERO_MATCH_CNT ;not marked as matched, just clear count
	LDY #$00
	STY ZAPPER_PRESSED ;clear pressed.
	INY 
	STY ZAPPER_TRIG_RELEASED ;set unpressed. used to not carry pulls?
	BNE INT_ZERO_MATCH_CNT ;always taken
PROCESS_ZAPPER:
	LDA ZAP_SHOT_ENABLED
	BNE SHOOTING_ENABLED ;has to be enabled.
TRIG_NO_RELEASE:
	LDA #$00 ;not enabled/dont release.
	STA ZAPPER_TRIG_RELEASED
RTS:
	RTS 
SHOOTING_ENABLED:
	LDA ZAPPER_TRIG_RELEASED
	BEQ RTS ;wait for release to do anything.
	LDA SHOTS_REMAINING
	BEQ TRIG_NO_RELEASE ;never release if no shot
	DEC SHOTS_REMAINING ;1 less shot, if in game.
	LDA #$01
	STA SHOT_FIRED
	LDA #$00
	STA ZAPPER_TRIG_RELEASED ;clear released.
	JSR SND_SET_F0_#$02 ;init
	LDA #$04 ;palette 03 for whole screen
	STA PALETTE_UPLOAD ;pallet of all black bg, white sprite 0
	JSR CLEAR_SPRITES ;clear all sprites.
	JSR NMI_DISABLE_SPRITS/BG ;waits for nmi
	LDA IN_MENU_FLAG
	BEQ IN-GAME
	JSR SND_SET_F0_#$01 ;disable all regs
	JSR PLAY_SOUNDS
	JSR SND_SET_F0_#$02 ;init noise+dmc?
	LDA #$02
	STA LIGHT_STEP ;set
	LDA #$FF ;why not set ppuctrl? hmm
	STA PPU_SCROLL_X_RAM ;set scroll to 2nd table.
	BNE ZAPPER_TEST_HIT_SCREEN
IN-GAME:
	LDA #$05 ;palette 04
	STA PALETTE_UPLOAD ;game palette.
	LDA #$00
	STA LIGHT_STEP
	LDY #$00
	LDA TRGT1_TYPE
	BEQ L_11B5
	LDA TRGT1_STATE
	CMP #$03
	BEQ L_11C7
L_11B5:
	LDA #$01
	STA LIGHT_STEP
	LDY #$50
	LDA TRGT2_TYPE
	BEQ L_11DD
	LDA TRGT2_STATE
	CMP #$03
	BNE L_11DD
L_11C7:
	JSR MOVE_TRGT1_TO_ZP
ZAPPER_TEST_HIT_SCREEN:
	JSR CLEAR_NMIRAN/PPUSTUFFFLAG
WAIT_NO_LIGHT:
	LDA NMI_RAN
	BNE TEST_NEW_LIGHT ;taken if 1 frame no light.
	LDA APU_FRAMECOUNTER ;get zapper state
	AND #$08 ;does it see light
	BNE WAIT_NO_LIGHT ;no,wait
	LDA LIGHT_STEP ;detected light when not supposed to
	JMP LIGHT_INVALID ;needs more work done later.
L_11DD:
	LDA GAME_MODE_IN
	CMP #$02
	BNE UPLOAD_PALETTE_1
	JMP L_1266
UPLOAD_PALETTE_1:
	LDY #$02
	STY PALETTE_UPLOAD ;palette 1
	JSR WAIT_FOR_NMI ;wait until palette updated.
	LDY #$01
	STY WHITE_BOX_DISPLAYED ;set flag
	JMP DISP_WHITE_BOX ;displays the white box.
TEST_NEW_LIGHT:
	JSR CLEAR_NMIRAN/PPUSTUFFFLAG ;previous test passed.
	LDA PPU_MASK_RAM ;disable sprites/bg
	AND #$E7
	STA PPU_MASK_RAM
	LDA #$08 ;enable BG
	LDY LIGHT_STEP
	CPY #$02 ;on menu?
	BEQ WRITE_PPU_MASK ;if so, enable BG.
	LDA #$10 ;otherwise, sprites.
WRITE_PPU_MASK:
	ORA PPU_MASK_RAM
	STA PPU_MASK_RAM
	STA PPU_Mask ;write enable.
	JSR CLEAR_SPRITES
	LDA TRGT2_TYPE
	BEQ TEST_LIGHT_LOOP ;doesn't exist.
	LDA TRGT2_STATE
	CMP #$03 ;state active
	BNE TEST_LIGHT_LOOP ;not valid rn
	LDY #$50 ;valid target, do something...
	JSR MOVE_TRGT1_TO_ZP ;display box?
TEST_LIGHT_LOOP:
	LDA NMI_RAN
	BNE NO_HIT_LIGHT
	LDA APU_FRAMECOUNTER ;load controller.
	AND #$08
	BNE TEST_LIGHT_LOOP ;not detected, loop.
	LDA LIGHT_STEP ;detected, hit target.
	CMP #$02
	BNE GAME_HIT
	LDA #$01 ;menu hit
WRITE_RESULT_FROM_A:
	STA ZAPPER_RESULT ;hit=1,miss=2
	LDA #$01 ;upload palette 0
	STA PALETTE_UPLOAD
	LDA #$00 ;back to screen.
	STA PPU_SCROLL_X_RAM
	JSR WAIT_FOR_NMI
	JMP PPU_ENABLE_SPRITES/BG ;RTS's here, screen back.
GAME_HIT:
	INC TARGETS_IN_LEVEL
	INC TRGT_SHOT_DURING_ATTEMPT
	LDX #$04
	LDA LIGHT_STEP
	BNE L_1256
	STX TRGT1_STATE
	JMP IN_GAME
L_1256:
	STX TRGT2_STATE
IN_GAME:
	LDA GAME_MODE_IN
	CMP #$02
	BEQ L_1266 ;not sure about any of this.
	LDY #$01
	STY WHITE_BOX_DISPLAYED
	INY 
	BNE UPLOAD_PALETTE_NO_HIT
L_1266:
	LDY #$03
UPLOAD_PALETTE_NO_HIT:
	STY PALETTE_UPLOAD
DISP_WHITE_BOX:
	JSR CLEAR_SPRITES
	JMP PPU_ENABLE_SPRITES/BG
NO_HIT_LIGHT:
	LDA LIGHT_STEP
	BNE LIGHT_INVALID
	LDA TRGT2_TYPE
	BEQ IN_GAME
	LDA TRGT2_STATE
	CMP #$03
	BNE IN_GAME
	LDA #$01
	STA LIGHT_STEP
	JSR CLEAR_NMIRAN/PPUSTUFFFLAG
	JMP TEST_LIGHT_LOOP
LIGHT_INVALID:
	CMP #$02 ;compare to menu
	BNE IN_GAME ;not on menu
	LDA #$02 ;else, menu is miss.
	BNE WRITE_RESULT_FROM_A
MOVE_TRGT1_TO_ZP:
	LDA TRGT1_Y_COORD,Y ;Move the target to ZP.
	STA TARGET_Y_COORD_CPY
	LDA TRGT1_X_COORD,Y
	STA TARGET_X_COORD_CPY
	LDA TRGT1_UNKATTR,Y
	STA TMP_0C ;anim frame???
	JMP SPRITE_SOMETHING_UNK ;unk
SETUP_HITSREQD_TARGETS_OTHER:
	LDY HITS_REQUIRED_RAM_INDEX
RELOAD_HITS_REQD:
	LDA HITS_REQUIRED_FOR_LEVEL,Y
	CMP #$FF ;if at end
	BNE NO_MORE_DATA
	LDY #$13 ;range to end.
	BNE RELOAD_HITS_REQD ;load again
NO_MORE_DATA:
	INY  ;inc for next level.
	STY HITS_REQUIRED_RAM_INDEX ;store back current index.
	STA HITS_REQUIRED_RAM
	LDA #$00
	STA GAME_TARGETS_SHOWN? ;clear idk
	STA TARGETS_IN_LEVEL
	LDA #$01
	STA TRGT3_TYPE ;target type. dog?
	STA TRGT3_STATE ;enabled state?
	LDA #$FF
	STA UNK_$9C ;set idk.
	RTS 
GAME_STATE_C_END_RND_OPTIONS:
	LDA END_OF_ROUND_STATE
	JSR GOTO_TABLE_PAST_JSR
	.LOW A9_STATE_0_SET_TIMER+NEXT ;A9 next state. sets up timer.
	.HIGH A9_STATE_0_SET_TIMER+NEXT
	.LOW END_ROUND_STATUS_STUFF ;watch timer 2B, at 0 exec end of round
	.HIGH END_ROUND_STATUS_STUFF
	.LOW A9_STATE_BONUS ;find bonus.
	.HIGH A9_STATE_BONUS
	.LOW END_ROUND_NEXT_ROUND? ;display and play bonus sound.
	.HIGH END_ROUND_NEXT_ROUND?
A9_STATE_0_SET_TIMER+NEXT:
	LDA #$10
	STA FAST_TIMERS
	INC END_OF_ROUND_STATE
	RTS 
END_ROUND_STATUS_STUFF:
	LDA FAST_TIMERS
	BNE RTS ;RTS if timer not 0.
	LDY #$00 ;Y is no_changes.
	LDX #$01 ;start with index 1
DUCK_MOVE_LOOP:
	LDA DUCKS_HIT_ARRAY,X ;get status+1
	BEQ SKIP_STATUS_SWAP ;if not hit, skip.
	LDA DUCKS_HIT_ARRAY-1,X ;get status
	BNE SKIP_STATUS_SWAP ;if hit, skip.
	INC DUCKS_HIT_ARRAY-1,X ;curr now hit.
	DEC DUCKS_HIT_ARRAY,X ;+1 not hit now.
	LDY #$01 ;changed, do again.
SKIP_STATUS_SWAP:
	INX  ;next target
	CPX #$0A
	BNE DUCK_MOVE_LOOP ;not done, loop.
	DEY  ;if changed, Y=0.
	BNE FINALIZE_ROUND ;finalize if no changes.
	LDA #$00
	STA END_OF_ROUND_STATE ;timer again until next swap.
	JSR SND_SET_F1_#$20 ;play swapped music.
	JMP PPU_DISP_TARGET_STATUS ;show new ducks, abuse RTS.
FINALIZE_ROUND:
	LDA TARGETS_IN_LEVEL
	CMP HITS_REQUIRED_RAM
	BCC NOT_ENOUGH_TARGETS ;if A is less than REQ'd.
	JSR SND_SET_F1_#$40 ;set success sound.
	LDA #$00
	STA SHOT_FIRED ;reset
	LDA #$10 ;timer value
	STA FAST_TIMERS
	INC END_OF_ROUND_STATE ;next state.
	LDA LEVEL
	AND #$0F ;get bottom digit
	BNE RTS ;if level X1-X9, rts?
	JSR CLEAR_SPRITES
	LDA #$04
	JMP UPDATE_PPU_GROUP ;update something.
RTS:
	RTS 
NOT_ENOUGH_TARGETS:
	JSR CLEAR_SPRITES
	LDA #$08
	JSR UPDATE_PPU_GROUP ;game over group?
	JSR SND_SET_F2_#$80 ;game over sound?
	LDX #$06 ;future in game state.
	LDA #$0C ;timer.
	JMP SET_NEW_STATE_AFTER_TIMER
A9_STATE_BONUS:
	LDA FAST_TIMERS
	BNE RTS ;if not 0, RTS.
	LDA #$10
	STA FAST_TIMERS ;reset timer.
	INC SHOT_FIRED ;used different here?
	LDA SHOT_FIRED
	CMP #$0F
	BNE SHOW_TRGT_NO_HITS ;pallette changing stuff, i believe.
	LDA TARGETS_IN_LEVEL
	CMP #$0A ;is perfect?
	BNE NOT_PERFECT ;not perfect?
	JSR SND_SET_F2_#$10 ;play perfect sound.
	LDA LEVEL ;get level
	LDX #$00 ;init bonus value.
	CMP #$11
	BCC BONUS_FOUND ;10K bonus.
	INX 
	CMP #$16
	BCC BONUS_FOUND ;15K bonus.
	INX 
	CMP #$21
	BCC BONUS_FOUND ;20K bonus.
	INX  ;30K bonus.
BONUS_FOUND:
	LDA BONUS_SCORES_HIGH,X
	STA TMP_05 ;store high.
	STA TMP_0C
	LDA BONUS_SCORES_LOW,X
	STA TMP_06 ;store low
	LSR A ;shift since only 3 bytes
	LSR A
	LSR A
	LSR A
	STA TMP_0D ;store low shifted.
	LDA #$00
	STA TMP_04
	STA TMP_07 ;clear others.
	LDA #$0F ;not sure init value.
	JSR SCORE_ADD/SUB
	JSR SCORE_TO_SCREEN
	LDA #$03
	STA END_OF_ROUND_STATE ;bonus state?
	LDA #$A0
	STA FAST_TIMERS ;set timer.
	JSR CLEAR_SPRITES ;no sprites.
	LDA #$05
	JMP UPDATE_PPU_GROUP ;update and RTS.
NOT_PERFECT:
	LDA #$00 ;2D later.
END_ROUND_STATE_SWITCH:
	LDX #$02 ;future state duck.
	LDY GAME_MODE_IN ;get mode.
	CPY #$02 ;is pigeons?
	BNE NOT_PIGEONS ;no if taken
	LDX #$09 ;future state pigeons.
NOT_PIGEONS:
	JSR SET_NEW_STATE_AFTER_TIMER
	LDA #$00
	JMP UPDATE_PPU_GROUP
SHOW_TRGT_NO_HITS:
	AND #$01 ;which one to show.
	BNE SHOW_ALL_UNHIT
	JMP PPU_DISP_TARGET_STATUS ;show normal status.
SHOW_ALL_UNHIT:
	LDX #$09 ;loop count.
	LDA #$D6 ;duck not hit tile.
	LDY GAME_MODE_IN
	CPY #$02 ;is pigeons?
	BNE STORE_TILES_LOOP ;if not pigeons.
	LDA #$D4 ;pigeon unhit.
STORE_TILES_LOOP:
	STA PPU_UPDATE_BUF,X ;store tiles.
	DEX  ;next
	BPL STORE_TILES_LOOP ;if >=0, loop.
	JMP PPU_SHOW_TARGETS_BUFFER
END_ROUND_NEXT_ROUND?:
	LDA FAST_TIMERS
	BNE RTS ;if not 0, RTS.
	LDA #$04 ;2D timer later.
	BNE END_ROUND_STATE_SWITCH ;always taken.
RTS:
	RTS 
UPDATE_ACTIVE_TARGET_STATUS:
	LDA WHITE_BOX_DISPLAYED
	BNE RTS ;white box displayed, ret.
	INC DISPLAY_BLINK_TIMER
	LDY #$00 ;index, target 1 first.
	JSR PROCESS_TARGET
	LDY #$50 ;target 2
PROCESS_TARGET:
	LDA TRGT1_TYPE,Y
	BEQ RTS ;no target
	LDA TRGT1_STATE,Y
	CMP #$03 ;state active?
	BEQ TARGET_ACTIVE
	CMP #$08 ;state killed?
	BNE RTS ;not killed, rts.
	LDX $030B,Y ;TRGT_INDEX_B = Target_Number
	LDA DUCKS_HIT_ARRAY-1,X ;Get status. $3F0 = target status array.
	BEQ TRGT_NOT_KILLED
	LDX #$D3 ;is killed, show.
	BNE OUT_TARGET_STATUS ;always go
TARGET_ACTIVE:
	LDA DISPLAY_BLINK_TIMER ;flag for blinking the status bar?
	AND #$0F
	BNE RTS ;if X0, continue. RTS on 1-F, though.
	LDX #$B7 ;blank tile value.
	LDA DISPLAY_BLINK_TIMER
	AND #$10 ;every other group, show.
	BEQ COMMIT_TILE ;commit blank if 0, otherwise show targets.
TRGT_NOT_KILLED:
	LDX #$D4 ;tile for clay pigeon
OUT_TARGET_STATUS:
	LDA GAME_MODE_IN
	CMP #$02
	BEQ COMMIT_TILE
	INX  ;get proper char for ducks, D5/D6
	INX 
COMMIT_TILE:
	STX PPU_UPDATE_BUF
	LDX #$11 ;1 row, 1 tile.
	STX PPU_BLOCK_BUF_SETTING
	LDA $030B,Y ;get which number.
	CLC 
	ADC #$4B ;find PPU addr. $234B+which
	TAX 
	LDY #$23
	JMP MAKE_SETUP_PPU_BLOCK ;output.
RTS:
	RTS 
DISP_BLINK_WORD_SHOT:
	LDA ZAP_SHOT_ENABLED
	BEQ RTS ;shots disabled
	LDA SHOTS_REMAINING
	BNE RTS ;if any remaining, leave.
	LDA SHOT_BLINK_COUNTER
	AND #$07
	BNE INC_9A ;if bottom bits set.
	LDA WHITE_BOX_DISPLAYED
	BNE RTS ;if white box, rts
	LDA SHOT_BLINK_COUNTER
	AND #$08
	BEQ PPU_DISP_SHOT_TEXT
	LDA #$B7 ;blank shot text with tile.
	TAX 
	TAY 
	BNE AXY_TO_UPDATEBUF_3BYTES
PPU_DISP_SHOT_TEXT:
	LDA #$DA ;SHOT text
	LDX #$DB
	LDY #$DC
AXY_TO_UPDATEBUF_3BYTES:
	STA PPU_UPDATE_BUF
	STX PPU_UPDATE_BUF+1
	STY PPU_UPDATE_BUF+2
	LDA #$13 ;1 group, 3 bytes.
	STA PPU_BLOCK_BUF_SETTING
	LDX #$63
	LDY #$23 ;store to 2363
	JSR MAKE_SETUP_PPU_BLOCK
INC_9A:
	INC SHOT_BLINK_COUNTER
	RTS 
UPDATE_PPU_GROUP:
	PHA 
	JSR WAIT_FOR_NMI
	JSR PLAY_SOUNDS
	PLA 
SPR_BG_UNK:
	STA SPRITE_UPDATE_BASE
	BEQ MAKE_PPU_BLOCK_UNK ;not doing something diff...hmm...
	ASL A
	TAX  ;X is now index.
	LDA UNK_TABLE_LOW,X
	STA INDIR_JMP_LOW
	LDA UNK_TABLE_HIGH,X
	STA INDIR_JMP_HIGH
	LDY #$01
	LDA (INDIR_JMP_LOW),Y
	STA TMP_0F
	LDX #$00
	INY 
MORE_BYTES_IN_BLOCK:
	LDA (INDIR_JMP_LOW),Y
	STA PPU_BLOCK_BUF_SETTING,X
	INY 
	INX 
	DEC TMP_0F
	BNE MORE_BYTES_IN_BLOCK
	LDA SPRITE_UPDATE_BASE
	CMP #$01 ;level group?
	BNE NO_LEVEL_IN_UPDATE
	LDA LEVEL
	LSR A
	LSR A
	LSR A
	LSR A
	BEQ ONLY_ONE_DIGIT
	STA $0518 ;upper level digit if exists.
ONLY_ONE_DIGIT:
	LDA LEVEL
	AND #$0F ;bottom level digit
	STA $0519
	JMP NO_BONUS?
NO_LEVEL_IN_UPDATE:
	CMP #$05 ;perfect level bonus?
	BNE NO_BONUS?
	LDA TMP_0C ;bonus score for level?
	STA $0521
	LDA TMP_0D
	STA $0522
	JMP NO_BONUS?
MAKE_PPU_BLOCK_UNK:
	LDX #$44
	LDA #$24
L_14C0:
	STA PPU_UPDATE_BUF,X
	DEX 
	BPL L_14C0
	LDA #$6B
	STA PPU_BLOCK_BUF_SETTING
	LDX #$CB
	BNE L_14D4
NO_BONUS?:
	LDY #$00
	LDA (INDIR_JMP_LOW),Y
	TAX  ;get ppu high addr
L_14D4:
	LDY #$20
	JMP MAKE_SETUP_PPU_BLOCK
CLEAR_MEMORIES:
	JSR CLEAR_SPRITES
	JSR CLEAR_0040_00BF
	JMP CLEAR_0300-03FF
SND_SET_F0_#$01:
	LDA #$01 ;disable all registers.
	BNE SND_SET_F0
SND_SET_F0_#$02:
	LDA #$02 ;NOISE+DMC INIT.
	BNE SND_SET_F0
SND_SET_F0_#$04:
	LDA #$04
	BNE SND_SET_F0
SND_SET_F0_#$08:
	LDA #$08
	BNE SND_SET_F0
SND_SET_F0_#$10:
	LDA #$10
	BNE SND_SET_F0
SND_SET_F0_#$20:
	LDA #$20
	BNE SND_SET_F0
SND_SET_F0_#$40:
	LDA #$40
	BNE SND_SET_F0
SND_SET_F0_#$80:
	LDA #$80
SND_SET_F0:
	ORA SND_PLAY_F0
	STA SND_PLAY_F0
	RTS 
SND_SET_F1_#$01:
	LDA #$01
	BNE SND_SET_F1
SND_SET_F1_#$02:
	LDA #$02 ;title sound?
	BNE SND_SET_F1
SND_SET_F1_#$04:
	LDA #$04
	BNE SND_SET_F1
SND_SET_F1:
	LDA #$08
	BNE SND_SET_F1
SND_SET_F1_#$10:
	LDA #$10 ;start of round?
	BNE SND_SET_F1
SND_SET_F1_#$20:
	LDA #$20
	BNE SND_SET_F1
SND_SET_F1_#$40:
	LDA #$40
	BNE SND_SET_F1
SND_SET_F1_#$80:
	LDA #$80
SND_SET_F1:
	ORA SND_PLAY_F1
	STA SND_PLAY_F1
	RTS 
SND_SET_F2_#$01:
	LDA #$01
	BNE SND_SET_F2
SND_SET_F2_#$02:
	LDA #$02
	BNE SND_SET_F2
	LDA #$04 ;dead code?
	BNE SND_SET_F2
SND_SET_F2_#$08:
	LDA #$08
	BNE SND_SET_F2
SND_SET_F2_#$10:
	LDA #$10
	BNE SND_SET_F2
SND_SET_F2_#$20:
	LDA #$20
	BNE SND_SET_F2
	LDA #$40
	BNE SND_SET_F2
SND_SET_F2_#$80:
	LDA #$80
SND_SET_F2:
	ORA SND_PLAY_F2
	STA SND_PLAY_F2
	RTS 
GAME_STATE_8_SETUP_PIGEONS:
	JSR WAIT_FOR_NMI ;this is for the pigeons game.
	LDX #$6C ;ptr $E26C
	LDY #$E2
	JSR UPLOAD_PPU_FILE ;upload file.
	LDA #$03
	STA PALETTE_UPLOAD ;Upload pallette.
	LDA #$00
	STA MULTIPLE_BG_UPDATE_INDEX ;reset update index.
	LDA #$09
	STA IN_GAME_STATE ;go to next state.
	JSR SET_PPU_SCROLL
	JSR PPU_ENABLE_SPRITES/BG
	JMP SND_SET_F1_#$01 ;play sound. TODO:which snd
GAME_STATE_9_PIGEON_RND_SETUP:
	JSR CLEAR_MEMORIES ;setup memory.
	JSR SETUP_HITSREQD_TARGETS_OTHER ;set up hits for level.
	JSR MAKE_DISP_BUF_REQUIRED ;display hits per level.
	JSR MAKE_DISP_BUF_LEVEL ;display level #
	JSR WAIT_FOR_NMI
	JSR PLAY_SOUNDS
	LDA #$01
	STA SHOT_FIRED ;disable shots.
	LDA #$03
	STA SHOTS_REMAINING ;set remaining.
	JSR PPU_DISP_SHOTS_LEFT
	JSR PPU_DISP_TARGET_STATUS
	LDA #$06
	STA MULTIPLE_BG_UPDATE_INDEX ;Set to bg updates index.
	LDA #$0D
	STA IN_GAME_STATE ;move to state.
	RTS 
GAME_STATE_A_SUBROUND_INIT:
	LDA #$01
	STA TRGT1_TYPE ;target type.
	STA TRGT2_TYPE
	STA TRGT1_STATE ;target state. pigeons always 1 targets.
	STA TRGT2_STATE
	LDA #$30
	LDX LEVEL
	CPX #$10 ;max level value
	BCS LEVEL_MAXED ;if X >= 10, skip load.
	DEX  ;range 0-8???
	LDA LEVEL_DATA_UNK,X
LEVEL_MAXED:
	STA LEVEL_TIED_VAR? ;not sure
	LDA #$80
	STA UNK_$A6 ;set top bit of A6. Counter?
	LDA #$01
	STA SHOT_FIRED ;disable shooting.
	LDA #$03
	STA SHOTS_REMAINING ;store shots remaining.
	LDA #$02
	STA #_TRGTS_IN_MODE ;set # trgts
	LDA #$00
	STA ZAPPER_TRIG_RELEASED ;disable trigger.
	STA ZAP_SHOT_ENABLED ;disable shots.
	STA TRGT_SHOT_DURING_ATTEMPT ;clear any hit. unused in pigeons?
	JSR PPU_DISP_SHOTS_LEFT ;show shots.
	JSR PPU_DISP_TARGET_STATUS ;show targets.
	LDA #$0B
	STA IN_GAME_STATE ;next state.
	RTS 
GAME_STATE_B_PIGEON_MAIN:
	JSR ZAP_PROC_TRIGGER
	JSR PROCESS_ZAPPER
	JSR PROCESS_TARGETS
	JSR PPU_DISP_SHOTS_LEFT
	JSR UPDATE_ACTIVE_TARGET_STATUS
	JSR DISP_TARGETS_HIT
	JSR DISP_SCORE_SPRITES
	JSR DISP_BLINK_WORD_SHOT
	NOP  ;removed feature?
	NOP 
	NOP 
	RTS 
PROCESS_TARGETS:
	LDA TRGT1_TYPE
	BEQ PROCESS_TARGET_2
	LDY #$00 ;origin $300
	STY OBJ_ZP_ORIGIN_SLOT# ;save where obj info came from.
	JSR COPY_OBJ_$3YY_TO_OBJ_ZP ;move obj to RAM.
	JSR HANDLE_TARGET_STATE ;handle target.
	JSR MOVE_$50B_BACK ;move to $500.
PROCESS_TARGET_2:
	LDA TRGT2_TYPE
	BEQ PROCESS_OTHER
	LDY #$50 ;origin $350
	INC OBJ_ZP_ORIGIN_SLOT# ;to 1?
	JSR COPY_OBJ_$3YY_TO_OBJ_ZP
	JSR HANDLE_TARGET_STATE
	JSR MOVE_$50B_BACK ;move to $500.
PROCESS_OTHER:
	LDA #_TRGTS_IN_MODE
	BNE BC_NOT_CLEAR
	LDX TRGT1_STATE
	LDY TRGT2_STATE
	CPX #$03 ;target state active?
	BEQ IS_ACTIVE
	CPY #$03
	BEQ IS_ACTIVE
	JSR SND_SET_F0_#$80 ;set sound for something.
IS_ACTIVE:
	CPX #$00
	BNE RTS ;rts if any state
	CPY #$00
	BNE RTS ;rts if any state.
	JSR PPU_DISP_SHOT_TEXT ;display text
	LDA #$00
	STA ZAP_SHOT_ENABLED ;disable shot.
	LDA GAME_TARGETS_SHOWN?
	CMP #$0A ;state?
	BEQ CLEAR_A9_IN_GAME_0C
	LDA #$0A
	BNE GAME_STATE_SWITCH.
CLEAR_A9_IN_GAME_0C:
	LDA #$00
	STA END_OF_ROUND_STATE ;clear A9.
	LDA #$0C
GAME_STATE_SWITCH.:
	STA IN_GAME_STATE ;goto state.
	JMP CLEAR_SPRITES ;clear sprites then RTS.
BC_NOT_CLEAR:
	LDA UNK_$A6 ;is a timer?
	BEQ RTS
	DEC UNK_$A6
RTS:
	RTS 
HANDLE_TARGET_STATE:
	LDA OBJ_ZP_STATE ;target states.
	JSR GOTO_TABLE_PAST_JSR
	.LOW RTS
	.HIGH RTS
	.LOW TARGET_HANDLE_01
	.HIGH TARGET_HANDLE_01
	.LOW TARGET_HANDLE_02
	.HIGH TARGET_HANDLE_02
	.LOW TARGET_HANDLE_03
	.HIGH TARGET_HANDLE_03
	.LOW TARGET_HANDLE_04
	.HIGH TARGET_HANDLE_04
	.LOW TARGET_HANDLE_05
	.HIGH TARGET_HANDLE_05
	.LOW RTS
	.HIGH RTS
	.LOW RTS
	.HIGH RTS
	.LOW TARGET_HANDLE_08
	.HIGH TARGET_HANDLE_08
TARGET_HANDLE_01:
	LDX #$4F
L_166B:
	LDA L_28DA,X
	STA OBJ_ZP_COPY,X
	DEX 
	BPL L_166B
	LDA #$01
	STA $A7
	RTS 
TARGET_HANDLE_02:
	LDA UNK_$A6
	BNE L_16D4
	LDA #$01
	STA ZAP_SHOT_ENABLED
	JSR RNG_ADVANCE
	AND #$3F
	TAY 
	INY 
	STY UNK_$A6
	JSR RNG_ADVANCE
	AND #$0F
	CMP UNK_$9C
	BNE L_1697
	CLC 
	ADC #$01
	AND #$0F
L_1697:
	STA UNK_$9C
	ASL A
	STA TMP_0C
	ASL A
	CLC 
	ADC TMP_0C
	TAX 
	LDA L_2968,X
	STA OBJ_ZP_STEP?
	LDA L_2969,X
	STA OBJ_ZP_PTR_INDEX
	LDA L_296A,X
	STA OBJ_ZP_$4A
	LDA L_296B,X
	STA OBJ_ZP_ANIM_TIMER
	LDA L_296C,X
	STA OBJ_ZP_POPUP_OFFSET
	LDA L_296D,X
	STA OBJ_ZP_COPY+28
	INC GAME_TARGETS_SHOWN?
	LDA GAME_TARGETS_SHOWN?
	STA OBJ_ZP_$3B
	DEC #_TRGTS_IN_MODE
	LDA #$FF
	STA OBJ_ZP_COPY+47
	JSR SND_SET_F2_#$20
	LDA #$05
	STA L_0058
	INC OBJ_ZP_STATE
L_16D4:
	RTS 
TARGET_HANDLE_03:
	LDA L_0058
	BEQ L_16E0
	DEC L_0058
	BNE L_16E0
	JSR SND_SET_F0_#$20
L_16E0:
	LDA OBJ_ZP_COPY+28
	BMI L_16EC
	LDA OBJ_ZP_$49
	LSR A
	LSR A
	CMP #$07
	BCC $16EE
L_16EC:
	LDA #$07
	CMP OBJ_ZP_COPY+47
	BEQ L_16FD
	STA OBJ_ZP_COPY+47
	CLC 
	ADC LEVEL_TIED_VAR?
	TAX 
	LDA L_29C8,X
	STA OBJ_ZP_$5E
L_16FD:
	JSR L_181B
L_1700:
	PHA 
	JSR L_18AE
	PLA 
	SEC 
	SBC #$01
	BNE L_1700
	LDA OBJ_ZP_COPY+30
	BMI L_174D
	LDA OBJ_ZP_$49
	CMP #$30
	BCS L_174D
	JSR L_182F
	LDA OBJ_ZP_Y_COORD
	SEC 
	SBC #$40
	STA OBJ_ZP_Y_COORD
	LDA OBJ_ZP_$49
	LSR A
	TAX 
	LDA L_292A,X
	STA OBJ_ZP_FRAME
	STX TMP_0C
	SEC 
	SBC #$18
	STA OBJ_ZP_COPY+38
	LDX LEVEL
	LDA #$00
	CPX #$12
	BCC L_173E
	LDA #$03
	CPX #$23
	BCC L_173E
	LDA #$06
L_173E:
	CLC 
	ADC TMP_0C
	TAX 
	LDA L_2944,X
	STA OBJ_ZP_COPY+10
	JSR L_1805
	JMP OBJ_TO_SCREEN_ROUTINE
L_174D:
	LDA #$08
	STA OBJ_ZP_STATE
	RTS 
TARGET_HANDLE_04:
	LDX OBJ_ZP_$3B
	LDA #$01
	STA DUCKS_HIT_ARRAY-1,X
	STA UPDATE_TARGETS_HIT
	LDA OBJ_ZP_COPY+38
	ASL A
	ASL A
	TAX 
	LDY #$00
L_1762:
	LDA L_2AF2,X
	STA OBJ_ZP_COPY+32,Y
	INX 
	INY 
	CPY #$04
	BNE L_1762
	LDA #$00
	STA OBJ_ZP_COPY+39
	LDX #$00
L_1774:
	LDA OBJ_ZP_Y_COORD
	JSR L_1AA5
	LDA OBJ_ZP_X_COORD
	JSR L_1AB5
	INX 
	INX 
	CPX #$20
	BNE L_1774
	JSR L_0F56
	LDX OBJ_INDEX_START
	JSR SPRITE_OFF_SCREEN
	INC OBJ_ZP_STATE
	RTS 
TARGET_HANDLE_05:
	JSR L_1805
	JSR L_193A
	LDA OBJ_INDEX_START
	STA SPRITE_INDEX_VAL
	LDY OBJ_ZP_COPY+32
	INY 
	BEQ L_17A7
	LDX #$00
	LDY #$0C
	LDA OBJ_ZP_COPY+36
	JSR L_17CE
L_17A7:
	LDY OBJ_ZP_COPY+35
	INY 
	BEQ L_17B5
	LDX #$10
	LDY #$20
	LDA OBJ_ZP_COPY+37
	JSR L_17CE
L_17B5:
	LDA OBJ_ZP_COPY+39
	CMP #$02
	BNE L_17BE
	JSR SND_SET_F0_#$04
L_17BE:
	LDA #$00
	STA OBJ_ZP_COPY+36
	STA OBJ_ZP_COPY+37
	RTS 
TARGET_HANDLE_08:
	LDA #$00
	STA OBJ_ZP_STATE
	LDX OBJ_INDEX_START
	JMP SPRITE_OFF_SCREEN
L_17CE:
	STA TMP_0D
	STY TMP_0C
	LDY SPRITE_INDEX_VAL
L_17D4:
	LDA TMP_0D
	BNE L_17DC
	LDA OBJ_ZP_COPY+48,X
	BNE L_17E0
L_17DC:
	INX 
	JMP L_17F9
L_17E0:
	STA $0200,Y
	INY 
	LDA L_2A30,X
	STA $0200,Y
	INY 
	INX 
	LDA L_2A30,X
	STA $0200,Y
	INY 
	LDA OBJ_ZP_COPY+48,X
	STA $0200,Y
	INY 
L_17F9:
	INX 
	CPX TMP_0C
	BNE L_17D4
	STY SPRITE_INDEX_VAL
	TYA 
	TAX 
	JMP SPRITE_OFF_SCREEN
L_1805:
	LDA $A7
	BEQ L_181A
	LDA #$00
	STA $A7
	LDX OBJ_INDEX_START
	JSR SPRITE_OFF_SCREEN
	LDA #$50
	STA OBJ_INDEX_START
	LDA #$9F
	STA OBJ_INDEX_FINAL
L_181A:
	RTS 
L_181B:
	LDX OBJ_ZP_$5E
	LDA UNK_DATA_00_REAL,X ;not sure...
	PHA 
	INX 
	TXA 
	AND #$03
	BNE L_182B
	DEX 
	DEX 
	DEX 
	DEX 
L_182B:
	STX OBJ_ZP_$5E
	PLA 
	RTS 
L_182F:
	LDA OBJ_ZP_$4D
	SEC 
	SBC #$00
	TAY 
	LDA OBJ_ZP_COPY+30
	SBC #$10
	TAX 
	LDA #$3B
	JSR L_18DB
	STY INDIR_JMP_LOW
	STX INDIR_JMP_HIGH
	LDA OBJ_ZP_$4D
	SEC 
	SBC #$00
	TAY 
	LDA OBJ_ZP_COPY+30
	SBC #$10
	TAX 
	LDA #$E7
	JSR L_18DB
	STY TMP_12
	STX TMP_13
	LDA OBJ_ZP_$48
	SEC 
	SBC #$00
	TAY 
	LDA OBJ_ZP_$49
	SBC #$18
	TAX 
	LDA #$7F
	JSR L_18DB
	CLC 
	TYA 
	ADC #$4F
	TAY 
	TXA 
	ADC #$23
	TAX 
	TYA 
	SEC 
	SBC INDIR_JMP_LOW
	STA $93
	TXA 
	SBC INDIR_JMP_HIGH
	CMP #$50
	ROR A
	STA $94
	ROR $93
	LDY $91
	LDX $92
	LDA #$6C
	JSR L_18DB
	CLC 
	TYA 
	ADC TMP_12
	TAY 
	TXA 
	ADC TMP_13
	TAX 
	JSR L_1907
	SBC #$00
	EOR #$7F
	STA OBJ_ZP_Y_COORD
	LDA OBJ_ZP_PTR_INDEX
	SEC 
	SBC #$00
	TAY 
	LDA OBJ_ZP_STEP?
	SBC #$09
	TAX 
	JSR L_1907
	EOR #$80
	STA OBJ_ZP_X_COORD
	RTS 
L_18AE:
	LDA #$0F
L_18B0:
	SEC 
	SBC #$05
	TAX 
	LDY #$00
	LDA OBJ_ZP_PTR_L_UNK,X
	BPL L_18BB
	DEY 
L_18BB:
	CLC 
	ADC OBJ_ZP_PTR_H_UNK,X
	STA OBJ_ZP_PTR_H_UNK,X
	STA INDIR_JMP_HIGH
	TYA 
	LDY #$00
	ADC OBJ_ZP_ANIM_TIMER,X
	STA OBJ_ZP_ANIM_TIMER,X
	BPL L_18CC
	DEY 
L_18CC:
	ASL INDIR_JMP_HIGH
	ADC OBJ_ZP_PTR_INDEX,X
	STA OBJ_ZP_PTR_INDEX,X
	TYA 
	ADC OBJ_ZP_STEP?,X
	STA OBJ_ZP_STEP?,X
	TXA 
	BNE L_18B0
	RTS 
L_18DB:
	STY TMP_$10
	STX TMP_$11
	STA $95
	LDA #$00
	STA $96
	STA $97
	LDX #$08
L_18E9:
	ROR $95
	BCC L_18FA
	CLC 
	LDA $96
	ADC TMP_$10
	STA $96
	LDA $97
	ADC TMP_$11
	STA $97
L_18FA:
	ASL A
	ROR $97
	ROR $96
	DEX 
	BNE L_18E9
	LDY $96
	LDX $97
	RTS 
L_1907:
	STY $96
	STX $97
	LDA #$00
	STA $95
	LDX #$07
	CLC 
	LDA $96
	ADC $93
	TAY 
	LDA $97
	ADC $94
L_191B:
	BCC L_1921
	STY $96
	STA $97
L_1921:
	ROL $95
	ROL $96
	ROL $97
	SEC 
	LDA $96
	SBC $93
	TAY 
	LDA $97
	SBC $94
	DEX 
	BPL L_191B
	BCS L_1937
	DEX 
L_1937:
	LDA $95
	RTS 
L_193A:
	INC OBJ_ZP_COPY+39
	LDY OBJ_ZP_COPY+32
	CPY #$FF
	BEQ L_1977
	INC OBJ_ZP_COPY+32
	LDA L_2A50,Y
	STA TMP_0C
	STA TMP_0F
	CMP #$AA
	BEQ L_19B3
	CMP #$BB
	BEQ L_19BA
	LDA OBJ_ZP_COPY+39
	CMP OBJ_ZP_COPY+33
	BEQ L_19C7
L_1959:
	LDX #$00
L_195B:
	STX TMP_0D
	LDA L_2B22,X
	STA TMP_$0E
	TXA 
	ASL A
	TAX 
	LDA OBJ_ZP_COPY+48,X
	BEQ L_1970
	LDA OBJ_ZP_COPY+49,X
	BEQ L_1970
	JSR L_19F6
L_1970:
	LDX TMP_0D
	INX 
	CPX #$06
	BNE L_195B
L_1977:
	LDY OBJ_ZP_COPY+35
	CPY #$FF
	BEQ L_19E2
	INC OBJ_ZP_COPY+35
	LDA L_2A8F,Y
	STA TMP_0C
	CMP #$AA
	BEQ L_19CE
	CMP #$BB
	BEQ L_19D5
	LDA L_2AC2,Y
	STA TMP_0F
L_1991:
	LDX #$00
L_1993:
	STX TMP_0D
	LDA L_2B28,X
	STA TMP_$0E
	TXA 
	ASL A
	CLC 
	ADC #$10
	TAX 
	LDA OBJ_ZP_COPY+48,X
	BEQ L_19AB
	LDA OBJ_ZP_COPY+49,X
	BEQ L_19AB
	JSR L_19F6
L_19AB:
	LDX TMP_0D
	INX 
	CPX #$08
	BNE L_1993
	RTS 
L_19B3:
	LDA #$FF
	STA OBJ_ZP_COPY+32
	JMP L_1977
L_19BA:
	LDA #$01
	STA OBJ_ZP_COPY+36
	LDA #$00
	STA TMP_0C
	STA TMP_0F
	JMP L_1959
L_19C7:
	LDA OBJ_ZP_COPY+34
	STA OBJ_ZP_COPY+35
	JMP L_1959
L_19CE:
	LDA #$FF
	STA OBJ_ZP_COPY+35
	JMP L_19E2
L_19D5:
	LDA #$01
	STA OBJ_ZP_COPY+37
	LDA #$00
	STA TMP_0C
	STA TMP_0F
	JMP L_1991
L_19E2:
	LDA OBJ_ZP_COPY+32
	CMP #$FF
	BNE L_19F5
	LDA OBJ_ZP_COPY+35
	CMP #$FF
	BNE L_19F5
	JSR SPRITE_SOMETHING_2
	LDA #$08
	STA OBJ_ZP_STATE
L_19F5:
	RTS 
L_19F6:
	LDA OBJ_ZP_COPY+39
	AND #$03
	STA SPRITE_UPDATE_BASE
	LDA TMP_$0E
	JSR GOTO_TABLE_PAST_JSR
	.LOW RTS
	.HIGH RTS
	.LOW TABLE_UNK_IDK_01
	.HIGH TABLE_UNK_IDK_01
	.LOW TABLE_UNK_IDK_02
	.HIGH TABLE_UNK_IDK_02
	.LOW TABLE_UNK_IDK_03
	.HIGH TABLE_UNK_IDK_03
	.LOW TABLE_UNK_IDK_04
	.HIGH TABLE_UNK_IDK_04
	.LOW TABLE_UNK_IDK_05
	.HIGH TABLE_UNK_IDK_05
	.LOW TABLE_UNK_IDK_06
	.HIGH TABLE_UNK_IDK_06
	.LOW TABLE_UNK_IDK_07
	.HIGH TABLE_UNK_IDK_07
	.LOW RTS
	.HIGH RTS
	.LOW TABLE_UNK_IDK_09
	.HIGH TABLE_UNK_IDK_09
	.LOW TABLE_UNK_IDK_0A
	.HIGH TABLE_UNK_IDK_0A
	.LOW TABLE_UNK_IDK_0B
	.HIGH TABLE_UNK_IDK_0B
	.LOW TABLE_UNK_IDK_0C
	.HIGH TABLE_UNK_IDK_0C
	.LOW TABLE_UNK_IDK_0D
	.HIGH TABLE_UNK_IDK_0D
	.LOW TABLE_UNK_IDK_0E
	.HIGH TABLE_UNK_IDK_0E
	.LOW TABLE_UNK_IDK_0F
	.HIGH TABLE_UNK_IDK_0F
TABLE_UNK_IDK_01:
	LDA TMP_0F
	JSR L_1AB5
L_1A26:
	LDA TMP_0C
	JSR TWO_COMPLIMENT_A_REG
	JMP L_1AA5
TABLE_UNK_IDK_02:
	LDA SPRITE_UPDATE_BASE
	BEQ L_1A26
	JSR L_1A26
	JMP TABLE_UNK_IDK_04
TABLE_UNK_IDK_03:
	LDA TMP_0F
	JSR TWO_COMPLIMENT_A_REG
	JSR L_1AA5
TABLE_UNK_IDK_04:
	LDA TMP_0C
	JMP L_1AB5
TABLE_UNK_IDK_05:
	JSR TABLE_UNK_IDK_04
L_1A48:
	LDA TMP_0F
	JMP L_1AA5
TABLE_UNK_IDK_06:
	LDA SPRITE_UPDATE_BASE
	BEQ L_1A48
	JSR L_1A5C
	JMP TABLE_UNK_IDK_04
TABLE_UNK_IDK_07:
	LDA TMP_0F
	JSR L_1AB5
L_1A5C:
	LDA TMP_0C
	JMP L_1AA5
TABLE_UNK_IDK_09:
	LDA TMP_0F
	JSR TWO_COMPLIMENT_A_REG
	JSR L_1AB5
	JMP L_1A5C
TABLE_UNK_IDK_0A:
	LDA SPRITE_UPDATE_BASE
	BEQ L_1A48
	LDA TMP_0C
	JSR L_1AA5
TABLE_UNK_IDK_0C:
	LDA TMP_0C
	JSR TWO_COMPLIMENT_A_REG
	JMP L_1AB5
TABLE_UNK_IDK_0B:
	LDA TMP_0F
	JSR L_1AA5
	JMP TABLE_UNK_IDK_0C
TABLE_UNK_IDK_0D:
	JSR TABLE_UNK_IDK_0C
L_1A88:
	LDA TMP_0F
	JSR TWO_COMPLIMENT_A_REG
	JMP L_1AA5
TABLE_UNK_IDK_0E:
	LDA SPRITE_UPDATE_BASE
	BEQ L_1A88
	JSR TABLE_UNK_IDK_0C
	JMP L_1A26
TABLE_UNK_IDK_0F:
	LDA TMP_0F
	JSR TWO_COMPLIMENT_A_REG
	JSR L_1AB5
	JMP L_1A26
L_1AA5:
	CLC 
	ADC OBJ_ZP_COPY+48,X
	CMP #$07
	BCC L_1AB0
	CMP #$C7
	BCC L_1AB2
L_1AB0:
	LDA #$00
L_1AB2:
	STA OBJ_ZP_COPY+48,X
	RTS 
L_1AB5:
	CLC 
	ADC OBJ_ZP_COPY+49,X
	CMP #$07
	BCC L_1AC0
	CMP #$F8
	BCC L_1AC2
L_1AC0:
	LDA #$00
L_1AC2:
	STA OBJ_ZP_COPY+49,X
	RTS 
ANIMATION_FILES:
	.LOW ANIM_FRAME_FILE_PTR_00 ;Animation file ptrs. Ptrs to ptr arrays. DAC5
	.HIGH ANIM_FRAME_FILE_PTR_00
	.LOW ANIM_FRAME_FILE_PTR_01
	.HIGH ANIM_FRAME_FILE_PTR_01
	.LOW ANIM_FRAME_FILE_PTR_02
	.HIGH ANIM_FRAME_FILE_PTR_02
	.LOW ANIM_FRAME_FILE_PTR_03
	.HIGH ANIM_FRAME_FILE_PTR_03
	.LOW ANIM_FRAME_FILE_PTR_04
	.HIGH ANIM_FRAME_FILE_PTR_04
	.LOW ANIM_FRAME_FILE_PTR_05
	.HIGH ANIM_FRAME_FILE_PTR_05
	.LOW ANIM_FRAME_FILE_PTR_06
	.HIGH ANIM_FRAME_FILE_PTR_06
	.LOW ANIM_FRAME_FILE_PTR_07
	.HIGH ANIM_FRAME_FILE_PTR_07
	.LOW ANIM_FRAME_FILE_PTR_08
	.HIGH ANIM_FRAME_FILE_PTR_08
	.LOW ANIM_FRAME_FILE_PTR_09
	.HIGH ANIM_FRAME_FILE_PTR_09
	.LOW ANIM_FRAME_FILE_PTR_0A
	.HIGH ANIM_FRAME_FILE_PTR_0A
	.LOW ANIM_FRAME_FILE_PTR_0B
	.HIGH ANIM_FRAME_FILE_PTR_0B
	.LOW ANIM_FRAME_FILE_PTR_0C ;Dog 1st file.
	.HIGH ANIM_FRAME_FILE_PTR_0C
	.LOW ANIM_FRAME_FILE_PTR_0D
	.HIGH ANIM_FRAME_FILE_PTR_0D
	.LOW ANIM_FRAME_FILE_PTR_0E
	.HIGH ANIM_FRAME_FILE_PTR_0E
	.LOW ANIM_FRAME_FILE_PTR_0F
	.HIGH ANIM_FRAME_FILE_PTR_0F
	.LOW ANIM_FRAME_FILE_PTR_10
	.HIGH ANIM_FRAME_FILE_PTR_10
	.LOW ANIM_FRAME_FILE_PTR_11
	.HIGH ANIM_FRAME_FILE_PTR_11
	.LOW ANIM_FRAME_FILE_PTR_12
	.HIGH ANIM_FRAME_FILE_PTR_12
	.LOW ANIM_FRAME_FILE_PTR_13
	.HIGH ANIM_FRAME_FILE_PTR_13
	.LOW ANIM_FRAME_FILE_PTR_14
	.HIGH ANIM_FRAME_FILE_PTR_14
	.LOW ANIM_FRAME_FILE_PTR_15
	.HIGH ANIM_FRAME_FILE_PTR_15
	.LOW ANIM_FRAME_FILE_PTR_16
	.HIGH ANIM_FRAME_FILE_PTR_16
	.LOW ANIM_FRAME_FILE_PTR_17
	.HIGH ANIM_FRAME_FILE_PTR_17
	.LOW ANIM_FRAME_FILE_PTR_18
	.HIGH ANIM_FRAME_FILE_PTR_18
	.LOW ANIM_FRAME_FILE_PTR_19
	.HIGH ANIM_FRAME_FILE_PTR_19
	.LOW ANIM_FRAME_FILE_PTR_1A
	.HIGH ANIM_FRAME_FILE_PTR_1A
	.LOW ANIM_FRAME_FILE_PTR_1B
	.HIGH ANIM_FRAME_FILE_PTR_1B
	.LOW ANIM_FRAME_FILE_PTR_1C
	.HIGH ANIM_FRAME_FILE_PTR_1C
	.LOW ANIM_FRAME_FILE_PTR_1D
	.HIGH ANIM_FRAME_FILE_PTR_1D
	.LOW ANIM_FRAME_FILE_PTR_1E
	.HIGH ANIM_FRAME_FILE_PTR_1E
	.LOW ANIM_FRAME_FILE_PTR_1F
	.HIGH ANIM_FRAME_FILE_PTR_1F
	.LOW ANIM_FRAME_FILE_PTR_20
	.HIGH ANIM_FRAME_FILE_PTR_20
	.LOW ANIM_FRAME_FILE_PTR_21
	.HIGH ANIM_FRAME_FILE_PTR_21
	.LOW ANIM_FRAME_FILE_PTR_22
	.HIGH ANIM_FRAME_FILE_PTR_22
	.LOW ANIM_FRAME_FILE_PTR_23
	.HIGH ANIM_FRAME_FILE_PTR_23
	.LOW ANIM_FRAME_FILE_PTR_24
	.HIGH ANIM_FRAME_FILE_PTR_24
ANIM_FRAME_FILE_PTR_00:
	.HIGH FRAME_0_DATA_00
	.LOW FRAME_0_DATA_00
	.HIGH FRAME_13_DATA_01
	.LOW FRAME_13_DATA_01
	.db #$00 ;Terminator for files.
ANIM_FRAME_FILE_PTR_01:
	.HIGH FRAME_1_DATA_00
	.LOW FRAME_1_DATA_00
	.HIGH FRAME_13_DATA_01
	.LOW FRAME_13_DATA_01
	.HIGH FRAME_2_DATA_02
	.LOW FRAME_2_DATA_02
	.HIGH FRAME_1_DATA_03
	.LOW FRAME_1_DATA_03
	.db #$00
ANIM_FRAME_FILE_PTR_02:
	.HIGH FRAME_2_DATA_00
	.LOW FRAME_2_DATA_00
	.HIGH FRAME_13_DATA_01
	.LOW FRAME_13_DATA_01
	.HIGH FRAME_2_DATA_02
	.LOW FRAME_2_DATA_02
	.HIGH FRAME_2_DATA_03
	.LOW FRAME_2_DATA_03
	.db #$00
ANIM_FRAME_FILE_PTR_03:
	.HIGH FRAME_3_DATA_00
	.LOW FRAME_3_DATA_00
	.HIGH FRAME_14_DATA_05
	.LOW FRAME_14_DATA_05
	.HIGH FRAME_3_DATA_02
	.LOW FRAME_3_DATA_02
	.HIGH FRAME_3_DATA_03
	.LOW FRAME_3_DATA_03
	.db #$00
ANIM_FRAME_FILE_PTR_04:
	.HIGH FRAME_4_DATA_00
	.LOW FRAME_4_DATA_00
	.HIGH FRAME_14_DATA_05
	.LOW FRAME_14_DATA_05
	.HIGH FRAME_4_DATA_02
	.LOW FRAME_4_DATA_02
	.HIGH FRAME_4_DATA_03
	.LOW FRAME_4_DATA_03
	.db #$00
ANIM_FRAME_FILE_PTR_05:
	.HIGH FRAME_5_DATA_00
	.LOW FRAME_5_DATA_00
	.HIGH FRAME_14_DATA_05
	.LOW FRAME_14_DATA_05
	.HIGH FRAME_5_DATA_02
	.LOW FRAME_5_DATA_02
	.db #$04 ;flag?
	.db #$F0 ;or bad?
	.db #$00
ANIM_FRAME_FILE_PTR_06:
	.HIGH FRAME_6_DATA_00
	.LOW FRAME_6_DATA_00
	.HIGH FRAME_13_DATA_01
	.LOW FRAME_13_DATA_01
	.HIGH FRAME_8_DATA_06
	.LOW FRAME_8_DATA_06
	.HIGH FRAME_6_DATA_03
	.LOW FRAME_6_DATA_03
	.db #$00
ANIM_FRAME_FILE_PTR_07:
	.HIGH FRAME_7_DATA_00
	.LOW FRAME_7_DATA_00
	.HIGH FRAME_8_DATA_01
	.LOW FRAME_8_DATA_01
	.HIGH FRAME_8_DATA_02
	.LOW FRAME_8_DATA_02
	.HIGH FRAME_7_DATA_03
	.LOW FRAME_7_DATA_03
	.HIGH FRAME_8_DATA_04
	.LOW FRAME_8_DATA_04
	.HIGH FRAME_7_DATA_05
	.LOW FRAME_7_DATA_05
	.HIGH FRAME_7_DATA_06
	.LOW FRAME_7_DATA_06
	.HIGH FRAME_7_DATA_07
	.LOW FRAME_7_DATA_07
	.db #$00
ANIM_FRAME_FILE_PTR_08:
	.HIGH FRAME_8_DATA_00
	.LOW FRAME_8_DATA_00
	.HIGH FRAME_8_DATA_01
	.LOW FRAME_8_DATA_01
	.HIGH FRAME_8_DATA_02
	.LOW FRAME_8_DATA_02
	.HIGH FRAME_17_DATA_09
	.LOW FRAME_17_DATA_09
	.HIGH FRAME_8_DATA_04
	.LOW FRAME_8_DATA_04
	.HIGH FRAME_8_DATA_05
	.LOW FRAME_8_DATA_05
	.HIGH FRAME_8_DATA_06
	.LOW FRAME_8_DATA_06
	.HIGH FRAME_8_DATA_07
	.LOW FRAME_8_DATA_07
	.db #$00
ANIM_FRAME_FILE_PTR_0A:
	.HIGH FRAME_A_DATA_00
	.LOW FRAME_A_DATA_00
	.HIGH FRAME_A_DATA_01
	.LOW FRAME_A_DATA_01
	.HIGH FRAME_A_DATA_02
	.LOW FRAME_A_DATA_02
	.HIGH FRAME_A_DATA_03
	.LOW FRAME_A_DATA_03
	.HIGH FRAME_A_DATA_04
	.LOW FRAME_A_DATA_04
	.db #$08
	.db #$04
	.db #$00
ANIM_FRAME_FILE_PTR_0B:
	.HIGH FRAME_B_DATA_00
	.LOW FRAME_B_DATA_00
	.HIGH FRAME_B_DATA_01
	.LOW FRAME_B_DATA_01
	.HIGH FRAME_B_DATA_02
	.LOW FRAME_B_DATA_02
	.HIGH FRAME_B_DATA_03
	.LOW FRAME_B_DATA_03
	.HIGH FRAME_B_DATA_04
	.LOW FRAME_B_DATA_04
	.db #$08
	.db #$F4
	.db #$00
ANIM_FRAME_FILE_PTR_09:
	.HIGH FRAME_9_DATA_00
	.LOW FRAME_9_DATA_00
	.HIGH FRAME_13_DATA_01
	.LOW FRAME_13_DATA_01
	.HIGH FRAME_9_DATA_02
	.LOW FRAME_9_DATA_02
	.db #$08
	.db #$FA
	.db #$00
ANIM_FRAME_FILE_PTR_0C:
	.HIGH FRAME_F_DATA_00 ;Dog first file.
	.LOW FRAME_F_DATA_00
	.HIGH FRAME_10_DATA_01 ;this might be wrong?
	.LOW FRAME_10_DATA_01
	.HIGH FRAME_10_DATA_02
	.LOW FRAME_10_DATA_02
	.HIGH FRAME_11_DATA_05
	.LOW FRAME_11_DATA_05
	.HIGH FRAME_10_DATA_04
	.LOW FRAME_10_DATA_04
	.HIGH FRAME_10_DATA_05
	.LOW FRAME_10_DATA_05
	.db #$00
ANIM_FRAME_FILE_PTR_0D:
	.HIGH FRAME_F_DATA_00
	.LOW FRAME_F_DATA_00
	.HIGH FRAME_10_DATA_01
	.LOW FRAME_10_DATA_01
	.HIGH FRAME_0D_DATA_02
	.LOW FRAME_0D_DATA_02
	.HIGH FRAME_11_DATA_05
	.LOW FRAME_11_DATA_05
	.HIGH FRAME_F_DATA_04
	.LOW FRAME_F_DATA_04
	.HIGH FRAME_11_DATA_07
	.LOW FRAME_11_DATA_07
	.db #$00
ANIM_FRAME_FILE_PTR_0E:
	.HIGH FRAME_F_DATA_00
	.LOW FRAME_F_DATA_00
	.HIGH FRAME_10_DATA_01
	.LOW FRAME_10_DATA_01
	.HIGH FRAME_E_DATA_02
	.LOW FRAME_E_DATA_02
	.HIGH FRAME_11_DATA_05
	.LOW FRAME_11_DATA_05
	.HIGH FRAME_10_DATA_04
	.LOW FRAME_10_DATA_04
	.HIGH FRAME_10_DATA_05
	.LOW FRAME_10_DATA_05
	.db #$00
ANIM_FRAME_FILE_PTR_0F:
	.HIGH FRAME_F_DATA_00
	.LOW FRAME_F_DATA_00
	.HIGH FRAME_10_DATA_01
	.LOW FRAME_10_DATA_01
	.HIGH FRAME_F_DATA_02
	.LOW FRAME_F_DATA_02
	.HIGH FRAME_11_DATA_05
	.LOW FRAME_11_DATA_05
	.HIGH FRAME_F_DATA_04
	.LOW FRAME_F_DATA_04
	.HIGH FRAME_11_DATA_07
	.LOW FRAME_11_DATA_07
	.db #$00
ANIM_FRAME_FILE_PTR_10:
	.HIGH FRAME_10_DATA_00
	.LOW FRAME_10_DATA_00
	.HIGH FRAME_10_DATA_01
	.LOW FRAME_10_DATA_01
	.HIGH FRAME_10_DATA_02
	.LOW FRAME_10_DATA_02
	.HIGH FRAME_11_DATA_05
	.LOW FRAME_11_DATA_05
	.HIGH FRAME_10_DATA_04
	.LOW FRAME_10_DATA_04
	.HIGH FRAME_10_DATA_05
	.LOW FRAME_10_DATA_05
	.db #$00
ANIM_FRAME_FILE_PTR_16:
	.HIGH FRAME_16_DATA_00
	.LOW FRAME_16_DATA_00
	.HIGH FRAME_14_DATA_05
	.LOW FRAME_14_DATA_05
	.HIGH FRAME_16_DATA_02
	.LOW FRAME_16_DATA_02
	.db #$10
	.db #$F8
	.HIGH FRAME_16_DATA_04
	.LOW FRAME_16_DATA_04
	.HIGH FRAME_14_DATA_01
	.LOW FRAME_14_DATA_01
	.HIGH FRAME_16_DATA_06
	.LOW FRAME_16_DATA_06
	.HIGH FRAME_17_DATA_07
	.LOW FRAME_17_DATA_07
	.HIGH FRAME_16_DATA_08
	.LOW FRAME_16_DATA_08
	.HIGH FRAME_17_DATA_09
	.LOW FRAME_17_DATA_09
	.db #$00
ANIM_FRAME_FILE_PTR_17:
	.HIGH FRAME_17_DATA_00
	.LOW FRAME_17_DATA_00
	.HIGH FRAME_14_DATA_05
	.LOW FRAME_14_DATA_05
	.HIGH FRAME_17_DATA_02
	.LOW FRAME_17_DATA_02
	.db #$10
	.db #$F8
	.HIGH FRAME_17_DATA_04
	.LOW FRAME_17_DATA_04
	.HIGH FRAME_14_DATA_01
	.LOW FRAME_14_DATA_01
	.HIGH FRAME_17_DATA_06
	.LOW FRAME_17_DATA_06
	.HIGH FRAME_17_DATA_07
	.LOW FRAME_17_DATA_07
	.HIGH FRAME_17_DATA_08
	.LOW FRAME_17_DATA_08
	.HIGH FRAME_17_DATA_09
	.LOW FRAME_17_DATA_09
	.db #$00
ANIM_FRAME_FILE_PTR_12:
	.HIGH FRAME_12_DATA_00
	.LOW FRAME_12_DATA_00
	.HIGH FRAME_11_DATA_01
	.LOW FRAME_11_DATA_01
	.HIGH FRAME_12_DATA_02
	.LOW FRAME_12_DATA_02
	.HIGH FRAME_12_DATA_03
	.LOW FRAME_12_DATA_03
	.HIGH FRAME_12_DATA_04
	.LOW FRAME_12_DATA_04
	.HIGH FRAME_13_DATA_01
	.LOW FRAME_13_DATA_01
	.db #$00
ANIM_FRAME_FILE_PTR_13:
	.HIGH FRAME_13_DATA_00
	.LOW FRAME_13_DATA_00
	.HIGH FRAME_13_DATA_01
	.LOW FRAME_13_DATA_01
	.db #$00
ANIM_FRAME_FILE_PTR_14:
	.HIGH FRAME_14_DATA_00
	.LOW FRAME_14_DATA_00
	.HIGH FRAME_14_DATA_01
	.LOW FRAME_14_DATA_01
	.HIGH FRAME_14_DATA_02
	.LOW FRAME_14_DATA_02
	.db #$03
	.db #$F0
	.HIGH FRAME_14_DATA_04
	.LOW FRAME_14_DATA_04
	.HIGH FRAME_14_DATA_05
	.LOW FRAME_14_DATA_05
	.HIGH FRAME_15_DATA_08
	.LOW FRAME_15_DATA_08
	.db #$10
	.db #$F8
	.HIGH FRAME_15_DATA_02
	.LOW FRAME_15_DATA_02
	.HIGH FRAME_15_DATA_03
	.LOW FRAME_15_DATA_03
	.HIGH FRAME_14_DATA_0A
	.LOW FRAME_14_DATA_0A
	.db #$04
	.db #$18
	.db #$00
ANIM_FRAME_FILE_PTR_15:
	.HIGH FRAME_15_DATA_00
	.LOW FRAME_15_DATA_00
	.HIGH FRAME_15_DATA_01
	.LOW FRAME_15_DATA_01
	.HIGH FRAME_15_DATA_02
	.LOW FRAME_15_DATA_02
	.HIGH FRAME_15_DATA_03
	.LOW FRAME_15_DATA_03
	.HIGH FRAME_15_DATA_04
	.LOW FRAME_15_DATA_04
	.db #$04
	.db #$E0
	.HIGH FRAME_15_DATA_06
	.LOW FRAME_15_DATA_06
	.db #$04
	.db #$18
	.HIGH FRAME_15_DATA_08
	.LOW FRAME_15_DATA_08
	.db #$10
	.db #$F8
	.db #$00
ANIM_FRAME_FILE_PTR_11:
	.HIGH FRAME_11_DATA_00
	.LOW FRAME_11_DATA_00
	.HIGH FRAME_11_DATA_01
	.LOW FRAME_11_DATA_01
	.HIGH FRAME_11_DATA_02
	.LOW FRAME_11_DATA_02
	.db #$00
	.db #$00
	.HIGH FRAME_11_DATA_04
	.LOW FRAME_11_DATA_04
	.HIGH FRAME_11_DATA_05
	.LOW FRAME_11_DATA_05
	.HIGH FRAME_11_DATA_06
	.LOW FRAME_11_DATA_06
	.HIGH FRAME_11_DATA_07
	.LOW FRAME_11_DATA_07
	.db #$00
ANIM_FRAME_FILE_PTR_18:
	.HIGH FRAME_18_DATA_00
	.LOW FRAME_18_DATA_00
	.HIGH FRAME_18_DATA_01
	.LOW FRAME_18_DATA_01
	.db #$00
ANIM_FRAME_FILE_PTR_19:
	.HIGH ANIM_FRAME_FILE_PTR_01
	.LOW ANIM_FRAME_FILE_PTR_01
	.HIGH FRAME_19_DATA_01
	.LOW FRAME_19_DATA_01
	.HIGH FRAME_1B_DATA_02
	.LOW FRAME_1B_DATA_02
	.HIGH FRAME_19_DATA_03
	.LOW FRAME_19_DATA_03
	.HIGH FRAME_1A_DATA_04
	.LOW FRAME_1A_DATA_04
	.HIGH FRAME_19_DATA_05
	.LOW FRAME_19_DATA_05
	.HIGH FRAME_1A_DATA_06
	.LOW FRAME_1A_DATA_06
	.HIGH FRAME_19_DATA_07
	.LOW FRAME_19_DATA_07
	.db #$00
ANIM_FRAME_FILE_PTR_1A:
	.HIGH ANIM_FRAME_FILE_PTR_01
	.LOW ANIM_FRAME_FILE_PTR_01
	.HIGH FRAME_1C_DATA_01
	.LOW FRAME_1C_DATA_01
	.HIGH FRAME_1B_DATA_02
	.LOW FRAME_1B_DATA_02
	.HIGH FRAME_1C_DATA_05
	.LOW FRAME_1C_DATA_05
	.HIGH FRAME_1A_DATA_04
	.LOW FRAME_1A_DATA_04
	.HIGH FRAME_1A_DATA_05
	.LOW FRAME_1A_DATA_05
	.HIGH FRAME_1A_DATA_06
	.LOW FRAME_1A_DATA_06
	.HIGH FRAME_1A_DATA_07
	.LOW FRAME_1A_DATA_07
	.db #$00
ANIM_FRAME_FILE_PTR_1B:
	.HIGH ANIM_FRAME_FILE_PTR_01
	.LOW ANIM_FRAME_FILE_PTR_01
	.HIGH FRAME_24_DATA_01
	.LOW FRAME_24_DATA_01
	.HIGH FRAME_1B_DATA_02
	.LOW FRAME_1B_DATA_02
	.HIGH FRAME_1D_DATA_03
	.LOW FRAME_1D_DATA_03
	.db #$00
ANIM_FRAME_FILE_PTR_1C:
	.HIGH FRAME_1E_DATA_00
	.LOW FRAME_1E_DATA_00
	.HIGH FRAME_1C_DATA_01
	.LOW FRAME_1C_DATA_01
	.HIGH FRAME_1E_DATA_00
	.LOW FRAME_1E_DATA_00
	.HIGH FRAME_1E_DATA_01
	.LOW FRAME_1E_DATA_01
	.HIGH FRAME_1E_DATA_02
	.LOW FRAME_1E_DATA_02
	.HIGH FRAME_1C_DATA_05
	.LOW FRAME_1C_DATA_05
	.db #$00
ANIM_FRAME_FILE_PTR_1D:
	.HIGH FRAME_1E_DATA_00
	.LOW FRAME_1E_DATA_00
	.HIGH FRAME_24_DATA_01
	.LOW FRAME_24_DATA_01
	.HIGH FRAME_1E_DATA_02
	.LOW FRAME_1E_DATA_02
	.HIGH FRAME_1D_DATA_03
	.LOW FRAME_1D_DATA_03
	.db #$00
ANIM_FRAME_FILE_PTR_1E:
	.HIGH FRAME_1E_DATA_00
	.LOW FRAME_1E_DATA_00
	.HIGH FRAME_1E_DATA_01
	.LOW FRAME_1E_DATA_01
	.HIGH FRAME_1E_DATA_02
	.LOW FRAME_1E_DATA_02
	.HIGH FRAME_1E_DATA_03
	.LOW FRAME_1E_DATA_03
	.db #$00
ANIM_FRAME_FILE_PTR_1F:
	.HIGH FRAME_1F_DATA_00
	.LOW FRAME_1F_DATA_00
	.HIGH FRAME_23_DATA_01
	.LOW FRAME_23_DATA_01
	.db #$00
ANIM_FRAME_FILE_PTR_20:
	.HIGH FRAME_21_DATA_00
	.LOW FRAME_21_DATA_00
	.HIGH FRAME_23_DATA_01
	.LOW FRAME_23_DATA_01
	.HIGH FRAME_21_DATA_00
	.LOW FRAME_21_DATA_00
	.HIGH FRAME_20_DATA_03
	.LOW FRAME_20_DATA_03
	.db #$00
ANIM_FRAME_FILE_PTR_21:
	.HIGH FRAME_21_DATA_00
	.LOW FRAME_21_DATA_00
	.HIGH FRAME_23_DATA_01
	.LOW FRAME_23_DATA_01
	.db #$00
ANIM_FRAME_FILE_PTR_22:
	.HIGH FRAME_23_DATA_00
	.LOW FRAME_23_DATA_00
	.HIGH FRAME_23_DATA_01
	.LOW FRAME_23_DATA_01
	.HIGH FRAME_23_DATA_00
	.LOW FRAME_23_DATA_00
	.HIGH FRAME_22_DATA_03
	.LOW FRAME_22_DATA_03
	.db #$00
ANIM_FRAME_FILE_PTR_23:
	.HIGH FRAME_23_DATA_00
	.LOW FRAME_23_DATA_00
	.HIGH FRAME_23_DATA_01
	.LOW FRAME_23_DATA_01
	.db #$00
ANIM_FRAME_FILE_PTR_24:
	.HIGH FRAME_24_DATA_00
	.LOW FRAME_24_DATA_00
	.HIGH FRAME_24_DATA_01
	.LOW FRAME_24_DATA_01
	.db #$00
SPR_X/Y_OFFSETS_ARRAY:
	.db #$00 ;Group 0. Format [OffX,OffY]
	.db #$00
	.db #$08
	.db #$00
	.db #$10
	.db #$00
	.db #$18
	.db #$00
	.db #$00
	.db #$08
	.db #$08
	.db #$08
	.db #$10
	.db #$08
	.db #$18
	.db #$08 ;Group 1.
	.db #$00
	.db #$00
	.db #$00
	.db #$08
	.db #$00
	.db #$10
	.db #$00
	.db #$18
	.db #$08
	.db #$00
	.db #$08
	.db #$08
	.db #$08
	.db #$10
	.db #$08
	.db #$18
	.db #$10
	.db #$00
	.db #$10
	.db #$08
	.db #$10
	.db #$10
	.db #$10
	.db #$18
	.db #$18
	.db #$00
	.db #$18
	.db #$08
	.db #$18
	.db #$10
	.db #$18
	.db #$18
	.db #$08
	.db #$20
	.db #$10
	.db #$20
	.db #$18
	.db #$20
	.db #$18
	.db #$20
	.db #$00 ;Group 3
	.db #$00
	.db #$08
	.db #$00
	.db #$10
	.db #$00
	.db #$00
	.db #$08
	.db #$08
	.db #$08
	.db #$10
	.db #$08
	.db #$00 ;Group 4, default if not given.
	.db #$00
	.db #$08
	.db #$00
	.db #$00
	.db #$18
	.db #$08
	.db #$18
FRAME_0_DATA_00:
	.db #$01
	.db #$FD
	.db #$00
	.db #$00
	.db #$01
	.db #$02
	.db #$FD
	.db #$01
	.db #$03
	.db #$FD
	.db #$00
	.db #$04
	.db #$05
	.db #$06
	.db #$07
	.db #$08
	.db #$09
	.db #$0A
	.db #$FE
	.db #$FD
	.db #$01
	.db #$0B
	.db #$0C
	.db #$FF
FRAME_1_DATA_00:
	.db #$01
	.db #$FD
	.db #$00
	.db #$FE
	.db #$FE
	.db #$0D
	.db #$FE
	.db #$FD
	.db #$00
	.db #$0F
	.db #$10
	.db #$11
	.db #$FE
	.db #$12
	.db #$13
	.db #$14
	.db #$15
	.db #$FD
	.db #$01
	.db #$16
	.db #$17
	.db #$FF
FRAME_2_DATA_00:
	.db #$01
	.db #$FD
	.db #$00
	.db #$FE
	.db #$FE
	.db #$18
	.db #$FE
	.db #$FD
	.db #$00
	.db #$1A
	.db #$1B
	.db #$1C
	.db #$FE
	.db #$1D
	.db #$1E
	.db #$1F
	.db #$FE
	.db #$FD
	.db #$01
	.db #$20
	.db #$21
	.db #$FD
	.db #$00
	.db #$22
	.db #$FF
FRAME_3_DATA_00:
	.db #$00
	.db #$FD
	.db #$00
	.db #$25
	.db #$26
	.db #$27
	.db #$FD
	.db #$01
	.db #$28
	.db #$FD
	.db #$40
	.db #$25
	.db #$26
	.db #$27
	.db #$FD
	.db #$41
	.db #$28
	.db #$FF
FRAME_3_DATA_02:
	.db #$03
	.db #$FD
	.db #$00
	.db #$23
	.db #$24
	.db #$FD
	.db #$40
	.db #$23
	.db #$24
	.db #$FF
FRAME_4_DATA_00:
	.db #$00
	.db #$FD
	.db #$00
	.db #$2A
	.db #$2B
	.db #$2C
	.db #$FD
	.db #$01
	.db #$2D
	.db #$FD
	.db #$40
	.db #$2A
	.db #$2B
	.db #$2C
	.db #$FD
	.db #$41
	.db #$2D
	.db #$FF
FRAME_4_DATA_02:
	.db #$03
	.db #$FD
	.db #$00
	.db #$29
	.db #$FE
	.db #$FD
	.db #$40
	.db #$29
	.db #$FF
FRAME_5_DATA_00:
	.db #$00
	.db #$FD
	.db #$00
	.db #$2F
	.db #$30
	.db #$31
	.db #$FD
	.db #$01
	.db #$32
	.db #$FD
	.db #$40
	.db #$2F
	.db #$30
	.db #$31
	.db #$FD
	.db #$41
	.db #$32
	.db #$FF
FRAME_5_DATA_02:
	.db #$03
	.db #$FD
	.db #$00
	.db #$2E
	.db #$FE
	.db #$FD
	.db #$40
	.db #$2E
	.db #$FF
FRAME_9_DATA_00:
	.db #$01
	.db #$FD
	.db #$00
	.db #$33
	.db #$34
	.db #$35
	.db #$FD
	.db #$01
	.db #$36
	.db #$FD
	.db #$00
	.db #$37
	.db #$38
	.db #$39
	.db #$FD
	.db #$01
	.db #$3A
	.db #$FD
	.db #$00
	.db #$FE
	.db #$3B
	.db #$3C
	.db #$3D
	.db #$FF
FRAME_9_DATA_02:
	.db #$01
	.db #$FD
	.db #$01
	.db #$3E
	.db #$3F
	.db #$FF
FRAME_6_DATA_00:
	.db #$01
	.db #$FD
	.db #$00
	.db #$FE
	.db #$40
	.db #$41
	.db #$FE
	.db #$FE
	.db #$42
	.db #$43
	.db #$44
	.db #$45
	.db #$46
	.db #$47
	.db #$48
	.db #$FE
	.db #$FD
	.db #$01
	.db #$49
	.db #$FF
FRAME_8_DATA_06:
	.db #$00
	.db #$FD
	.db #$01
	.db #$4A
	.db #$FF
FRAME_7_DATA_06:
	.db #$00
	.db #$FD
	.db #$01
	.db #$F6
	.db #$FF
FRAME_2_DATA_02:
	.db #$00
	.db #$FD
	.db #$01
	.db #$03
	.db #$FF
FRAME_7_DATA_00:
	.db #$02
	.db #$FD
	.db #$01
	.db #$9F
	.db #$A0
	.db #$A1
	.db #$A2
	.db #$A3
	.db #$FF
FRAME_8_DATA_02:
	.db #$00
	.db #$FD
	.db #$01
	.db #$45
	.db #$FF
FRAME_8_DATA_04:
	.db #$00
	.db #$FD
	.db #$00
	.db #$44
	.db #$48
	.db #$FF
FRAME_8_DATA_00:
	.db #$02
	.db #$FD
	.db #$01
	.db #$A4
	.db #$A5
	.db #$A6
	.db #$A7
	.db #$A8
	.db #$A9
	.db #$FF
FRAME_A_DATA_00:
	.db #$00
	.db #$FD
	.db #$01
	.db #$AB
	.db #$AC
	.db #$FE
	.db #$FE
	.db #$0E
	.db #$19
	.db #$AA
	.db #$FD
	.db #$80
	.db #$E5
	.db #$FF
FRAME_A_DATA_02:
	.db #$00
	.db #$FD
	.db #$81
	.db #$EA
	.db #$FF
FRAME_A_DATA_04:
	.db #$00
	.db #$FD
	.db #$81
	.db #$E9
	.db #$FF
FRAME_B_DATA_00:
	.db #$00
	.db #$FD
	.db #$41
	.db #$0E
	.db #$19
	.db #$AA
	.db #$FD
	.db #$C0
	.db #$E5
	.db #$FD
	.db #$41
	.db #$AB
	.db #$AC
	.db #$FF
FRAME_B_DATA_02:
	.db #$00
	.db #$FD
	.db #$C1
	.db #$EA
	.db #$FF
FRAME_B_DATA_04:
	.db #$00
	.db #$FD
	.db #$C1
	.db #$E9
	.db #$FF
FRAME_10_DATA_02:
	.db #$01
	.db #$FD
	.db #$03
	.db #$52
	.db #$53
	.db #$54
	.db #$FE
	.db #$55
	.db #$56
	.db #$56
	.db #$57
	.db #$5A
	.db #$5B
	.db #$5C
	.db #$5D
	.db #$61
	.db #$62
	.db #$63
	.db #$64
	.db #$58
	.db #$5E
	.db #$65
	.db #$FF
FRAME_0D_DATA_02:
	.db #$01
	.db #$FD
	.db #$03
	.db #$52
	.db #$6A
	.db #$54
	.db #$FE
	.db #$55
	.db #$6B
	.db #$56
	.db #$57
	.db #$6C
	.db #$6D
	.db #$6E
	.db #$6F
	.db #$70
	.db #$71
	.db #$72
	.db #$73
	.db #$58
	.db #$5E
	.db #$74
	.db #$FF
FRAME_E_DATA_02:
	.db #$01
	.db #$FD
	.db #$03
	.db #$75
	.db #$53
	.db #$54
	.db #$FE
	.db #$76
	.db #$56
	.db #$56
	.db #$57
	.db #$77
	.db #$78
	.db #$79
	.db #$7A
	.db #$7B
	.db #$7C
	.db #$7D
	.db #$7E
	.db #$58
	.db #$5E
	.db #$7F
	.db #$FF
FRAME_F_DATA_02:
	.db #$01
	.db #$FD
	.db #$03
	.db #$52
	.db #$6A
	.db #$54
	.db #$FE
	.db #$76
	.db #$6B
	.db #$56
	.db #$57
	.db #$80
	.db #$81
	.db #$82
	.db #$83
	.db #$85
	.db #$86
	.db #$87
	.db #$88
	.db #$58
	.db #$84
	.db #$89
	.db #$FF
FRAME_F_DATA_00:
	.db #$02 ;Obj index.
	.db #$FD
	.db #$02
	.db #$59
	.db #$5F
	.db #$66
	.db #$FE
	.db #$60
	.db #$67
	.db #$FF
FRAME_10_DATA_00:
	.db #$02
	.db #$FD
	.db #$02
	.db #$4B
	.db #$4C
	.db #$4D
	.db #$4E
	.db #$4F
	.db #$50
	.db #$FF
FRAME_16_DATA_00:
	.db #$00
	.db #$FD
	.db #$02
	.db #$CD
	.db #$CE
	.db #$CF
	.db #$FD
	.db #$03
	.db #$D0
	.db #$FD
	.db #$42
	.db #$CD
	.db #$CE
	.db #$FD
	.db #$02
	.db #$D2
	.db #$FD
	.db #$03
	.db #$D3
	.db #$FF
FRAME_16_DATA_02:
	.db #$01
	.db #$FD
	.db #$03
	.db #$D1
	.db #$FD
	.db #$43
	.db #$D1
	.db #$FF
FRAME_16_DATA_04:
	.db #$03
	.db #$FD
	.db #$02
	.db #$C9
	.db #$CA
	.db #$FF
FRAME_16_DATA_06:
	.db #$00
	.db #$FD
	.db #$02
	.db #$D4
	.db #$FF
FRAME_16_DATA_08:
	.db #$03
	.db #$FD
	.db #$03
	.db #$CB
	.db #$CC
	.db #$D5
	.db #$D6
	.db #$FF
FRAME_17_DATA_00:
	.db #$00
	.db #$FD
	.db #$02
	.db #$D7
	.db #$D8
	.db #$D9
	.db #$FD
	.db #$03
	.db #$D0
	.db #$FD
	.db #$42
	.db #$D7
	.db #$D8
	.db #$FD
	.db #$02
	.db #$DA
	.db #$FD
	.db #$03
	.db #$D3
	.db #$FF
FRAME_17_DATA_02:
	.db #$01
	.db #$FD
	.db #$03
	.db #$D1
	.db #$FD
	.db #$43
	.db #$D1
	.db #$FF
FRAME_17_DATA_04:
	.db #$03
	.db #$FD
	.db #$02
	.db #$C9
	.db #$CA
	.db #$FF
FRAME_17_DATA_06:
	.db #$00
	.db #$FD
	.db #$02
	.db #$D4
	.db #$FF
FRAME_17_DATA_08:
	.db #$03
	.db #$FD
	.db #$03
	.db #$CB
	.db #$CC
	.db #$D5
	.db #$D6
	.db #$FF
FRAME_12_DATA_00:
	.db #$02
	.db #$FD
	.db #$03
	.db #$B3
	.db #$B4
	.db #$FE
	.db #$B9
	.db #$BA
	.db #$FF
FRAME_12_DATA_02:
	.db #$00
	.db #$FD
	.db #$02
	.db #$BF
	.db #$FF
FRAME_12_DATA_04:
	.db #$01
	.db #$FD
	.db #$03
	.db #$FE
	.db #$AF
	.db #$B5
	.db #$FD
	.db #$02
	.db #$BB
	.db #$FD
	.db #$03
	.db #$FE
	.db #$B0
	.db #$B6
	.db #$BC
	.db #$AD
	.db #$B1
	.db #$B7
	.db #$BD
	.db #$AE
	.db #$B2
	.db #$B8
	.db #$BE
	.db #$C0
	.db #$FF
FRAME_13_DATA_00:
	.db #$01
	.db #$FD
	.db #$03
	.db #$FE
	.db #$FE
	.db #$C1
	.db #$C2
	.db #$C3
	.db #$C4
	.db #$C5
	.db #$C6
	.db #$AD
	.db #$B1
	.db #$B7
	.db #$C7
	.db #$AE
	.db #$B2
	.db #$B8
	.db #$BE
	.db #$FE
	.db #$C8
	.db #$FF
FRAME_14_DATA_00:
	.db #$00
	.db #$FD
	.db #$02
	.db #$C9
	.db #$CA
	.db #$FF
FRAME_14_DATA_02:
	.db #$00
	.db #$FD
	.db #$03
	.db #$DB
	.db #$DC
	.db #$FF
FRAME_14_DATA_04:
	.db #$00
	.db #$FD
	.db #$02
	.db #$DD
	.db #$DE
	.db #$FD
	.db #$03
	.db #$DF
	.db #$E0
	.db #$FF
FRAME_15_DATA_08:
	.db #$01
	.db #$FD
	.db #$03
	.db #$D1
	.db #$FD
	.db #$43
	.db #$D1
	.db #$FF
FRAME_15_DATA_02:
	.db #$01
	.db #$FD
	.db #$42
	.db #$DD
	.db #$FD
	.db #$02
	.db #$D4
	.db #$FD
	.db #$00
	.db #$E5
	.db #$FD
	.db #$01
	.db #$E9
	.db #$FD
	.db #$42
	.db #$DE
	.db #$FD
	.db #$03
	.db #$E2
	.db #$E6
	.db #$FE
	.db #$E1
	.db #$E3
	.db #$FD
	.db #$01
	.db #$E7
	.db #$FE
	.db #$FD
	.db #$43
	.db #$E0
	.db #$FD
	.db #$01
	.db #$E4
	.db #$E8
	.db #$FF
FRAME_14_DATA_0A:
	.db #$00
	.db #$FD
	.db #$01
	.db #$EA
	.db #$FF
FRAME_15_DATA_00:
	.db #$01
	.db #$FD
	.db #$41
	.db #$E9
	.db #$FD
	.db #$40
	.db #$E5
	.db #$FD
	.db #$42
	.db #$D4
	.db #$FD
	.db #$02
	.db #$DD
	.db #$FE
	.db #$FD
	.db #$43
	.db #$E6
	.db #$E2
	.db #$FD
	.db #$02
	.db #$DE
	.db #$FE
	.db #$FD
	.db #$41
	.db #$E7
	.db #$FD
	.db #$43
	.db #$E3
	.db #$E1
	.db #$FE
	.db #$FD
	.db #$41
	.db #$E8
	.db #$E4
	.db #$FD
	.db #$03
	.db #$E0
	.db #$FF
FRAME_15_DATA_04:
	.db #$00
	.db #$FD
	.db #$41
	.db #$EA
	.db #$FF
FRAME_15_DATA_06:
	.db #$00
	.db #$FD
	.db #$01
	.db #$EA
	.db #$FF
FRAME_11_DATA_00:
	.db #$01
	.db #$FD
	.db #$03
	.db #$8A
	.db #$8B
	.db #$FE
	.db #$FE
	.db #$8C
	.db #$FD
	.db #$02
	.db #$8D
	.db #$8E
	.db #$FE
	.db #$8F
	.db #$90
	.db #$91
	.db #$92
	.db #$93
	.db #$94
	.db #$95
	.db #$96
	.db #$FF
FRAME_11_DATA_02:
	.db #$01
	.db #$FD
	.db #$03
	.db #$97
	.db #$FD
	.db #$02
	.db #$98
	.db #$FD
	.db #$03
	.db #$99
	.db #$FE
	.db #$9A
	.db #$9B
	.db #$9C
	.db #$FF
FRAME_11_DATA_04:
	.db #$01
	.db #$FD
	.db #$03
	.db #$52
	.db #$53
	.db #$54
	.db #$FE
	.db #$55
	.db #$56
	.db #$56
	.db #$FE
	.db #$5A
	.db #$5B
	.db #$5C
	.db #$FE
	.db #$61
	.db #$62
	.db #$63
	.db #$FF
FRAME_10_DATA_04:
	.db #$01
	.db #$FD
	.db #$03
	.db #$51
	.db #$FF
FRAME_F_DATA_04:
	.db #$02
	.db #$FD
	.db #$03
	.db #$68
	.db #$69
	.db #$FF
FRAME_11_DATA_06:
	.db #$00
	.db #$FD
	.db #$03
	.db #$9D
	.db #$9E
	.db #$FF
FRAME_18_DATA_00:
	.db #$01
	.db #$FD
FRAME_11_DATA_01:
	.db #$00
	.db #$F2
	.db #$F3
	.db #$FD
	.db #$40
	.db #$F2
	.db #$FE
	.db #$FD
	.db #$00
	.db #$F4
	.db #$F5
	.db #$FD
	.db #$40
	.db #$F4
	.db #$FF
ANIM_FRAME_FILE_PTR_01:
	.db #$00
	.db #$FD
	.db #$00
	.db #$EB
	.db #$FF
FRAME_1B_DATA_02:
	.db #$00
	.db #$FD
	.db #$40
	.db #$EB
	.db #$FF
FRAME_1A_DATA_04:
	.db #$00
	.db #$FD
	.db #$00
	.db #$F3
	.db #$FF
FRAME_1A_DATA_06:
	.db #$00
	.db #$FD
	.db #$00
	.db #$F5
	.db #$FF
FRAME_1E_DATA_00:
	.db #$01
	.db #$FD
	.db #$00
	.db #$EC
	.db #$FF
FRAME_1E_DATA_02:
	.db #$01
	.db #$FD
	.db #$40
	.db #$EC
	.db #$FF
FRAME_1F_DATA_00:
	.db #$01
	.db #$FD
	.db #$00
	.db #$EF
	.db #$FF
FRAME_21_DATA_00:
	.db #$00
	.db #$FD
	.db #$00
	.db #$F0
	.db #$FF
FRAME_23_DATA_00:
	.db #$00
	.db #$FD
	.db #$00
	.db #$F1
	.db #$FF
FRAME_24_DATA_00:
	.db #$01
	.db #$FD
	.db #$00
	.db #$ED
	.db #$EE
	.db #$FF
DUCK_HUNT_PPU_FILE:
	.db #$23
	.db #$00
	.db #$60
	.db #$50
	.db #$23
	.db #$20
	.db #$60
	.db #$50
	.db #$23
	.db #$40
	.db #$60
	.db #$50
	.db #$23
	.db #$60
	.db #$60
	.db #$50
	.db #$23
	.db #$80
	.db #$60
	.db #$50
	.db #$23
	.db #$A0
	.db #$60
	.db #$50
	.db #$22
	.db #$40
	.db #$20
	.db #$3D
	.db #$3E
	.db #$3F
	.db #$40
	.db #$56
	.db #$57
	.db #$D1
	.db #$D2
	.db #$3A
	.db #$3B
	.db #$3C
	.db #$3D
	.db #$3E
	.db #$3F
	.db #$40
	.db #$39
	.db #$3A
	.db #$3B
	.db #$3C
	.db #$3D
	.db #$3E
	.db #$3F
	.db #$40
	.db #$D2
	.db #$30
	.db #$31
	.db #$32
	.db #$33
	.db #$39
	.db #$3A
	.db #$3B
	.db #$3C
	.db #$22
	.db #$60
	.db #$20
	.db #$95
	.db #$96
	.db #$97
	.db #$98
	.db #$58
	.db #$59
	.db #$5A
	.db #$5B
	.db #$92
	.db #$93
	.db #$94
	.db #$95
	.db #$96
	.db #$97
	.db #$98
	.db #$91
	.db #$92
	.db #$93
	.db #$94
	.db #$95
	.db #$96
	.db #$97
	.db #$98
	.db #$5B
	.db #$34
	.db #$35
	.db #$36
	.db #$37
	.db #$91
	.db #$92
	.db #$93
	.db #$94
	.db #$22
	.db #$80
	.db #$20
	.db #$46
	.db #$45
	.db #$48
	.db #$46
	.db #$46
	.db #$45
	.db #$46
	.db #$48
	.db #$42
	.db #$43
	.db #$44
	.db #$46
	.db #$45
	.db #$48
	.db #$46
	.db #$41
	.db #$42
	.db #$43
	.db #$44
	.db #$46
	.db #$45
	.db #$48
	.db #$46
	.db #$48
	.db #$38
	.db #$45
	.db #$46
	.db #$46
	.db #$41
	.db #$42
	.db #$43
	.db #$44
	.db #$22
	.db #$A0
	.db #$60
	.db #$46
	.db #$22
	.db #$A4
	.db #$01
	.db #$48
	.db #$22
	.db #$A8
	.db #$01
	.db #$47
	.db #$22
	.db #$AA
	.db #$01
	.db #$48
	.db #$22
	.db #$B0
	.db #$01
	.db #$47
	.db #$22
	.db #$B2
	.db #$01
	.db #$48
	.db #$22
	.db #$BA
	.db #$01
	.db #$48
	.db #$22
	.db #$C0
	.db #$20
	.db #$4C
	.db #$4D
	.db #$4E
	.db #$4F
	.db #$49
	.db #$4A
	.db #$4B
	.db #$49
	.db #$4C
	.db #$4D
	.db #$4E
	.db #$4F
	.db #$4D
	.db #$4E
FRAME_11_DATA_07:
	.db #$4F
	.db #$49
	.db #$4A
	.db #$4B
	.db #$49
	.db #$4C
	.db #$4D
	.db #$4E
	.db #$4F
	.db #$49
	.db #$49
	.db #$4A
	.db #$4B
	.db #$49
	.db #$4C
	.db #$4D
	.db #$4E
	.db #$4F
	.db #$22
	.db #$E0
	.db #$20
	.db #$52
	.db #$50
	.db #$53
	.db #$50
	.db #$50
	.db #$51
	.db #$50
	.db #$50
	.db #$52
	.db #$50
	.db #$53
	.db #$50
	.db #$50
	.db #$53
	.db #$50
	.db #$50
	.db #$51
	.db #$50
	.db #$50
	.db #$52
	.db #$50
	.db #$53
	.db #$50
	.db #$50
	.db #$50
	.db #$51
	.db #$50
	.db #$50
	.db #$52
	.db #$50
	.db #$53
	.db #$50
	.db #$23
	.db #$00
	.db #$01
	.db #$52
	.db #$23
	.db #$02
	.db #$02
	.db #$54
	.db #$52
	.db #$23
	.db #$0A
	.db #$02
	.db #$54
	.db #$52
	.db #$23
	.db #$0D
	.db #$02
	.db #$54
	.db #$52
	.db #$23
	.db #$0F
	.db #$02
	.db #$54
	.db #$52
	.db #$23
	.db #$15
	.db #$02
	.db #$54
	.db #$52
	.db #$23
	.db #$1E
	.db #$02
	.db #$54
	.db #$52
	.db #$21
	.db #$F9
	.db #$03
	.db #$28
	.db #$29
	.db #$2A
	.db #$22
	.db #$19
	.db #$03
	.db #$2B
	.db #$46
	.db #$2C
	.db #$22
	.db #$38
	.db #$04
	.db #$2D
	.db #$2E
	.db #$46
	.db #$2F
	.db #$20
	.db #$81
	.db #$04
	.db #$5C
	.db #$5D
	.db #$5E
	.db #$5F
	.db #$20
	.db #$A1
	.db #$05
	.db #$60
	.db #$61
	.db #$46
	.db #$62
	.db #$63
	.db #$20
	.db #$C1
	.db #$05
	.db #$64
	.db #$65
	.db #$66
	.db #$67
	.db #$68
	.db #$20
	.db #$E3
	.db #$05
	.db #$69
	.db #$74
	.db #$75
	.db #$76
	.db #$6A
	.db #$21
	.db #$03
	.db #$05
	.db #$6B
	.db #$6C
	.db #$7C
	.db #$6D
	.db #$6E
	.db #$21
	.db #$23
	.db #$05
	.db #$6F
	.db #$70
	.db #$71
	.db #$72
	.db #$73
	.db #$21
	.db #$40
	.db #$07
	.db #$74
	.db #$75
	.db #$76
	.db #$77
	.db #$78
	.db #$79
	.db #$7A
	.db #$21
	.db #$60
	.db #$09
	.db #$7B
	.db #$7C
	.db #$7D
	.db #$7E
	.db #$7F
	.db #$80
	.db #$5D
	.db #$5E
	.db #$5F
	.db #$21
	.db #$81
	.db #$09
	.db #$81
	.db #$82
	.db #$83
	.db #$84
	.db #$60
	.db #$61
	.db #$46
	.db #$62
	.db #$63
	.db #$21
	.db #$A3
	.db #$07
	.db #$85
	.db #$86
	.db #$64
	.db #$87
	.db #$88
	.db #$67
	.db #$68
	.db #$21
	.db #$C3
	.db #$04
	.db #$89
	.db #$8A
	.db #$8B
	.db #$8C
	.db #$21
	.db #$E4
	.db #$02
	.db #$8D
	.db #$8E
	.db #$22
	.db #$04
	.db #$02
	.db #$8F
	.db #$90
	.db #$22
	.db #$24
	.db #$02
	.db #$8F
	.db #$55
	.db #$23
	.db #$03
	.db #$02
	.db #$1B
	.db #$27
	.db #$23
	.db #$23
	.db #$5B
	.db #$E3
	.db #$23
	.db #$22
	.db #$06
	.db #$E2
	.db #$E3
	.db #$E3
	.db #$E3
	.db #$E4
	.db #$E2
	.db #$23
	.db #$36
	.db #$02
	.db #$E4
	.db #$E2
	.db #$23
	.db #$3E
	.db #$01
	.db #$E4
	.db #$23
	.db #$48
	.db #$56
	.db #$B7
	.db #$23
	.db #$42
	.db #$06
	.db #$E5
	.db #$D9
	.db #$D9
	.db #$D9
	.db #$E7
	.db #$E5
	.db #$23
	.db #$4C
	.db #$4A
	.db #$D6
	.db #$23
	.db #$56
	.db #$02
	.db #$E7
	.db #$E5
	.db #$23
	.db #$5E
	.db #$01
	.db #$E7
	.db #$23
	.db #$58
	.db #$46
	.db #$00
	.db #$23
	.db #$68
	.db #$56
	.db #$B7
	.db #$23
	.db #$62
	.db #$06
	.db #$E5
	.db #$DA
	.db #$DB
	.db #$DC
	.db #$E7
	.db #$E5
	.db #$23
	.db #$76
	.db #$02
	.db #$E7
	.db #$E5
	.db #$23
	.db #$7E
	.db #$01
	.db #$E7
	.db #$23
	.db #$79
	.db #$05
	.db #$1C
	.db #$0C
	.db #$18
	.db #$1B
	.db #$0E
	.db #$23
	.db #$83
	.db #$5B
	.db #$E9
	.db #$23
	.db #$82
	.db #$01
	.db #$E8
	.db #$23
	.db #$86
	.db #$02
	.db #$EA
	.db #$E8
	.db #$23
	.db #$96
	.db #$02
	.db #$EA
	.db #$E8
	.db #$23
	.db #$9E
	.db #$01
	.db #$EA
	.db #$23
	.db #$C0
	.db #$60
	.db #$00
	.db #$23
	.db #$CA
	.db #$04
	.db #$CC
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$23
	.db #$D2
	.db #$04
	.db #$CC
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$23
	.db #$E0
	.db #$48
	.db #$50
	.db #$23
	.db #$E1
	.db #$01
	.db #$40
	.db #$23
	.db #$E8
	.db #$48
	.db #$A5
	.db #$23
	.db #$F0
	.db #$08
	.db #$AA
	.db #$AA
	.db #$AA
	.db #$FA
	.db #$FA
	.db #$BA
	.db #$FA
	.db #$BA
	.db #$23
	.db #$F8
	.db #$48
	.db #$0A
	.db #$23
	.db #$48
	.db #$03
	.db #$11
	.db #$12
	.db #$1D
	.db #$00
	.db #$22
	.db #$20
	.db #$60
	.db #$B6
	.db #$22
	.db #$40
	.db #$60
	.db #$B5
	.db #$22
	.db #$60
	.db #$60
	.db #$B5
	.db #$22
	.db #$80
	.db #$60
	.db #$B5
	.db #$22
	.db #$A0
	.db #$60
	.db #$B5
	.db #$22
	.db #$C0
	.db #$60
	.db #$B5
	.db #$22
	.db #$E0
	.db #$60
	.db #$B5
	.db #$23
	.db #$00
	.db #$60
	.db #$B5
	.db #$21
	.db #$85
	.db #$05
	.db #$AC
	.db #$AD
	.db #$AE
	.db #$C1
	.db #$C2
	.db #$21
	.db #$A4
	.db #$07
	.db #$AF
	.db #$B0
	.db #$B5
	.db #$B5
	.db #$C3
	.db #$C4
	.db #$C5
	.db #$21
	.db #$B0
	.db #$04
	.db #$EC
	.db #$B4
	.db #$B8
	.db #$B9
	.db #$21
	.db #$C2
	.db #$0B
	.db #$B1
	.db #$B2
	.db #$B5
	.db #$B5
	.db #$B5
	.db #$B5
	.db #$B5
	.db #$C6
	.db #$C7
	.db #$C8
	.db #$C9
	.db #$21
	.db #$CE
	.db #$0F
	.db #$CA
	.db #$B4
	.db #$B5
	.db #$B5
	.db #$B5
	.db #$ED
	.db #$BA
	.db #$BB
	.db #$BC
	.db #$B3
	.db #$EB
	.db #$B0
	.db #$BE
	.db #$BB
	.db #$BF
	.db #$21
	.db #$E2
	.db #$59
	.db #$B5
	.db #$21
	.db #$E0
	.db #$02
	.db #$B3
	.db #$B4
	.db #$21
	.db #$EB
	.db #$04
	.db #$CB
	.db #$C4
	.db #$CC
	.db #$CD
	.db #$21
	.db #$F5
	.db #$01
	.db #$BD
	.db #$21
	.db #$FB
	.db #$05
	.db #$BD
	.db #$CB
	.db #$C4
	.db #$C8
	.db #$BB
	.db #$22
	.db #$00
	.db #$5D
	.db #$B5
	.db #$22
	.db #$0D
	.db #$03
	.db #$CE
	.db #$CF
	.db #$D0
	.db #$22
	.db #$1D
	.db #$03
	.db #$C3
	.db #$C0
	.db #$C0
	.db #$22
	.db #$60
	.db #$06
	.db #$99
	.db #$9A
	.db #$9B
	.db #$9C
	.db #$99
	.db #$9A
	.db #$22
	.db #$80
	.db #$06
	.db #$9D
	.db #$9E
	.db #$9F
	.db #$A0
	.db #$9D
	.db #$9E
	.db #$22
	.db #$A0
	.db #$06
	.db #$A1
	.db #$A2
	.db #$A3
	.db #$A4
	.db #$A1
	.db #$A2
	.db #$22
	.db #$C0
	.db #$06
	.db #$A5
	.db #$A6
	.db #$A5
	.db #$A7
	.db #$A5
	.db #$A6
	.db #$22
	.db #$47
	.db #$84
	.db #$9B
	.db #$9F
	.db #$A3
	.db #$A5
	.db #$22
	.db #$48
	.db #$84
	.db #$9C
	.db #$A0
	.db #$A4
	.db #$A6
	.db #$22
	.db #$4A
	.db #$02
	.db #$A8
	.db #$A9
	.db #$22
	.db #$6A
	.db #$02
	.db #$AA
	.db #$AB
	.db #$22
	.db #$58
	.db #$05
	.db #$A8
	.db #$A9
	.db #$A8
	.db #$A8
	.db #$A8
	.db #$22
	.db #$77
	.db #$06
	.db #$A8
	.db #$AA
	.db #$AB
	.db #$AA
	.db #$AA
	.db #$AA
	.db #$22
	.db #$74
	.db #$82
	.db #$A9
	.db #$AB
	.db #$22
	.db #$97
	.db #$01
	.db #$AA
	.db #$22
	.db #$BA
	.db #$04
	.db #$99
	.db #$9A
	.db #$9B
	.db #$9C
	.db #$22
	.db #$DA
	.db #$04
	.db #$9D
	.db #$9E
	.db #$9F
	.db #$A0
	.db #$22
	.db #$FA
	.db #$04
	.db #$A1
	.db #$A2
	.db #$A3
	.db #$A4
	.db #$23
	.db #$20
	.db #$60
	.db #$C0
	.db #$23
	.db #$40
	.db #$60
	.db #$C0
	.db #$23
	.db #$60
	.db #$60
	.db #$C0
	.db #$23
	.db #$80
	.db #$60
	.db #$C0
	.db #$23
	.db #$A0
	.db #$60
	.db #$C0
	.db #$23
	.db #$00
	.db #$60
	.db #$DD
	.db #$23
	.db #$08
	.db #$50
	.db #$DF
	.db #$23
	.db #$07
	.db #$01
	.db #$DE
	.db #$23
	.db #$18
	.db #$01
	.db #$E0
	.db #$23
	.db #$28
	.db #$56
	.db #$E3
	.db #$23
	.db #$48
	.db #$56
	.db #$B7
	.db #$23
	.db #$68
	.db #$56
	.db #$B7
	.db #$23
	.db #$88
	.db #$56
	.db #$E9
	.db #$23
	.db #$58
	.db #$46
	.db #$00
	.db #$23
	.db #$22
	.db #$06
	.db #$E2
	.db #$E3
	.db #$E3
	.db #$E3
	.db #$E4
	.db #$E2
	.db #$23
	.db #$42
	.db #$06
	.db #$E5
	.db #$D9
	.db #$D9
	.db #$D9
	.db #$E7
	.db #$E5
	.db #$23
	.db #$62
	.db #$06
	.db #$E5
	.db #$DA
	.db #$DB
	.db #$DC
	.db #$E7
	.db #$E5
	.db #$23
	.db #$82
	.db #$06
	.db #$E8
	.db #$E9
	.db #$E9
	.db #$E9
	.db #$EA
	.db #$E8
	.db #$23
	.db #$4C
	.db #$4A
	.db #$D4
	.db #$23
	.db #$03
	.db #$02
	.db #$1B
	.db #$27
	.db #$23
	.db #$36
	.db #$84
	.db #$E4
	.db #$E7
	.db #$E7
	.db #$EA
	.db #$23
	.db #$37
	.db #$84
	.db #$E2
	.db #$E5
	.db #$E5
	.db #$E8
	.db #$23
	.db #$3E
	.db #$84
	.db #$E4
	.db #$E7
	.db #$E7
	.db #$EA
	.db #$23
	.db #$79
	.db #$05
	.db #$1C
	.db #$0C
	.db #$18
	.db #$1B
	.db #$0E
	.db #$23
	.db #$C0
	.db #$60
	.db #$00
	.db #$23
	.db #$C8
	.db #$50
	.db #$FF
	.db #$23
	.db #$E0
	.db #$48
	.db #$50
	.db #$23
	.db #$E8
	.db #$48
	.db #$55
	.db #$23
	.db #$F0
	.db #$08
	.db #$AA
	.db #$AA
	.db #$AA
	.db #$FA
	.db #$FA
	.db #$BA
	.db #$FA
	.db #$BA
	.db #$23
	.db #$F8
	.db #$48
	.db #$0A
	.db #$23
	.db #$48
	.db #$03
	.db #$11
	.db #$12
	.db #$1D
	.db #$00
PPU_FILE_DUCKHUNT_SCREEN:
	.db #$20
	.db #$64
	.db #$53
	.db #$B7
	.db #$20
	.db #$84
	.db #$53
	.db #$B7
	.db #$20
	.db #$A4
	.db #$53
	.db #$B7
	.db #$20
	.db #$C4
	.db #$53
	.db #$B7
	.db #$20
	.db #$E4
	.db #$53
	.db #$B7
	.db #$20
	.db #$86
	.db #$82
	.db #$F5
	.db #$F4
	.db #$20
	.db #$67
	.db #$85
	.db #$F0
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$F1
	.db #$20
	.db #$68
	.db #$C5
	.db #$24
	.db #$20
	.db #$6B
	.db #$83
	.db #$24
	.db #$24
	.db #$F4
	.db #$20
	.db #$E9
	.db #$04
	.db #$F3
	.db #$B7
	.db #$B7
	.db #$F1
	.db #$20
	.db #$6D
	.db #$C5
	.db #$24
	.db #$20
	.db #$6E
	.db #$04
	.db #$F2
	.db #$B7
	.db #$B7
	.db #$F0
	.db #$20
	.db #$EE
	.db #$04
	.db #$F3
	.db #$B7
	.db #$B7
	.db #$F1
	.db #$20
	.db #$90
	.db #$02
	.db #$F5
	.db #$F6
	.db #$20
	.db #$B0
	.db #$02
	.db #$F4
	.db #$F7
	.db #$20
	.db #$72
	.db #$C5
	.db #$24
	.db #$20
	.db #$75
	.db #$85
	.db #$24
	.db #$F8
	.db #$B7
	.db #$F9
	.db #$24
	.db #$20
	.db #$96
	.db #$82
	.db #$F1
	.db #$F0
	.db #$21
	.db #$24
	.db #$58
	.db #$FB
	.db #$21
	.db #$49
	.db #$53
	.db #$B7
	.db #$21
	.db #$69
	.db #$52
	.db #$B7
	.db #$21
	.db #$89
	.db #$52
	.db #$B7
	.db #$21
	.db #$A9
	.db #$52
	.db #$B7
	.db #$21
	.db #$C9
	.db #$52
	.db #$B7
	.db #$21
	.db #$4B
	.db #$85
	.db #$24
	.db #$FA
	.db #$B7
	.db #$24
	.db #$24
	.db #$21
	.db #$4D
	.db #$C5
	.db #$24
	.db #$21
	.db #$CE
	.db #$04
	.db #$F3
	.db #$B7
	.db #$B7
	.db #$F1
	.db #$21
	.db #$50
	.db #$83
	.db #$24
	.db #$24
	.db #$F4
	.db #$21
	.db #$52
	.db #$C5
	.db #$24
	.db #$21
	.db #$55
	.db #$85
	.db #$24
	.db #$F0
	.db #$B7
	.db #$F9
	.db #$24
	.db #$21
	.db #$57
	.db #$C5
	.db #$24
	.db #$21
	.db #$78
	.db #$C4
	.db #$24
	.db #$21
	.db #$7B
	.db #$C4
	.db #$24
	.db #$22
	.db #$28
	.db #$0F
	.db #$10
	.db #$0A
	.db #$16
	.db #$0E
	.db #$24
	.db #$0A
	.db #$24
	.db #$24
	.db #$24
	.db #$01
	.db #$24
	.db #$0D
	.db #$1E
	.db #$0C
	.db #$14
	.db #$22
	.db #$68
	.db #$10
	.db #$10
	.db #$0A
	.db #$16
	.db #$0E
	.db #$24
	.db #$0B
	.db #$24
	.db #$24
	.db #$24
	.db #$02
	.db #$24
	.db #$0D
	.db #$1E
	.db #$0C
	.db #$14
	.db #$1C
	.db #$22
	.db #$A8
	.db #$16
	.db #$10
	.db #$0A
	.db #$16
	.db #$0E
	.db #$24
	.db #$0C
	.db #$24
	.db #$24
	.db #$24
	.db #$0C
	.db #$15
	.db #$0A
	.db #$22
	.db #$24
	.db #$1C
	.db #$11
	.db #$18
	.db #$18
	.db #$1D
	.db #$12
	.db #$17
	.db #$10
	.db #$23
	.db #$07
	.db #$0B
	.db #$1D
	.db #$18
	.db #$19
	.db #$24
	.db #$1C
	.db #$0C
	.db #$18
	.db #$1B
	.db #$0E
	.db #$24
	.db #$27
	.db #$23
	.db #$45
	.db #$16
	.db #$25
	.db #$01
	.db #$09
	.db #$08
	.db #$04
	.db #$24
	.db #$17
	.db #$12
	.db #$17
	.db #$1D
	.db #$0E
	.db #$17
	.db #$0D
	.db #$18
	.db #$24
	.db #$0C
	.db #$18
	.db #$EE
	.db #$15
	.db #$1D
	.db #$0D
	.db #$EF
	.db #$23
	.db #$C0
	.db #$60
	.db #$00 ;END OF DUCK GAME SCREEN DATA.
	.db #$23
	.db #$E0
	.db #$42
	.db #$55
	.db #$23
	.db #$E2
	.db #$46
	.db #$FF
	.db #$23
	.db #$EA
	.db #$46
	.db #$FF
	.db #$23
	.db #$F0
	.db #$48
	.db #$5A
	.db #$23
	.db #$F8
	.db #$48
	.db #$00
	.db #$23
	.db #$E1
	.db #$01
	.db #$55
	.db #$23
	.db #$E9
	.db #$01
	.db #$55
	.db #$00
PALLETE_PTR_L:
	.LOW PALLETTE_PTR_00
PALLETE_PTR_H:
	.HIGH PALLETTE_PTR_00
	.LOW PALLETTE_PTR_01
	.HIGH PALLETTE_PTR_01
	.LOW PALLETTE_PTR_02
	.HIGH PALLETTE_PTR_02
	.LOW PALLETTE_PTR_03
	.HIGH PALLETTE_PTR_03
	.LOW PALLETTE_PTR_04
	.HIGH PALLETTE_PTR_04
	.LOW PALLETTE_PTR_05
	.HIGH PALLETTE_PTR_05
	.LOW PALLETTE_PTR_06
	.HIGH PALLETTE_PTR_06
PALLETTE_PTR_00:
	.db #$3F ;3F00 addr
	.db #$00
	.db #$10 ;16 bytes, half pallet.
	.db #$0F
	.db #$2C
	.db #$27
	.db #$0F
	.db #$0F
	.db #$0F
	.db #$30
	.db #$30
	.db #$0F
	.db #$0F
	.db #$2A
	.db #$2A
	.db #$0F
	.db #$0F
	.db #$27
	.db #$27
	.db #$3F
	.db #$10
	.db #$50 ;3F10, 10 bytes, single block.
	.db #$0F
	.db #$00
PALLETTE_PTR_01:
	.db #$3F ;3F00 addr
	.db #$00
	.db #$20 ;whole pallet, 32 bytes.
	.db #$21
	.db #$07
	.db #$29
	.db #$0A
	.db #$21
	.db #$30
	.db #$29
	.db #$0A
	.db #$21
	.db #$0F
	.db #$29
	.db #$18
	.db #$21
	.db #$0F
	.db #$30
	.db #$16
	.db #$21
	.db #$30
	.db #$0A
	.db #$0F
	.db #$21
	.db #$30
	.db #$26
	.db #$0F
	.db #$21
	.db #$30
	.db #$17
	.db #$0F
	.db #$21
	.db #$07
	.db #$17
	.db #$0F
	.db #$00
PALLETTE_PTR_02:
	.db #$3F ;addr 3f00
	.db #$00
	.db #$20 ;32 bytes, whole pallet.
	.db #$2C
	.db #$29
	.db #$19
	.db #$09
	.db #$2C
	.db #$07
	.db #$29
	.db #$1A
	.db #$2C
	.db #$0F
	.db #$29
	.db #$10
	.db #$2C
	.db #$0F
	.db #$30
	.db #$16
	.db #$2C
	.db #$30
	.db #$0F
	.db #$0F
	.db #$2C
	.db #$30
	.db #$16
	.db #$07
	.db #$2C
	.db #$30
	.db #$17
	.db #$0F
	.db #$2C
	.db #$07
	.db #$17
	.db #$0F
	.db #$00
PALLETTE_PTR_03:
	.db #$3F ;ADDR 3F00, fired screen?
	.db #$00
	.db #$60 ;clear whole pallet, 32 bytes of 0F
	.db #$0F
	.db #$3F ;3F03 addr
	.db #$03
	.db #$01
	.db #$30
	.db #$00
PALLETTE_PTR_04:
	.db #$3F ;3F00 addr, all black bg, sprites white.
	.db #$00
	.db #$60 ;clear whole pallet, 32 bytes of 0F.
	.db #$0F
	.db #$3F ;3F11 addr
	.db #$11 ;3F11, 3 bytes of white.
	.db #$03
	.db #$30
	.db #$30
	.db #$30
	.db #$00
PALLETTE_PTR_06:
	.db #$3F ;3F10 ADDR
	.db #$10
	.db #$10 ;16 bytes
	.db #$21
	.db #$30
	.db #$0A
	.db #$0F
	.db #$21
	.db #$30
	.db #$26
	.db #$0F
	.db #$21
	.db #$30
	.db #$17
	.db #$0F
	.db #$21
	.db #$07
	.db #$17
	.db #$0F
PALLETTE_PTR_05:
	.db #$3F ;3F00 Addr
	.db #$00
	.db #$10 ;16 bytes
	.db #$21
	.db #$07
	.db #$29
	.db #$0A
	.db #$21
	.db #$30
	.db #$29
	.db #$0A
	.db #$21
	.db #$0F
	.db #$29
	.db #$18
	.db #$21
	.db #$0F
	.db #$30
	.db #$16
	.db #$00
BONUS_ADDR_HIGH:
	.db #$23
BONUS_ADDR_LOW:
	.db #$58
	.db #$06
	.db #$00
DEFAULT_HIGH_SCORES:
	.db #$00 ;goes to 0x5F0
	.db #$01
	.db #$20
	.db #$00
	.db #$00
	.db #$01
	.db #$20
	.db #$00
	.db #$00
	.db #$01
	.db #$20
	.db #$00
TARGET_INIT_DATA_PIGEON/DUCK:
	.db #$01 ;target type, ZP $30
	.db #$01 ;target state, ZP $31
	.db #$A8 ;Y coord. ZP $32
	.db #$80 ;X coord.
	.db #$00 ;ZP $34
	.db #$00
	.db #$00 ;ZP $36, OBJ_INDEX_START
	.db #$3F ;OBJ_INDEX_FINAL
	.db #$01 ;ZP $38
	.db #$00
	.db #$03 ;ZP $3A
	.db #$00
	.db #$00 ;ZP $3C
	.db #$00
	.db #$00 ;ZP $3E
	.db #$00
	.db #$00 ;ZP $40
	.db #$00
	.db #$00 ;ZP $42
	.db #$00
	.db #$00 ;ZP $44
	.db #$00
	.db #$00 ;ZP $46
	.db #$00
	.db #$00 ;CP $48
	.db #$00
	.db #$00 ;ZP $4A
	.db #$03
	.db #$00 ;ZP $4C
	.db #$00
	.db #$00 ;ZP $4E
	.db #$00
OBJ_DATA_UNK_HIGH:
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_00 ;not sure what any of this is rn.
OBJ_DATA_UNK_LOW:
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_00
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_01
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_01
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_02
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_02
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_03
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_03
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_04
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_04
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_05
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_05
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_06
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_06
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_07
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_07
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_08
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_08
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_09
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_09
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_0A
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_0A
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_0B
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_0B
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_0C
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_0C
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_0D
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_0D
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_0E
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_0E
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_0F
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_0F
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_10
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_10
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_11
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_11
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_12
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_12
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_13
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_13
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_14
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_14
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_15
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_15
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_16
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_16
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_17
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_17
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_18
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_18
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_19
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_19
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_1A
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_1A
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_1B
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_1B
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_1C
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_1C
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_1D
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_1D
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_1E
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_1E
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_1F
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_1F
UNK_OBJ_DATA_264B:
	.db #$00
	.db #$03
	.db #$10
	.db #$17
	.db #$24
	.db #$27
	.db #$34
	.db #$3B
	.db #$48
	.db #$4B
	.db #$58
	.db #$5F
	.db #$6C
	.db #$6F
	.db #$7C
	.db #$83
	.db #$90
	.db #$95
	.db #$98
	.db #$9B
	.db #$9E
	.db #$A1
L_2661:
	.db #$FF
	.db #$00
	.db #$AA
	.db #$FF
	.db #$01
	.db #$FF
	.db #$00
	.db #$FF
	.db #$00
	.db #$FF
	.db #$01
	.db #$FF
	.db #$00
	.db #$00
	.db #$00
	.db #$AA
	.db #$FF
	.db #$01
	.db #$FF
	.db #$01
	.db #$00
	.db #$00
	.db #$AA
	.db #$00
	.db #$01
	.db #$FF
	.db #$01
	.db #$00
	.db #$01
	.db #$FF
	.db #$01
	.db #$00
	.db #$01
	.db #$00
	.db #$00
	.db #$AA
	.db #$00
	.db #$01
	.db #$AA
	.db #$00
	.db #$01
	.db #$01
	.db #$01
	.db #$00
	.db #$01
	.db #$01
	.db #$01
	.db #$00
	.db #$01
	.db #$00
	.db #$00
	.db #$AA
	.db #$01
	.db #$01
	.db #$01
	.db #$01
	.db #$00
	.db #$00
	.db #$AA
	.db #$01
	.db #$01
	.db #$01
	.db #$00
	.db #$01
	.db #$00
	.db #$01
	.db #$01
	.db #$01
	.db #$00
	.db #$00
	.db #$00
	.db #$AA
	.db #$01
	.db #$00
	.db #$AA
	.db #$01
	.db #$FF
	.db #$01
	.db #$00
	.db #$01
	.db #$00
	.db #$01
	.db #$FF
	.db #$01
	.db #$00
	.db #$00
	.db #$00
	.db #$AA
	.db #$01
	.db #$FF
	.db #$01
	.db #$FF
	.db #$00
	.db #$00
	.db #$AA
	.db #$00
	.db #$FF
	.db #$01
	.db #$FF
	.db #$00
	.db #$FF
	.db #$01
	.db #$FF
	.db #$00
	.db #$FF
	.db #$00
	.db #$00
	.db #$AA
	.db #$00
	.db #$FF
	.db #$AA
	.db #$00
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$00
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$00
	.db #$FF
	.db #$00
	.db #$00
	.db #$AA
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$00
	.db #$00
	.db #$AA
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$00
	.db #$FF
	.db #$00
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$00
	.db #$00
	.db #$00
	.db #$AA
	.db #$02
	.db #$01
	.db #$02
	.db #$FF
	.db #$AA
	.db #$FF
	.db #$FE
	.db #$AA
	.db #$FE
	.db #$FF
	.db #$AA
	.db #$FE
	.db #$00
	.db #$AA
	.db #$FE
	.db #$01
	.db #$AA
	.db #$FF
	.db #$02
	.db #$AA
	.db #$02
	.db #$00
	.db #$02
	.db #$01
	.db #$04
	.db #$02
	.db #$FE
	.db #$02
	.db #$03
	.db #$02
	.db #$04
	.db #$04
	.db #$05
	.db #$FE
	.db #$14
	.db #$09
	.db #$FF
	.db #$06
	.db #$01
TARGET_0_STATE_6_SCRIPT:
	.db #$04
	.db #$0A
	.db #$04
	.db #$0B
	.db #$FE
	.db #$02
	.db #$06
	.db #$02
	.db #$07
	.db #$04
	.db #$08
	.db #$FE
TARGET_3_STATE_INIT?:
	.db #$21
	.db #$30
	.db #$0A
	.db #$0F
	.db #$21
	.db #$30
	.db #$26
	.db #$0F
	.db #$21
	.db #$30
	.db #$14
	.db #$02
	.db #$21
	.db #$30
	.db #$26
	.db #$02
	.db #$21
	.db #$30
	.db #$0F
	.db #$05
	.db #$21
	.db #$30
	.db #$26
	.db #$05
L_273C:
	.db #$04
	.db #$08
	.db #$0C
	.db #$08
	.db #$0C
	.db #$10
	.db #$08
	.db #$0C
	.db #$10
	.db #$0C
	.db #$10
	.db #$14
	.db #$10
	.db #$14
	.db #$18
	.db #$10
	.db #$14
	.db #$18
	.db #$14
	.db #$18
	.db #$1C
	.db #$14
	.db #$1C
	.db #$1C
	.db #$18
	.db #$1C
	.db #$1C
	.db #$1C
	.db #$1C
	.db #$20
UNK_DATA_275A:
	.db #$10
	.db #$14
	.db #$14
	.db #$18
	.db #$18
	.db #$1C
	.db #$1C
	.db #$20
	.db #$20
	.db #$24
	.db #$24
	.db #$28
TARGET_DATA_COMBO:
	.db #$00 ;format [trgt 2, trgt 1]
	.db #$01 ;first level range is up to 3, meaning can't get 2 (red) target.
	.db #$10
	.db #$11
	.db #$12 ;only at index 4 can you get red ducks.
	.db #$20
	.db #$21
	.db #$22 ;and up to 0x7 is all combos of ducks available.
TARGET_3_DATA:
	.db #$01 ;type?
	.db #$01 ;state?
	.db #$AC ;Y coord.
	.db #$18 ;X coord.
	.db #$00
	.db #$00
	.db #$00
	.db #$BF ;not sure.
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$60
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00 ;end of target 3 data.
OBJ3_ANIMATION_SCRIPT_STATE_2:
	.db #$06 ;speed to change frames in the file. E78E
	.db #$0C ;file to play.
	.db #$06 ;speed
	.db #$0D ;file
	.db #$06 ;speed
	.db #$0E ;file
	.db #$06 ;speed
	.db #$0F ;file
	.db #$FE ;flag special. in code. index to 0. repeat animation
	.db #$00
OBJ3_ANIMATION_SCRIPT_STATE_4:
	.db #$08
	.db #$0C
	.db #$08
	.db #$10
	.db #$08
	.db #$0C
	.db #$08
	.db #$10
	.db #$08
	.db #$0C
	.db #$08
	.db #$10
	.db #$FF
	.db #$02
	.db #$01
OBJ3_ANIMATION_SCRIPT_STATE_6:
	.db #$10 ;Dog state 6 animation script.
	.db #$11
	.db #$FF
	.db #$08
	.db #$01
OBJ3_ANIMATION_SCRIPT_STATE_8:
	.db #$90
	.db #$03
	.db #$12
	.db #$83
	.db #$01
	.db #$12
	.db #$83
	.db #$01
	.db #$12
	.db #$83
	.db #$01
	.db #$12
	.db #$83
	.db #$01
	.db #$12
	.db #$82
	.db #$01
	.db #$12
	.db #$82
	.db #$01
	.db #$12
	.db #$82
	.db #$01
	.db #$12
	.db #$82
	.db #$01
	.db #$12
	.db #$81
	.db #$01
	.db #$12
	.db #$82
	.db #$01
	.db #$12
	.db #$81
	.db #$01
	.db #$12
	.db #$81
	.db #$01
	.db #$12
	.db #$81
	.db #$01
	.db #$12
	.db #$81
	.db #$01
	.db #$12
	.db #$81
	.db #$01
	.db #$12
	.db #$81
	.db #$01
	.db #$12
	.db #$84
	.db #$01
	.db #$13
	.db #$00
	.db #$01
	.db #$13
	.db #$81
	.db #$01
	.db #$13
	.db #$00
	.db #$01
	.db #$13
	.db #$81
	.db #$01
	.db #$13
	.db #$00
	.db #$01
	.db #$13
	.db #$00
	.db #$01
	.db #$13
	.db #$00
	.db #$01
	.db #$13
	.db #$81
	.db #$01
	.db #$13
	.db #$FD
	.db #$00
	.db #$01
	.db #$13
	.db #$00
	.db #$01
	.db #$13
	.db #$00
	.db #$01
	.db #$13
	.db #$00
	.db #$01
	.db #$13
	.db #$01
	.db #$01
	.db #$13
	.db #$00
	.db #$01
	.db #$13
	.db #$01
	.db #$01
	.db #$13
	.db #$00
	.db #$01
	.db #$13
	.db #$01
	.db #$01
	.db #$13
	.db #$01
	.db #$01
	.db #$13
	.db #$01
	.db #$01
	.db #$13
	.db #$02
	.db #$01
	.db #$13
	.db #$02
	.db #$01
	.db #$13
	.db #$02
	.db #$01
	.db #$13
	.db #$03
	.db #$01
	.db #$13
	.db #$03
	.db #$01
	.db #$13
	.db #$04
	.db #$00
	.db #$13
	.db #$04
	.db #$00
	.db #$13
	.db #$05
	.db #$00
	.db #$13
	.db #$05
	.db #$00
	.db #$13
	.db #$05
	.db #$00
	.db #$13
	.db #$05
	.db #$00
	.db #$13
	.db #$05
	.db #$00
	.db #$13
	.db #$05
	.db #$00
	.db #$13
	.db #$FF
	.db #$0E
	.db #$00
OBJ3_ANIMATION_SCRIPT_STATE_A:
	.db #$04
	.db #$81
	.db #$16
	.db #$04
	.db #$81
	.db #$17
	.db #$04
	.db #$81
	.db #$16
	.db #$04
	.db #$81
	.db #$17
	.db #$04
	.db #$81
	.db #$16
	.db #$04
	.db #$81
	.db #$17
	.db #$04
	.db #$81
	.db #$16
	.db #$04
	.db #$81
	.db #$17
	.db #$04
	.db #$81
	.db #$16
	.db #$04
	.db #$81
	.db #$17
	.db #$04
	.db #$80
	.db #$16
	.db #$04
	.db #$80
	.db #$17
	.db #$04
	.db #$80
	.db #$16
	.db #$04
	.db #$80
	.db #$17
	.db #$04
	.db #$80
	.db #$16
	.db #$04
	.db #$80
	.db #$17
	.db #$04
	.db #$80
	.db #$16
	.db #$04
	.db #$80
	.db #$17
	.db #$04
	.db #$02
	.db #$16
	.db #$04
	.db #$02
	.db #$17
	.db #$04
	.db #$02
	.db #$16
	.db #$04
	.db #$02
	.db #$17
	.db #$04
	.db #$02
	.db #$16
	.db #$04
	.db #$02
	.db #$17
	.db #$04
	.db #$02
	.db #$16
	.db #$FF
	.db #$0F
	.db #$20
OBJ3_ANIMATION_SCRIPT_STATE_C_2:
	.db #$14
	.db #$82
	.db #$14
	.db #$10
	.db #$00
	.db #$14
	.db #$14
	.db #$02
	.db #$14
	.db #$14
	.db #$02
	.db #$14
	.db #$FF
	.db #$0F
	.db #$20
OBJ3_ANIMATION_SCRIPT_STATE_C_2:
	.db #$14
	.db #$82
	.db #$15
	.db #$10
	.db #$00
	.db #$15
	.db #$14
	.db #$02
	.db #$15
	.db #$14
	.db #$02
	.db #$15
	.db #$FF
	.db #$0F
	.db #$20
OBJ3_ANIMATION_SCRIPT_STATE_10:
	.db #$04
	.db #$81
	.db #$16
	.db #$04
	.db #$81
	.db #$17
	.db #$04
	.db #$81
	.db #$16
	.db #$04
	.db #$81
	.db #$17
	.db #$04
	.db #$81
	.db #$16
	.db #$04
	.db #$81
	.db #$17
	.db #$04
	.db #$81
	.db #$16
	.db #$04
	.db #$81
	.db #$17
	.db #$04
	.db #$81
	.db #$16
	.db #$04
	.db #$81
	.db #$17
	.db #$04
	.db #$80
	.db #$16
	.db #$04
	.db #$80
	.db #$17
	.db #$04
	.db #$80
	.db #$16
	.db #$FC
L_28DA:
	.db #$01
	.db #$02
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$4F
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$01
FRAME_10_DATA_05:
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$02
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$F9
	.db #$FE
	.db #$FB
	.db #$FE
	.db #$FF
ANIM_FRAME_FILE_PTR_02:
	.db #$FE
	.db #$FF
	.db #$FA
	.db #$FB
	.db #$FA
	.db #$F9
	.db #$FA
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$FA
	.db #$FD
	.db #$FB
	.db #$FD
	.db #$FB
	.db #$FD
	.db #$FC
	.db #$FD
	.db #$FC
	.db #$FB
	.db #$FB
	.db #$FB
	.db #$FB
	.db #$FB
	.db #$FA
	.db #$FB
L_292A:
	.db #$18
	.db #$18
	.db #$19
	.db #$1A
	.db #$1A
	.db #$1B
	.db #$1C
	.db #$1D
	.db #$1E
	.db #$1E
	.db #$1F
	.db #$1F
	.db #$20
	.db #$20
	.db #$21
	.db #$21
	.db #$22
	.db #$22
	.db #$22
	.db #$22
	.db #$23
	.db #$23
	.db #$23
	.db #$23
	.db #$23
	.db #$23
L_2944:
	.db #$00
	.db #$00
	.db #$00
	.db #$01
	.db #$01
	.db #$01
	.db #$02
	.db #$02
	.db #$02
	.db #$02
	.db #$03
	.db #$03
	.db #$03
	.db #$03
	.db #$04
	.db #$04
	.db #$04
	.db #$04
	.db #$04
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
L_2968:
	.db #$00
L_2969:
	.db #$00
L_296A:
	.db #$C0
L_296B:
	.db #$15
L_296C:
	.db #$1E
L_296D:
	.db #$2C
	.db #$01
	.db #$00
	.db #$C0
	.db #$0A
	.db #$1E
	.db #$30
	.db #$03
	.db #$00
	.db #$D0
	.db #$10
	.db #$1E
	.db #$25
	.db #$04
	.db #$00
	.db #$C0
	.db #$00
	.db #$1C
	.db #$30
	.db #$06
	.db #$00
	.db #$C0
	.db #$0F
	.db #$1C
	.db #$30
	.db #$08
	.db #$00
	.db #$C0
	.db #$F6
	.db #$1C
	.db #$30
	.db #$09
	.db #$00
	.db #$C0
	.db #$0C
	.db #$1C
	.db #$30
	.db #$0A
	.db #$00
	.db #$C0
	.db #$F4
	.db #$1C
	.db #$30
	.db #$0C
	.db #$00
	.db #$C0
	.db #$F4
	.db #$1E
	.db #$2D
	.db #$0E
	.db #$00
	.db #$C0
	.db #$08
	.db #$1C
	.db #$30
	.db #$0A
	.db #$00
	.db #$C0
	.db #$00
	.db #$1D
	.db #$30
	.db #$11
	.db #$00
	.db #$B8
	.db #$EE
	.db #$20
	.db #$33
	.db #$13
	.db #$00
	.db #$C8
	.db #$F0
	.db #$1C
	.db #$2A
	.db #$04
	.db #$80
	.db #$C8
	.db #$F7
	.db #$1C
	.db #$2D
	.db #$0A
	.db #$80
	.db #$C8
	.db #$0B
	.db #$1C
	.db #$2D
	.db #$0F
	.db #$80
	.db #$C6
	.db #$F3
	.db #$21
	.db #$26
L_29C8:
	.db #$14
	.db #$14
	.db #$10
	.db #$10
	.db #$10
	.db #$08
	.db #$04
	.db #$00
	.db #$18
	.db #$14
	.db #$14
	.db #$10
	.db #$0C
	.db #$08
	.db #$04
	.db #$00
	.db #$1C
	.db #$18
	.db #$18
	.db #$14
	.db #$10
	.db #$0C
	.db #$08
	.db #$04
	.db #$20
	.db #$1C
	.db #$18
	.db #$14
	.db #$10
	.db #$0C
	.db #$08
	.db #$04
	.db #$24
	.db #$20
	.db #$1C
	.db #$18
	.db #$14
	.db #$0C
	.db #$08
	.db #$04
	.db #$28
	.db #$24
	.db #$20
	.db #$1C
	.db #$14
	.db #$10
	.db #$0C
	.db #$08
	.db #$2C
	.db #$28
	.db #$24
	.db #$20
	.db #$18
	.db #$10
	.db #$0C
	.db #$08
UNK_DATA_00_REAL:
	.db #$01
	.db #$01
	.db #$01
	.db #$01
	.db #$02
	.db #$01
	.db #$01
	.db #$01
	.db #$02
	.db #$01
	.db #$02
	.db #$01
	.db #$02
	.db #$02
	.db #$02
	.db #$01
	.db #$02
	.db #$02
	.db #$02
	.db #$02
	.db #$03
	.db #$02
	.db #$03
	.db #$02
	.db #$03
	.db #$03
	.db #$03
	.db #$03
	.db #$04
	.db #$03
	.db #$04
	.db #$03
	.db #$04
	.db #$04
	.db #$04
	.db #$04
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$06
	.db #$06
	.db #$06
	.db #$06
	.db #$07
	.db #$07
	.db #$07
	.db #$07
L_2A30:
	.db #$ED
	.db #$40
	.db #$ED
	.db #$40
	.db #$ED
	.db #$C0
	.db #$ED
	.db #$80
	.db #$ED
	.db #$00
	.db #$ED
	.db #$00
	.db #$ED
	.db #$00
	.db #$ED
	.db #$00
	.db #$EE
	.db #$40
	.db #$EE
	.db #$40
	.db #$EE
	.db #$40
	.db #$EE
	.db #$40
	.db #$EE
	.db #$00
	.db #$EE
	.db #$00
	.db #$EE
	.db #$00
	.db #$EE
	.db #$00
L_2A50:
	.db #$06
	.db #$05
	.db #$04
	.db #$03
	.db #$03
	.db #$02
	.db #$03
	.db #$03
	.db #$02
	.db #$02
	.db #$02
	.db #$02
	.db #$02
	.db #$01
	.db #$01
	.db #$02
	.db #$01
	.db #$01
	.db #$01
	.db #$01
	.db #$01
	.db #$01
	.db #$01
	.db #$00
	.db #$01
	.db #$01
	.db #$01
	.db #$01
	.db #$00
	.db #$01
	.db #$01
	.db #$01
	.db #$00
	.db #$01
	.db #$01
	.db #$00
	.db #$01
	.db #$00
	.db #$01
	.db #$00
	.db #$BB
	.db #$01
	.db #$00
	.db #$01
	.db #$00
	.db #$BB
	.db #$01
	.db #$00
	.db #$01
	.db #$00
	.db #$BB
	.db #$01
	.db #$00
	.db #$01
	.db #$BB
	.db #$00
	.db #$01
	.db #$BB
	.db #$00
	.db #$00
	.db #$BB
	.db #$00
	.db #$AA
L_2A8F:
	.db #$02
	.db #$02
	.db #$01
	.db #$02
	.db #$02
	.db #$01
	.db #$01
	.db #$01
	.db #$01
	.db #$01
	.db #$00
	.db #$01
	.db #$00
	.db #$01
	.db #$00
	.db #$01
	.db #$00
	.db #$01
	.db #$BB
	.db #$00
	.db #$00
	.db #$01
	.db #$BB
	.db #$00
	.db #$00
	.db #$01
	.db #$BB
	.db #$00
	.db #$00
	.db #$BB
	.db #$01
	.db #$00
	.db #$00
	.db #$BB
	.db #$01
	.db #$00
	.db #$BB
	.db #$00
	.db #$00
	.db #$BB
	.db #$BB
	.db #$BB
	.db #$BB
	.db #$BB
	.db #$BB
	.db #$BB
	.db #$BB
	.db #$BB
	.db #$BB
	.db #$BB
	.db #$AA
L_2AC2:
	.db #$01
	.db #$01
	.db #$00
	.db #$01
	.db #$01
	.db #$01
	.db #$00
	.db #$01
	.db #$00
	.db #$01
	.db #$00
	.db #$00
	.db #$01
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$01
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$01
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$01
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
L_2AF2:
	.db #$00
	.db #$06
	.db #$00
	.db #$FF
	.db #$02
	.db #$05
	.db #$02
	.db #$FF
	.db #$08
	.db #$04
	.db #$06
	.db #$FF
	.db #$0E
	.db #$04
	.db #$07
	.db #$FF
	.db #$12
	.db #$05
	.db #$08
	.db #$FF
	.db #$14
	.db #$04
	.db #$0A
	.db #$FF
	.db #$FF
	.db #$00
	.db #$00
	.db #$02
	.db #$FF
	.db #$00
	.db #$00
	.db #$04
	.db #$FF
	.db #$00
	.db #$00
	.db #$06
	.db #$FF
	.db #$00
	.db #$00
	.db #$0A
	.db #$FF
	.db #$00
	.db #$00
	.db #$10
	.db #$FF
	.db #$00
	.db #$00
	.db #$14
L_2B22:
	.db #$02
	.db #$04
	.db #$06
	.db #$0A
	.db #$0C
	.db #$0E
L_2B28:
	.db #$01
	.db #$03
	.db #$05
	.db #$07
	.db #$09
	.db #$0B
	.db #$0D
	.db #$0F
UNK_PTR_ARR_LOW:
	.LOW SPRITES_X_Y_SPRITE_VALUES?_00
UNK_PTR_ARR_HIGH:
	.HIGH SPRITES_X_Y_SPRITE_VALUES?_00
	.LOW SPRITES_X_Y_SPRITE_VALUES?_01
	.HIGH SPRITES_X_Y_SPRITE_VALUES?_01
	.LOW SPRITES_X_Y_SPRITE_VALUES?_02
	.HIGH SPRITES_X_Y_SPRITE_VALUES?_02
	.LOW SPRITES_X_Y_SPRITE_VALUES?_03
	.HIGH SPRITES_X_Y_SPRITE_VALUES?_03
	.LOW SPRITES_X_Y_SPRITE_VALUES?_04
	.HIGH SPRITES_X_Y_SPRITE_VALUES?_04
	.LOW SPRITES_X_Y_SPRITE_VALUES?_05
	.HIGH SPRITES_X_Y_SPRITE_VALUES?_05
	.LOW SPRITES_X_Y_SPRITE_VALUES?_08
	.HIGH SPRITES_X_Y_SPRITE_VALUES?_08
	.LOW SPRITES_X_Y_SPRITE_VALUES?_08
	.HIGH SPRITES_X_Y_SPRITE_VALUES?_08
	.LOW SPRITES_X_Y_SPRITE_VALUES?_08
	.HIGH SPRITES_X_Y_SPRITE_VALUES?_08
	.LOW SPRITES_X_Y_SPRITE_VALUES?_09
	.HIGH SPRITES_X_Y_SPRITE_VALUES?_09
	.LOW SPRITES_X_Y_SPRITE_VALUES?_0A
	.HIGH SPRITES_X_Y_SPRITE_VALUES?_0A
	.LOW SPRITES_X_Y_SPRITE_VALUES?_0B
	.HIGH SPRITES_X_Y_SPRITE_VALUES?_0B
	.LOW SPRITES_X_Y_SPRITE_VALUES?_0C
	.HIGH SPRITES_X_Y_SPRITE_VALUES?_0C
SPRITES_X_Y_SPRITE_VALUES?_00:
	.db #$F4 ;X coord.
	.db #$F4 ;Y coord.
	.db #$F4
	.db #$FC
	.db #$F4
	.db #$04
	.db #$FC
	.db #$F4
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$04
	.db #$04
	.db #$F4
	.db #$04
	.db #$FC
	.db #$04
	.db #$04
	.db #$AA ;End of file.
SPRITES_X_Y_SPRITE_VALUES?_01:
	.db #$F7
	.db #$F5
	.db #$F7
	.db #$FD
	.db #$F7
	.db #$03
	.db #$FF
	.db #$F5
	.db #$FF
	.db #$FD
	.db #$FF
	.db #$03
	.db #$01
	.db #$F5
	.db #$01
	.db #$FD
	.db #$01
	.db #$03
	.db #$AA
SPRITES_X_Y_SPRITE_VALUES?_02:
	.db #$F9
	.db #$F7
	.db #$F9
	.db #$FF
	.db #$F9
	.db #$01
	.db #$FF
	.db #$F7
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$01
	.db #$AA
SPRITES_X_Y_SPRITE_VALUES?_03:
	.db #$FA
	.db #$F8
	.db #$FA
	.db #$00
	.db #$FE
	.db #$F8
	.db #$FE
	.db #$00
	.db #$AA
SPRITES_X_Y_SPRITE_VALUES?_04:
	.db #$FA
	.db #$FA
	.db #$FA
	.db #$FE
	.db #$FE
	.db #$FA
	.db #$FE
	.db #$FE
	.db #$AA
SPRITES_X_Y_SPRITE_VALUES?_05:
	.db #$FC
	.db #$FC
	.db #$AA
SPRITES_X_Y_SPRITE_VALUES?_08:
	.db #$FC
	.db #$FC
	.db #$AA
SPRITES_X_Y_SPRITE_VALUES?_09:
	.db #$F0
	.db #$F0
	.db #$F0
	.db #$F8
	.db #$F0
	.db #$00
	.db #$F0
	.db #$08
	.db #$F8
	.db #$F0
	.db #$F8
	.db #$F8
	.db #$F8
	.db #$00
	.db #$F8
	.db #$08
	.db #$00
	.db #$F0
	.db #$00
	.db #$F8
	.db #$00
	.db #$00
	.db #$00
	.db #$08
	.db #$08
	.db #$F0
	.db #$08
	.db #$F8
	.db #$08
	.db #$00
	.db #$08
	.db #$08
	.db #$AA
SPRITES_X_Y_SPRITE_VALUES?_0A:
	.db #$F4
	.db #$F5
	.db #$F4
	.db #$FD
	.db #$F4
	.db #$03
	.db #$FC
	.db #$F5
	.db #$FC
	.db #$FD
	.db #$FC
	.db #$03
	.db #$04
	.db #$F5
	.db #$04
	.db #$FD
	.db #$04
	.db #$03
	.db #$AA
SPRITES_X_Y_SPRITE_VALUES?_0B:
	.db #$F5
	.db #$F7
	.db #$F5
	.db #$FF
	.db #$F5
	.db #$01
	.db #$FD
	.db #$F7
	.db #$FD
	.db #$FF
	.db #$FD
	.db #$01
	.db #$03
	.db #$F7
	.db #$03
	.db #$FF
	.db #$03
	.db #$01
	.db #$AA
SPRITES_X_Y_SPRITE_VALUES?_0C:
	.db #$F6
	.db #$F8
	.db #$F6
	.db #$00
	.db #$FE
	.db #$F8
	.db #$FE
	.db #$00
	.db #$02
	.db #$F8
	.db #$02
	.db #$00
	.db #$AA
BONUS_SCORES_HIGH:
	.db #$01
	.db #$01
	.db #$02
	.db #$03
BONUS_SCORES_LOW:
	.db #$00
	.db #$50
	.db #$00
	.db #$00
TBL_DUCK_INDEXES:
	.db #$00 ;black = 0, blue = 1, red = 2, discs = 1
	.db #$02
	.db #$03
	.db #$01
	.db #$04
	.db #$06
	.db #$02
	.db #$05
	.db #$07
TBL_DUCK_SCORES:
	.db #$05
	.db #$08
	.db #$10
	.db #$15
	.db #$16
	.db #$20
	.db #$24
	.db #$30
HITS_REQUIRED_FOR_LEVEL:
	.db #$06 ;Value
	.db #$06
	.db #$06
	.db #$06
	.db #$06
	.db #$06
	.db #$06
	.db #$06
	.db #$06
	.db #$06
	.db #$07
	.db #$07
	.db #$08
	.db #$08
	.db #$09
	.db #$09
	.db #$09
	.db #$09
	.db #$09
	.db #$0A
	.db #$FF ;EOF mark.
LEVEL_DATA_UNK:
	.db #$00
	.db #$08
	.db #$10
	.db #$18
	.db #$18
	.db #$20
	.db #$20
	.db #$28
TIMER_9D_STUFF?:
	.db #$28 ;Not sure yet.
	.db #$01
	.db #$80
	.db #$00
	.db #$00
	.db #$AA ;rests index to 0.
	.db #$01
	.db #$40
	.db #$02
	.db #$10
	.db #$03
	.db #$08
	.db #$02
	.db #$10
	.db #$03
	.db #$08
	.db #$02
	.db #$10
	.db #$03
	.db #$08
	.db #$02
	.db #$10
	.db #$03
	.db #$08
	.db #$00
UNK_TABLE_LOW:
	.LOW UNK_DATA_00_REAL ;copy protection pointer val?
UNK_TABLE_HIGH:
	.HIGH UNK_DATA_00_REAL ;copy protection ptr val? 2A00 Offset.
	.LOW UNK_DATA_00
	.HIGH UNK_DATA_00
	.LOW UNK_DATA_01
	.HIGH UNK_DATA_01
	.LOW UNK_DATA_02
	.HIGH UNK_DATA_02
	.LOW UNK_DATA_03
	.HIGH UNK_DATA_03
	.LOW UNK_DATA_04
	.HIGH UNK_DATA_04
	.LOW UNK_DATA_05
	.HIGH UNK_DATA_05
	.LOW UNK_DATA_06
	.HIGH UNK_DATA_06
	.LOW UNK_DATA_07
	.HIGH UNK_DATA_07
UNK_DATA_00:
	.db #$CD
	.db #$24
	.db #$57
	.db #$FF
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$1A
	.db #$D8
	.db #$1B
	.db #$18
	.db #$1E
	.db #$17
	.db #$0D
	.db #$21
	.db #$D8
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$21
	.db #$D8
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$21
	.db #$23
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FD
UNK_DATA_01:
	.db #$EE
	.db #$10
	.db #$35
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$10
	.db #$18
	.db #$FE
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
UNK_DATA_02:
	.db #$EF
	.db #$04
	.db #$23
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
UNK_DATA_03:
	.db #$CD
	.db #$24
	.db #$57
	.db #$FF
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$1A
	.db #$D8
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$21
	.db #$D8
	.db #$10
	.db #$18
	.db #$18
	.db #$0D
	.db #$FE
	.db #$21
	.db #$D8
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$21
	.db #$23
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FD
UNK_DATA_04:
	.db #$CC
	.db #$33
	.db #$5A
	.db #$FF
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$1A
	.db #$D8
	.db #$19
	.db #$0E
	.db #$1B
	.db #$0F
	.db #$0E
	.db #$0C
	.db #$1D
	.db #$FE
	.db #$21
	.db #$D8
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$21
	.db #$D8
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$00
	.db #$00
	.db #$00
	.db #$B7
	.db #$B7
	.db #$21
	.db #$23
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FD
UNK_DATA_05:
	.db #$EC
	.db #$1F
	.db #$3A
	.db #$FF
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$1A
	.db #$D8
	.db #$0F
	.db #$15
	.db #$22
	.db #$B7
	.db #$0A
	.db #$20
	.db #$0A
	.db #$22
	.db #$21
	.db #$23
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FD
UNK_DATA_06:
	.db #$CC
	.db #$33
	.db #$5A
	.db #$24
	.db #$FF
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$1A
	.db #$24
	.db #$24
	.db #$24
	.db #$D8
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$21
	.db #$24
	.db #$24
	.db #$24
	.db #$D8
	.db #$19
	.db #$0A
	.db #$1E
	.db #$1C
	.db #$0E
	.db #$21
	.db #$24
	.db #$24
	.db #$24
	.db #$D8
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$21
	.db #$24
	.db #$24
	.db #$24
	.db #$23
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FD
	.db #$24
	.db #$24
UNK_DATA_07:
	.db #$AB
	.db #$38
	.db #$5B
	.db #$FF
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$1A
	.db #$D8
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$21
	.db #$D8
	.db #$10
	.db #$0A
	.db #$16
	.db #$0E
	.db #$B7
	.db #$18
	.db #$1F
	.db #$0E
	.db #$1B
	.db #$21
	.db #$D8
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$21
	.db #$23
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FD
UNK_OBJ_DATA_OBJ_STATE_2_00:
	.db #$9C
	.db #$18
	.db #$14
	.db #$10
	.db #$01
	.db #$10
	.db #$02
	.db #$20
	.db #$03
	.db #$08
	.db #$02
	.db #$08
	.db #$01
	.db #$18
	.db #$00
	.db #$10
	.db #$0E
	.db #$08
	.db #$0D
	.db #$20
	.db #$0C
	.db #$08
	.db #$0D
	.db #$08
	.db #$0C
	.db #$B0
	.db #$0B
	.db #$80
	.db #$03
	.db #$40
	.db #$02
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_01:
	.db #$88
	.db #$10
	.db #$12
	.db #$28
	.db #$0F
	.db #$08
	.db #$00
	.db #$10
	.db #$01
	.db #$08
	.db #$02
	.db #$48
	.db #$03
	.db #$20
	.db #$04
	.db #$70
	.db #$0C
	.db #$30
	.db #$0D
	.db #$30
	.db #$0E
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_02:
	.db #$90
	.db #$20
	.db #$12
	.db #$60
	.db #$0D
	.db #$90
	.db #$03
	.db #$78
	.db #$02
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_03:
	.db #$78
	.db #$20
	.db #$13
	.db #$40
	.db #$0F
	.db #$10
	.db #$0E
	.db #$20
	.db #$0D
	.db #$18
	.db #$0B
	.db #$20
	.db #$0A
	.db #$50
	.db #$06
	.db #$28
	.db #$04
	.db #$38
	.db #$03
	.db #$78
	.db #$02
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_04:
	.db #$80
	.db #$10
	.db #$12
	.db #$20
	.db #$0D
	.db #$08
	.db #$0E
	.db #$08
	.db #$0F
	.db #$20
	.db #$03
	.db #$10
	.db #$02
	.db #$08
	.db #$0E
	.db #$20
	.db #$0D
	.db #$08
	.db #$0E
	.db #$08
	.db #$0F
	.db #$08
	.db #$01
	.db #$08
	.db #$03
	.db #$30
	.db #$04
	.db #$40
FRAME_14_DATA_01:
	.db #$05
	.db #$80
	.db #$0B
	.db #$30
	.db #$0E
	.db #$60
	.db #$0F
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_05:
	.db #$B8
	.db #$08
	.db #$14
	.db #$10
	.db #$04
	.db #$08
	.db #$03
	.db #$08
	.db #$02
	.db #$08
	.db #$01
	.db #$08
	.db #$00
	.db #$08
FRAME_2_DATA_03:
	.db #$0E
	.db #$08
	.db #$0D
	.db #$08
	.db #$0C
	.db #$50
	.db #$0B
	.db #$60
	.db #$0C
	.db #$10
	.db #$0D
	.db #$40
	.db #$02
	.db #$70
	.db #$01
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_06:
	.db #$70
	.db #$18
	.db #$12
	.db #$40
	.db #$0D
	.db #$10
	.db #$0F
	.db #$10
	.db #$02
	.db #$30
	.db #$04
	.db #$20
	.db #$05
	.db #$40
	.db #$03
	.db #$20
	.db #$04
	.db #$20
	.db #$03
	.db #$18
	.db #$02
	.db #$20
	.db #$01
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_07:
	.db #$B0
	.db #$10
	.db #$14
	.db #$28
	.db #$02
	.db #$18
	.db #$01
	.db #$30
	.db #$00
	.db #$10
	.db #$0F
	.db #$50
	.db #$0B
	.db #$60
	.db #$0C
	.db #$20
	.db #$0B
	.db #$70
	.db #$04
	.db #$80
	.db #$05
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_08:
	.db #$5A
	.db #$08
	.db #$13
	.db #$10
	.db #$02
	.db #$20
	.db #$0D
	.db #$10
	.db #$03
	.db #$10
	.db #$04
	.db #$10
	.db #$03
	.db #$58
	.db #$0D
	.db #$28
	.db #$03
	.db #$48
	.db #$04
	.db #$10
	.db #$03
	.db #$48
	.db #$0D
	.db #$80
	.db #$03
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_09:
	.db #$46
	.db #$20
	.db #$12
	.db #$20
	.db #$0E
	.db #$38
	.db #$04
	.db #$18
	.db #$02
	.db #$10
	.db #$04
	.db #$20
	.db #$06
	.db #$08
	.db #$05
	.db #$18
	.db #$04
	.db #$18
	.db #$02
	.db #$40
	.db #$01
	.db #$40
	.db #$00
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_0A:
	.db #$D0
	.db #$2A
	.db #$14
	.db #$30
	.db #$0C
	.db #$20
	.db #$0B
	.db #$20
	.db #$0C
	.db #$38
	.db #$0B
	.db #$48
	.db #$0C
	.db #$40
	.db #$02
	.db #$30
	.db #$0C
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_0B:
	.db #$70
	.db #$10
	.db #$12
	.db #$10
	.db #$0D
	.db #$20
	.db #$0E
	.db #$10
	.db #$0F
	.db #$10
	.db #$00
	.db #$30
	.db #$02
	.db #$10
	.db #$04
	.db #$10
	.db #$05
	.db #$60
	.db #$05
	.db #$20
	.db #$0B
	.db #$40
	.db #$0C
	.db #$08
	.db #$0D
	.db #$70
	.db #$03
	.db #$30
	.db #$02
	.db #$18
	.db #$00
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_0C:
	.db #$C0
	.db #$18
	.db #$12
	.db #$10
	.db #$0D
	.db #$40
	.db #$0B
	.db #$38
	.db #$0D
	.db #$08
	.db #$0B
	.db #$08
	.db #$0C
	.db #$10
	.db #$0D
	.db #$70
	.db #$03
	.db #$40
	.db #$02
	.db #$40
	.db #$01
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_0D:
	.db #$90
	.db #$18
	.db #$14
	.db #$20
	.db #$02
	.db #$28
	.db #$0D
	.db #$20
	.db #$0B
	.db #$20
	.db #$0B
	.db #$08
	.db #$0C
	.db #$10
	.db #$0D
	.db #$20
	.db #$03
	.db #$20
	.db #$05
	.db #$20
	.db #$04
	.db #$10
	.db #$02
	.db #$10
	.db #$03
	.db #$70
	.db #$0D
	.db #$40
	.db #$04
	.db #$50
	.db #$03
	.db #$20
	.db #$02
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_0E:
	.db #$58
	.db #$1C
	.db #$14
	.db #$24
	.db #$02
	.db #$08
	.db #$00
	.db #$48
	.db #$0C
	.db #$38
	.db #$0E
	.db #$50
	.db #$07
	.db #$30
	.db #$05
	.db #$30
	.db #$04
	.db #$28
	.db #$0D
	.db #$20
FRAME_1_DATA_03:
	.db #$02
	.db #$80
	.db #$01
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_0F:
	.db #$50
	.db #$20
	.db #$12
	.db #$20
	.db #$0D
	.db #$40
	.db #$03
	.db #$30
	.db #$0C
	.db #$40
	.db #$03
	.db #$30
	.db #$04
	.db #$38
	.db #$05
	.db #$08
	.db #$0B
	.db #$28
	.db #$0C
	.db #$08
	.db #$0D
	.db #$40
	.db #$03
	.db #$4A
	.db #$04
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_10:
	.db #$40
	.db #$E0
	.db #$01
UNK_OBJ_DATA_OBJ_STATE_2_11:
	.db #$80
	.db #$E0
	.db #$02
UNK_OBJ_DATA_OBJ_STATE_2_12:
	.db #$D0
	.db #$E0
	.db #$0E
UNK_OBJ_DATA_OBJ_STATE_2_13:
	.db #$38
	.db #$E0
	.db #$01
UNK_OBJ_DATA_OBJ_STATE_2_14:
	.db #$A0
	.db #$E0
	.db #$0D
UNK_OBJ_DATA_OBJ_STATE_2_15:
	.db #$30
	.db #$E0
	.db #$03
UNK_OBJ_DATA_OBJ_STATE_2_16:
	.db #$B0
	.db #$E0
	.db #$0E
UNK_OBJ_DATA_OBJ_STATE_2_17:
	.db #$90
	.db #$E0
	.db #$0F
UNK_OBJ_DATA_OBJ_STATE_2_18:
	.db #$40
	.db #$E0
	.db #$03
UNK_OBJ_DATA_OBJ_STATE_2_19:
	.db #$80
	.db #$E0
	.db #$03
UNK_OBJ_DATA_OBJ_STATE_2_1A:
	.db #$C8
	.db #$E0
	.db #$0E
UNK_OBJ_DATA_OBJ_STATE_2_1B:
	.db #$50
	.db #$E0
	.db #$0F
UNK_OBJ_DATA_OBJ_STATE_2_1C:
	.db #$B8
	.db #$E0
	.db #$0D
UNK_OBJ_DATA_OBJ_STATE_2_1D:
	.db #$20
	.db #$E0
	.db #$03
UNK_OBJ_DATA_OBJ_STATE_2_1E:
	.db #$48
	.db #$E0
	.db #$01
UNK_OBJ_DATA_OBJ_STATE_2_1F:
	.db #$B8
	.db #$E0
	.db #$0F
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
FRAME_15_DATA_03:
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
FRAME_17_DATA_07:
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
FRAME_12_DATA_03:
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
FRAME_12_DATA_01:
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
FRAME_15_DATA_01:
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
FRAME_11_DATA_05:
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
FRAME_13_DATA_01:
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
FRAME_A_DATA_01:
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
FRAME_14_DATA_05:
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
FRAME_B_DATA_01:
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
ANIM_FRAME_FILE_PTR_15:
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
ANIM_FRAME_FILE_PTR_03:
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
L_3300:
	.db #$07
L_3301:
	.db #$F0
	.db #$00
	.db #$00
	.db #$00
	.db #$D4
	.db #$00
	.db #$C8
	.db #$00
	.db #$BD
	.db #$00
	.db #$B2
	.db #$00
	.db #$A8
	.db #$00
	.db #$9F
	.db #$00
	.db #$96
	.db #$00
	.db #$8D
	.db #$00
	.db #$85
	.db #$00
	.db #$7E
	.db #$00
	.db #$70
	.db #$01
	.db #$AB
	.db #$01
	.db #$93
	.db #$01
	.db #$7C
	.db #$01
	.db #$67
	.db #$01
	.db #$52
	.db #$01
	.db #$3F
	.db #$01
	.db #$2D
	.db #$01
	.db #$1C
	.db #$01
	.db #$0C
	.db #$00
	.db #$FD
	.db #$00
	.db #$EE
	.db #$00
	.db #$E1
	.db #$03
	.db #$57
	.db #$02
	.db #$F9
	.db #$02
	.db #$CF
	.db #$02
	.db #$A6
	.db #$02
	.db #$80
	.db #$02
	.db #$5C
	.db #$02
	.db #$3A
	.db #$02
	.db #$1A
	.db #$01
	.db #$FC
	.db #$01
	.db #$DF
	.db #$01
	.db #$C4
	.db #$00
	.db #$69
	.db #$00
	.db #$63
	.db #$00
	.db #$53
	.db #$00
	.db #$4A
L_3350:
	.db #$03
	.db #$06
	.db #$0C
	.db #$18
	.db #$30
	.db #$12
	.db #$24
	.db #$04
	.db #$08
	.db #$10
	.db #$20
	.db #$40
	.db #$18
	.db #$30
SND_SETUP_SQ1(YX):
	.db #$A9
	.db #$00
	.db #$F0
	.db #$0A
SND_SETUP_TRI(YX):
	LDA #$08
	BNE SND_SETUP_RTN
SND_SETUP_NOISE(YX):
	LDA #$0C
	BNE SND_SETUP_RTN
SND_SETUP_SQ2(YX):
	LDA #$04 ;SND_SETUP_PULSE2
SND_SETUP_RTN:
	STA SND_F4 ;low byte
	LDA #$40
	STA SND_F5 ;high byte
	STX SND_F6 ;low
	STY SND_F7 ;high
	LDY #$00
LOOP_4_BYTES:
	LDA (SND_F6),Y
	STA (SND_F4),Y
	INY 
	TYA 
	CMP #$04
	BNE LOOP_4_BYTES
	RTS 
L_3383:
	STA SND_E6
	LDA L_3846,Y
	TAY 
	LDA L_3846,Y
	STA $E5
	LDA L_3847,Y
	STA $F8
	LDA L_3848,Y
	STA $F9
	LDA L_3849,Y
	STA $FA
	LDA L_384A,Y
	STA $FB
	LDA L_384B,Y
	STA $FC
	LDA L_384C,Y
	STA $FD
	LDA L_384D,Y
	STA $FE
	LDA L_384E,Y
	STA $FF
	LDA #$01
	STA $D8
	STA $D9
	STA $DA
	STA $DB
	LDA #$00
	STA SND_PLAY_F3
	STA $D0
	STA $D1
	STA $D2
	STA $D3
	STA APU_DMC_LOAD
	RTS 
L_33D0:
	LDA #$7F
	STA APU_PULSE1_SWEEP
	STA APU_PULSE2_SWEEP
	STX $E9
	STY $EA
	RTS 
SND_DATA_TRI:
	.db #$13
	.db #$7F
	.db #$3E
	.db #$F0
SND_TRI_DOG_LAUGH_DATA:
	.db #$4F ;DOGS LAUGH?
	.db #$53
	.db #$58
	.db #$5E
	.db #$63
	.db #$69
	.db #$70
	.db #$76
	.db #$7E
	.db #$85
	.db #$8D
	.db #$90
	.db #$92
	.db #$93
L_33EF:
	.db #$92
	.db #$D5
	.db #$40
	.db #$C0
SND_SQR_DATA:
	.db #$B2
	.db #$DF
	.db #$FF
	.db #$80
SND_NOISE_INDIRECT_DAT:
	.db #$02
	.db #$7F
	.db #$0F
	.db #$08
	.db #$00
	.db #$7F
	.db #$03
	.db #$08
	.db #$FF
L_3400:
	.db #$10
L_3401:
	.db #$00
L_3402:
	.db #$18
	.db #$10
FRAME_A_DATA_03:
	.db #$01
	.db #$18
	.db #$00
	.db #$01
	.db #$88
	.db #$06
	.db #$02
	.db #$40
	.db #$05
	.db #$02
	.db #$C0
L_340F:
	.db #$A5
	.db #$F9
	.db #$F0
	.db #$3E
	DEC $D8
	BNE L_3451
	LDX #$00
	LDA #$23
	STA $0612
	LDA #$2E
	STA $0610
	LDY $D0
	INC $D0
	LDA ($F8),Y
	BEQ L_3443
	JMP L_351C
	TYA 
	BPL L_343A
	JSR L_3544
	LDY $D0
	INC $D0
	LDA ($F8),Y
L_343A:
	JSR L_3550
	BNE L_3448
	LDY #$10
	BNE L_344A
L_3443:
	LDA #$00
	JMP L_368C
L_3448:
	LDY $E9
L_344A:
	STY APU_PULSE1_DUTY
	LDA $DC
	STA $D8
L_3451:
	LDA $FB
	BEQ L_347E
	DEC $D9
	BNE L_347E
	LDX #$01
	LDY $D1
	INC $D1
	LDA ($FA),Y
	BPL L_346C
	JSR L_3544
	LDY $D1
	INC $D1
	LDA ($FA),Y
L_346C:
	JSR L_3564
	BNE L_3475
	LDY #$10
	BNE L_3477
L_3475:
	LDY $EA
L_3477:
	STY APU_PULSE2_DUTY
	LDA $DD
	STA $D9
L_347E:
	LDA $FD
	BEQ L_34D1
	DEC $DA
	BNE L_34D1
	LDX #$02
	LDA #$9B
	STA $0610
	LDA #$92
	STA $0612
	LDY $D2
	INC $D2
	LDA ($FC),Y
	JMP L_351C
	TYA 
	BPL L_34BF
	JSR L_3544
	LDY SND_E4
	BEQ L_34A9
	LDA #$FF
	BNE L_34B4
L_34A9:
	CLC 
	ADC #$FE
	ASL A
	ASL A
	CMP #$3C
	BCC L_34B4
	LDA #$3C
L_34B4:
	STA APU_TRI_COUNTER
	STA $E7
	LDY $D2
	INC $D2
	LDA ($FC),Y
L_34BF:
	JSR L_3568
	BNE L_34C8
	LDY #$00
	BEQ L_34CA
L_34C8:
	LDY $E7
L_34CA:
	STY APU_TRI_COUNTER
	LDA $DE
	STA $DA
L_34D1:
	LDA $FF
	BEQ L_3501
	DEC $DB
	BNE L_3501
	LDX #$03
	LDA #$EE
	STA $0610
	LDA #$E5
	STA $0612
	LDY $D3
	INC $D3
	LDA ($FE),Y
	JMP L_351C
	TYA 
	BPL L_34FA
	JSR L_3544
FRAME_B_DATA_03:
	LDY $D3
	INC $D3
	LDA ($FE),Y
L_34FA:
	JSR L_3502
	LDA $DF
	STA $DB
L_3501:
	RTS 
L_3502:
	TAY 
	LDA SND_PLAY_F3
	CMP #$02
	BEQ L_351B
	LDA L_3400,Y
	STA APU_NOISE_COUNTER
	LDA L_3401,Y
	STA APU_NOISE_PERIOD
	LDA L_3402,Y
	STA APU_NOISE_LENGTH
L_351B:
	RTS 
L_351C:
	TAY 
	CMP #$FF
	BEQ L_352A
	AND #$C0
	CMP #$C0
	BEQ L_3536
	JMP ($0610)
L_352A:
	LDA $E0,X
	BEQ L_3541
	DEC $E0,X
	LDA $D4,X
	STA $D0,X
	BNE L_3541
L_3536:
	TYA 
	AND #$3F
	STA $E0,X
	DEC $E0,X
	LDA $D0,X
	STA $D4,X
L_3541:
	JMP ($0612)
L_3544:
	AND #$07
	CLC 
	ADC $E5
	TAY 
	LDA L_3350,Y
	STA $DC,X
	RTS 
L_3550:
	LDX #$00
L_3552:
	TAY 
	LDA L_3301,Y
	BEQ L_3563
	STA APU_PULSE1_TIMERL,X
	LDA L_3300,Y
	ORA #$08
	STA APU_PULSE1_TIMERH,X
L_3563:
	RTS 
L_3564:
	LDX #$04
	BNE L_3552
L_3568:
	LDX #$08
	BNE L_3552
PLAY_SOUNDS:
	LDA #$C0 ;enable 5-step, disable irq. bug?
	STA APU_FRAMECOUNTER
	JSR SND_SETUP
	JSR SND_PLAY_F0/F3
	JSR SND_PLAY_F1/F2
	JSR SND_PLAY_DMC ;DMC
	LDA #$00
	BEQ CLEAR_SOUND_STUFF
#F4->$611+613:
	LDA #$F4 ;as of 15 commits on git, still have no idea wtf this is.
	STA UNK_0613
	STA UNK_0611
	RTS 
CLEAR_SOUND_STUFF:
	STA SND_PLAY_F0 ;clear all flags.
	STA SND_PLAY_F1
	STA SND_PLAY_F2
	RTS 
SND_PLAY_DMC:
	LDA SND_PLAY_F2
	LSR A
	BCS SND_PLAY_DMC_FB00
	LSR A
	BCS SND_PLAY_DMC_FD00
	RTS 
SND_PLAY_DMC_FD00:
	LDA #$20 ;512 bytes in length
	LDX #$F4 ;FD00
	LDY #$0F ;playback rate
	BNE PLAY_DMC_SAMPLE(AXY)
SND_PLAY_DMC_FB00:
	LDA #$20 ;512 bytes
	LDX #$EC ;FB00
	LDY #$0E ;rate
PLAY_DMC_SAMPLE(AXY):
	STA APU_DMC_SAMLEN
	STX APU_DMC_SAMADDR
	STY APU_DMC_IRQ
	LDA #$1F
	STA APU_STATUS ;turn on DMC
	RTS 
	.db #$9F
	.db #$7F
	.db #$60
	.db #$00
	.db #$9F
	.db #$7F
	.db #$61
	.db #$00
INIT_DOG_LAUGH:
	LDX #$DD ;Uses $F3DD
	LDY #$F3
	JSR SND_SETUP_TRI(YX)
	LDA #$00 ;clear all counters
	STA SND_COUNTER_EB
	STA SND_INDEX_ED
	STA SND_COUNTER_EE
	LDA #$06
	STA SND_COUNTER_EF ;change target init
	LDA #$3E
	STA SND_EC ;dog laugh lenc_l
	LDA #$40
	STA SND_PLAY_F3 ;advance dog laugh?
L_RTS:
	RTS 
DOG_LAUGH_ADVANCE:
	INC SND_COUNTER_EE ;inc counter
	LDA SND_COUNTER_EE
	CMP #$01
	BNE L_RTS ;never taken, runs every frame.
	LDA #$00
	STA SND_COUNTER_EE ;this is why it runs every time.
	INC SND_COUNTER_EB ;update counter
	LDA SND_COUNTER_EB
	CMP SND_COUNTER_EF ;raise timer target
	BEQ LOWER_LAUGH_FREQ ;if match target, raise freq
	DEC SND_EC ;TRI_TIMERL copy
	DEC SND_EC ;decrease with math
	DEC SND_EC ;this makes it higher pitch
	LDA SND_EC
	STA APU_TRI_TIMERL ;store higher pitch to timer
	RTS 
LOWER_LAUGH_FREQ:
	LDA SND_COUNTER_EF ;update target
	CLC 
	ADC #$06 ;6 updates until we raise length counter again
	STA SND_COUNTER_EF ;store new target
	LDY SND_INDEX_ED ;get update count
	LDA SND_TRI_DOG_LAUGH_DATA,Y ;load timer for this update
	STA APU_TRI_TIMERL ;store data
	STA SND_EC ;Save to raise later
	LDA #$F0
	STA APU_TRI_TIMEH ;load length counter
	INC SND_INDEX_ED ;steps done++
	LDA SND_INDEX_ED
	CMP #$0E ;final step?
	BNE L_RTS ;no, dont clear vars.
	LDA #$00 ;clear state, we're done making laughing sounds
	STA APU_TRI_COUNTER
	STA SND_PLAY_F3
	RTS 
SND_PLAY_F0/F3:
	LDA SND_PLAY_F0
	ASL A
	BCS SET_PULSE2_DUTY
	ASL A
	BCS INIT_DOG_LAUGH
	ASL A
	BCS INIT_SQ1_F3F3
	ASL A
	BCS INIT_SQ1_F3EF
	LDA SND_PLAY_F3
	ASL A
	ASL A
	BCS DOG_LAUGH_ADVANCE
	ASL A
	BCS SND_WAIT_FRAMES_SET_DTY2
	RTS 
INIT_SQ1_F3EF:
	LDX #$EF
	LDY #$F3
	JSR SND_SETUP_SQ1(YX)
	RTS 
INIT_SQ1_F3F3:
	LDX #$F3
	LDY #$F3
	JSR SND_SETUP_SQ2(YX)
	LDA SND_PLAY_F3
	ORA #$20
	STA SND_PLAY_F3
	LDA #$00 ;clear counters
	STA SND_COUNTER_EF
	STA SND_COUNTER_EE
L_RTS:
	RTS 
SND_WAIT_FRAMES_SET_DTY2:
	INC SND_COUNTER_EE
	LDA SND_COUNTER_EE
	CMP #$02
	BNE L_RTS ;run every 2 frames
	LDA #$00
	STA SND_COUNTER_EE
	INC SND_COUNTER_EF
	LDA SND_COUNTER_EF
	CMP #$A0 ;wait 160*2 runs
	BNE L_RTS
SET_PULSE2_DUTY:
	LDA #$10
	STA APU_PULSE2_DUTY
	LDA SND_PLAY_F3
	AND #$DF ;unset bit 6
	STA SND_PLAY_F3
	RTS 
SETUP_NOISE_PULSE1:
	LDX #$F7
	LDY #$F3
	JSR SND_SETUP_NOISE(YX)
	LDA #$10
	STA APU_PULSE1_DUTY ;set constant volume
	LDA SND_PLAY_F3 ;only keep top bits?
	AND #$F0
	STA SND_PLAY_F3
	RTS 
DISABLE_ALL_SOUND_REGS:
	LDA #$00
	STA SND_PLAY_F3
L_368C:
	STA APU_TRI_COUNTER
	STA APU_DMC_LOAD
	STA SND_E6
	STA SND_E4
	LDA #$10
	STA APU_PULSE1_DUTY ;halt length counter
	STA APU_PULSE2_DUTY ;same
	STA APU_NOISE_COUNTER ;same
	RTS 
SND_SETUP_NOISE:
	LDX #$FB
	LDY #$F3
	JSR SND_SETUP_NOISE(YX)
	LDA #$00
	STA SND_COUNTER_EB
	LDA SND_PLAY_F3
	ORA #$08 ;noise = bit 3
	STA SND_PLAY_F3
L_36B3:
	RTS 
SND_SHOT_PERIOD:
	LDY SND_COUNTER_EB
	LDA NOISE_PERIODS,Y
	STA APU_NOISE_PERIOD
	INC SND_COUNTER_EB
	LDA SND_COUNTER_EB
	CMP #$04
	BNE L_36B3 ;rts
	LDA SND_PLAY_F3
	AND #$FE ;clear bit 0
	STA SND_PLAY_F3
	RTS 
NOISE_PERIODS:
	.db #$00
	.db #$02
	.db #$01
	.db #$00
SND_SETUP:
	LDA SND_PLAY_F0
	LSR A
	BCS DISABLE_ALL_SOUND_REGS
	LSR A
	BCS SETUP_NOISE_DMC
	LSR A
	BCS SETUP_NOISE_PULSE1
	LSR A
	BCS SND_SETUP_NOISE
	LDA SND_PLAY_F3
	LSR A
	LSR A
	BCS FWD_NOISE?
	LSR A
	LSR A
	BCS SND_SHOT_PERIOD ;NOISE
	RTS 
SETUP_NOISE_DMC:
	LDX #$FF
	LDY #$F6
	JSR SND_SETUP_NOISE(YX)
	LDA #$00
	STA SND_EC ;clear whatever these are
	STA SND_INDEX_ED
	STA APU_DMC_LOAD ;clear dmc level
	LDA SND_PLAY_F3
	ORA #$02 ;DMC+NOISE = bit 1
	STA SND_PLAY_F3
L_36FE:
	RTS 
SND_INDIR_UNREF_DATA_NOISE:
	.db #$3F
	.db #$7F
	.db #$0F
	.db #$08
FWD_NOISE?:
	INC SND_EC
	LDA SND_EC
	CMP #$02
	BNE L_36FE
	LDA #$00
	STA SND_EC
	LDY SND_INDEX_ED
	LDA L_3731,Y
	STA APU_NOISE_PERIOD
	LDA L_3761,Y
	STA APU_NOISE_COUNTER
	INC SND_INDEX_ED
	LDA SND_INDEX_ED
	CMP #$30
	BNE L_3730
	LDA #$10
	STA APU_NOISE_COUNTER
	LDA SND_PLAY_F3
	AND #$FD
	STA SND_PLAY_F3
L_3730:
	RTS 
L_3731:
	.db #$0E
	.db #$0B
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$04
	.db #$04
	.db #$04
	.db #$04
	.db #$04
	.db #$04
	.db #$03
	.db #$03
	.db #$03
	.db #$03
	.db #$03
	.db #$04
	.db #$03
	.db #$02
	.db #$02
	.db #$02
	.db #$02
	.db #$02
	.db #$02
	.db #$02
	.db #$02
	.db #$01
	.db #$01
	.db #$01
	.db #$02
	.db #$02
	.db #$01
	.db #$01
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
L_3761:
	.db #$3F
	.db #$3F
	.db #$3F
	.db #$3F
	.db #$3F
	.db #$3F
	.db #$3D
	.db #$3C
	.db #$38
	.db #$38
	.db #$38
	.db #$37
	.db #$37
	.db #$37
	.db #$36
	.db #$36
	.db #$34
	.db #$34
	.db #$34
	.db #$34
	.db #$34
	.db #$34
	.db #$34
	.db #$34
	.db #$33
	.db #$33
	.db #$33
	.db #$33
	.db #$33
	.db #$33
	.db #$33
	.db #$33
	.db #$32
	.db #$32
	.db #$32
	.db #$32
	.db #$32
	.db #$32
	.db #$32
	.db #$32
	.db #$32
	.db #$32
	.db #$32
	.db #$32
	.db #$32
	.db #$32
	.db #$32
	.db #$32
L_3791:
	LDX #$B7
	LDY #$F5
	JSR SND_SETUP_SQ1(YX)
	LDX #$BB
	LDY #$F5
L_379C:
	JSR SND_SETUP_SQ2(YX)
	RTS 
	.db #$84
	.db #$93
	.db #$70
	.db #$E3
	.db #$84
	.db #$93
	.db #$72
	.db #$E3
L_37A8:
	LDA #$00
	STA APU_PULSE1_DUTY
	LDX #$A0
	LDY #$F7
	JSR SND_SETUP_SQ1(YX)
	LDX #$A4
	LDY #$F7
	BNE L_379C
L_37BA:
	LDY #$06
	LDA #$80
	BNE L_382F
L_37C0:
	LDY #$04
	LDA #$04
	BNE L_3826
L_37C6:
	LDY #$05
	LDA #$08
	BNE L_3826
SND_PLAY_F1/F2:
	LDA SND_PLAY_F1
	LSR A
	BCS L_37FD
	LSR A
	BCS L_3803
	LSR A
	BCS L_37C0
	LSR A
	BCS L_37C6
	LSR A
	BCS L_3809
	LSR A
	BCS L_380F
	LSR A
	BCS L_3815
	LSR A
	BCS L_37BA
	LDA SND_PLAY_F2
	ASL A
	BCS L_381B
	ASL A
	ASL A
	BCS L_3791
	ASL A
	BCS L_3840
	ASL A
	BCS L_37A8
	LDA SND_E6
	BNE L_37FA
	RTS 
L_37FA:
	JMP L_340F
L_37FD:
	LDY #$00
	LDA #$01
	BNE L_3826
L_3803:
	LDY #$03
	LDA #$02
	BNE L_382F
L_3809:
	LDY #$01
	LDA #$10
	BNE L_3826
L_380F:
	LDY #$07
	LDA #$20
	BNE L_3826
L_3815:
	LDY #$02
	LDA #$40
	BNE L_3826
L_381B:
	LDA #$10
	STA APU_NOISE_COUNTER
	LDY #$08
	LDA #$EF
	BNE L_382F
L_3826:
	JSR L_3383
	LDX #$C0
	LDY #$C0
	BNE L_3836
L_382F:
	JSR L_3383
	LDX #$86
	LDY #$86
L_3836:
	JSR L_33D0
	LDA #$00
	STA SND_E4
	JMP L_340F
L_3840:
	LDY #$09
	LDA #$EF
	BNE L_3826
L_3846:
	.db #$0A
L_3847:
	.db #$13
L_3848:
	.db #$1C
L_3849:
	.db #$25
L_384A:
	.db #$2E
L_384B:
	.db #$37
L_384C:
	.db #$40
L_384D:
	.db #$49
L_384E:
	.db #$52
	.db #$5B
	.db #$07
	.db #$C3
	.db #$F8
	.db #$E2
	.db #$F8
	.db #$08
	.db #$F9
	.db #$1B
	.db #$F9
	.db #$07
	.db #$2F
	.db #$F9
	.db #$60
	.db #$F9
	.db #$A1
	.db #$F9
	.db #$CC
	.db #$F9
	.db #$07
	.db #$AF
	.db #$FA
	.db #$CA
	.db #$FA
	.db #$E4
	.db #$FA
	.db #$F5
	.db #$FA
	.db #$07
	.db #$DA
	.db #$F9
	.db #$F7
	.db #$F9
	.db #$13
	.db #$FA
	.db #$28
	.db #$FA
	.db #$07
	.db #$2F
	.db #$FA
	.db #$3F
	.db #$FA
	.db #$64
	.db #$FA
	.db #$80
	.db #$FA
	.db #$07
	.db #$91
	.db #$FA
	.db #$9A
	.db #$FA
	.db #$A7
	.db #$FA
	.db #$00
	.db #$00
	.db #$07
	.db #$BD
	.db #$F8
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$26
	.db #$F9
	.db #$2A
	.db #$F9
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$AA
	.db #$F8
	.db #$B1
	.db #$F8
	.db #$B7
	.db #$F8
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$FF
	.db #$18
	.db #$FF
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$85
	.db #$3E
	.db #$3C
	.db #$3A
	.db #$38
	.db #$36
	.db #$00
	.db #$85
	.db #$44
	.db #$42
	.db #$40
	.db #$3E
	.db #$3C
	.db #$85
	.db #$3E
	.db #$3C
	.db #$3A
	.db #$38
	.db #$36
	.db #$C3
	.db #$80
	.db #$10
	.db #$4E
	.db #$FF
	.db #$00
	.db #$84
	.db #$02
	.db #$81
	.db #$02
	.db #$2A
	.db #$2A
	.db #$02
	.db #$2C
	.db #$02
	.db #$2C
	.db #$02
	.db #$2E
	.db #$30
	.db #$02
	.db #$22
	.db #$83
	.db #$02
	.db #$81
	.db #$02
	.db #$08
	.db #$02
	.db #$02
	.db #$06
	.db #$02
	.db #$06
	.db #$02
	.db #$28
	.db #$2A
	.db #$02
	.db #$22
	.db #$00
	.db #$84
	.db #$02
	.db #$81
	.db #$02
	.db #$80
	.db #$46
	.db #$46
	.db #$81
	.db #$46
	.db #$02
	.db #$1C
	.db #$1E
	.db #$20
	.db #$22
	.db #$80
	.db #$28
	.db #$28
	.db #$81
FRAME_18_DATA_01:
	.db #$2A
	.db #$02
	.db #$40
	.db #$83
FRAME_8_DATA_01:
	.db #$02
	.db #$81
	.db #$02
	.db #$30
	.db #$02
	.db #$02
	.db #$80
	.db #$2C
	.db #$2C
	.db #$81
	.db #$1E
	.db #$20
	.db #$22
	.db #$30
	.db #$83
	.db #$02
	.db #$C6
	.db #$80
	.db #$0C
	.db #$02
	.db #$0C
	.db #$02
	.db #$18
	.db #$02
	.db #$18
	.db #$02
	.db #$4C
	.db #$02
	.db #$4C
	.db #$02
	.db #$18
	.db #$02
	.db #$18
	.db #$02
	.db #$FF
	.db #$C6
	.db #$81
	.db #$03
	.db #$03
	.db #$06
	.db #$06
	.db #$03
	.db #$03
	.db #$06
	.db #$03
	.db #$FF
	.db #$81
	.db #$16
	.db #$4A
	.db #$00
	.db #$80
	.db #$02
	.db #$81
	.db #$16
	.db #$4A
	.db #$81
	.db #$0C
	.db #$0C
	.db #$12
	.db #$02
	.db #$0C
	.db #$02
	.db #$12
	.db #$02
	.db #$0E
	.db #$0E
	.db #$16
	.db #$02
	.db #$0E
	.db #$02
	.db #$16
	.db #$02
	.db #$0C
	.db #$0C
	.db #$12
	.db #$02
	.db #$0C
	.db #$02
	.db #$12
	.db #$02
	.db #$12
	.db #$10
	.db #$0E
	.db #$0C
	.db #$08
	.db #$04
	.db #$30
	.db #$02
	.db #$80
	.db #$04
	.db #$04
	.db #$81
	.db #$08
	.db #$0A
	.db #$0C
	.db #$80
	.db #$0E
	.db #$0E
	.db #$81
	.db #$12
	.db #$16
	.db #$18
	.db #$48
	.db #$00
	.db #$80
	.db #$04
	.db #$04
	.db #$81
	.db #$04
	.db #$22
	.db #$28
	.db #$04
	.db #$22
	.db #$24
	.db #$28
	.db #$80
	.db #$2C
	.db #$2C
	.db #$81
	.db #$2C
	.db #$24
	.db #$2C
	.db #$04
	.db #$2C
	.db #$80
	.db #$04
	.db #$30
	.db #$2C
	.db #$28
	.db #$80
	.db #$04
	.db #$04
	.db #$81
	.db #$22
	.db #$24
	.db #$10
	.db #$28
	.db #$2A
	.db #$2C
	.db #$2E
	.db #$80
	.db #$30
	.db #$30
	.db #$81
	.db #$2E
	.db #$2C
	.db #$28
	.db #$80
	.db #$24
	.db #$24
	.db #$81
	.db #$22
	.db #$1E
	.db #$02
	.db #$80
	.db #$22
	.db #$22
	.db #$81
	.db #$24
	.db #$26
	.db #$28
	.db #$80
	.db #$2C
	.db #$2C
	.db #$81
	.db #$30
	.db #$04
	.db #$08
	.db #$0C
	.db #$81
	.db #$1A
	.db #$1A
	.db #$02
	.db #$20
	.db #$22
	.db #$02
	.db #$3E
	.db #$02
	.db #$3A
	.db #$3A
	.db #$02
	.db #$40
	.db #$42
	.db #$02
	.db #$1A
	.db #$42
	.db #$1A
	.db #$32
	.db #$02
	.db #$34
	.db #$36
	.db #$38
	.db #$3A
	.db #$02
	.db #$3E
	.db #$82
	.db #$3E
	.db #$81
	.db #$42
	.db #$44
	.db #$46
	.db #$3E
	.db #$02
	.db #$1A
	.db #$1A
	.db #$02
	.db #$38
	.db #$3A
	.db #$3A
	.db #$02
	.db #$3A
	.db #$1A
	.db #$C8
	.db #$81
	.db #$06
	.db #$03
	.db #$06
	.db #$80
	.db #$09
	.db #$03
	.db #$81
	.db #$03
	.db #$03
	.db #$82
	.db #$0C
	.db #$FF
	.db #$81
	.db #$2A
	.db #$2A
	.db #$28
	.db #$02
	.db #$26
	.db #$02
	.db #$24
	.db #$02
	.db #$85
	.db #$22
	.db #$81
	.db #$24
	.db #$83
	.db #$02
	.db #$81
	.db #$02
	.db #$0E
	.db #$06
	.db #$2A
	.db #$2A
	.db #$28
	.db #$26
	.db #$24
	.db #$85
	.db #$22
	.db #$81
	.db #$24
	.db #$00
	.db #$81
	.db #$24
	.db #$24
	.db #$22
	.db #$02
FRAME_19_DATA_05:
	.db #$20
	.db #$02
	.db #$1E
	.db #$02
	.db #$85
	.db #$3E
	.db #$81
	.db #$40
	.db #$83
	.db #$02
	.db #$81
	.db #$02
	.db #$2A
	.db #$24
	.db #$1C
	.db #$1A
	.db #$46
	.db #$44
	.db #$40
	.db #$85
FRAME_8_DATA_07:
	.db #$3E
	.db #$81
	.db #$40
	.db #$84
	.db #$02
	.db #$85
	.db #$1A
	.db #$81
	.db #$1C
	.db #$83
	.db #$02
	.db #$81
	.db #$02
	.db #$4A
	.db #$14
	.db #$0E
	.db #$0A
	.db #$08
	.db #$06
	.db #$04
	.db #$85
	.db #$1A
	.db #$81
	.db #$1C
	.db #$CC
	.db #$81
	.db #$06
	.db #$06
	.db #$09
	.db #$03
	.db #$FF
	.db #$82
	.db #$08
	.db #$10
	.db #$16
	.db #$48
	.db #$18
	.db #$02
	.db #$12
	.db #$02
	.db #$10
	.db #$0C
	.db #$08
	.db #$06
	.db #$81
	.db #$08
	.db #$00
	.db #$81
	.db #$26
	.db #$26
	.db #$82
	.db #$2C
	.db #$81
	.db #$08
	.db #$0C
	.db #$10
	.db #$16
	.db #$80
	.db #$12
	.db #$12
	.db #$81
	.db #$28
	.db #$10
	.db #$0C
	.db #$30
	.db #$2E
	.db #$30
	.db #$04
	.db #$80
	.db #$2C
	.db #$2C
	.db #$81
	.db #$08
	.db #$28
	.db #$30
	.db #$80
	.db #$26
	.db #$26
	.db #$81
	.db #$2C
	.db #$22
	.db #$2C
	.db #$82
	.db #$26
	.db #$85
	.db #$1E
	.db #$81
	.db #$1E
	.db #$82
	.db #$3C
	.db #$3C
	.db #$85
	.db #$3E
	.db #$81
	.db #$3E
	.db #$85
	.db #$3E
	.db #$81
	.db #$3E
	.db #$85
	.db #$42
	.db #$81
	.db #$42
	.db #$85
	.db #$42
	.db #$81
	.db #$42
	.db #$82
	.db #$1E
	.db #$81
	.db #$1E
	.db #$1E
	.db #$C4
	.db #$81
	.db #$06
	.db #$82
	.db #$0C
	.db #$81
	.db #$06
	.db #$80
	.db #$09
	.db #$03
	.db #$03
	.db #$03
	.db #$09
	.db #$03
	.db #$03
	.db #$03
	.db #$FF
	.db #$81
	.db #$0A
	.db #$24
	.db #$26
	.db #$28
	.db #$2E
	.db #$0A
	.db #$04
	.db #$00
	.db #$80
	.db #$12
	.db #$12
	.db #$81
	.db #$0A
	.db #$0A
	.db #$80
	.db #$20
	.db #$20
	.db #$81
	.db #$28
	.db #$2E
	.db #$2A
	.db #$81
	.db #$20
	.db #$02
	.db #$20
	.db #$28
	.db #$02
	.db #$28
	.db #$2A
	.db #$82
	.db #$02
	.db #$81
	.db #$0E
	.db #$08
	.db #$04
	.db #$2C
	.db #$2A
	.db #$28
	.db #$24
	.db #$1E
	.db #$1C
	.db #$1A
	.db #$1E
	.db #$24
	.db #$2E
	.db #$24
	.db #$2C
	.db #$04
	.db #$28
	.db #$2E
	.db #$08
	.db #$28
	.db #$30
	.db #$0E
	.db #$0C
	.db #$00
	.db #$82
	.db #$02
	.db #$81
	.db #$2C
	.db #$2C
	.db #$02
	.db #$02
	.db #$1E
	.db #$02
	.db #$02
	.db #$02
	.db #$02
	.db #$02
	.db #$44
	.db #$1E
	.db #$24
	.db #$42
	.db #$1A
	.db #$2C
	.db #$44
	.db #$1E
	.db #$24
	.db #$46
	.db #$1E
	.db #$1E
	.db #$28
	.db #$82
	.db #$1E
	.db #$81
	.db #$1E
	.db #$85
	.db #$22
	.db #$24
	.db #$3C
	.db #$82
	.db #$3E
	.db #$81
	.db #$3E
	.db #$85
	.db #$42
	.db #$44
	.db #$46
	.db #$1A
	.db #$C5
	.db #$81
	.db #$06
	.db #$06
	.db #$06
	.db #$09
	.db #$03
FRAME_1A_DATA_05:
	.db #$06
	.db #$FF
	.db #$FF
	.db #$FF
SND_SAMPLE_1:
	.db #$55
	.db #$AD
	.db #$4A
	.db #$55
	.db #$D5
	.db #$AA
	.db #$52
	.db #$55
	.db #$AD
	.db #$2A
	.db #$55
	.db #$B5
	.db #$2A
	.db #$49
	.db #$BB
ANIM_FRAME_FILE_PTR_04:
	.db #$55
FRAME_7_DATA_07:
	.db #$45
	.db #$A9
	.db #$6E
	.db #$53
	.db #$44
	.db #$B5
	.db #$6B
	.db #$15
	.db #$A5
	.db #$DA
	.db #$56
	.db #$49
	.db #$A4
	.db #$FB
	.db #$96
	.db #$10
	.db #$D5
	.db #$FA
	.db #$4A
	.db #$50
	.db #$B6
	.db #$5B
	.db #$45
	.db #$B2
	.db #$B6
	.db #$4B
	.db #$01
	.db #$E9
	.db #$FF
	.db #$45
	.db #$00
	.db #$BA
	.db #$FF
	.db #$01
	.db #$90
	.db #$FE
	.db #$57
	.db #$04
	.db #$B5
	.db #$2F
	.db #$01
	.db #$B5
	.db #$FF
	.db #$01
	.db #$44
	.db #$FE
	.db #$1F
	.db #$01
	.db #$B0
	.db #$FF
	.db #$17
	.db #$00
	.db #$E8
	.db #$FF
	.db #$17
	.db #$00
	.db #$FA
	.db #$7F
	.db #$01
	.db #$50
	.db #$FB
	.db #$1B
	.db #$41
	.db #$EA
	.db #$BF
	.db #$04
	.db #$50
	.db #$FB
	.db #$2F
	.db #$01
	.db #$D2
	.db #$FE
	.db #$4B
	.db #$00
	.db #$F8
	.db #$FF
	.db #$05
	.db #$40
	.db #$FB
	.db #$4F
	.db #$40
	.db #$EA
	.db #$2B
	.db #$55
	.db #$B5
	.db #$2B
	.db #$11
	.db #$D1
	.db #$FE
	.db #$45
	.db #$44
	.db #$6D
	.db #$55
	.db #$D5
	.db #$6A
	.db #$45
	.db #$D4
	.db #$FA
	.db #$2A
	.db #$49
	.db #$45
	.db #$51
	.db #$FF
	.db #$6E
	.db #$04
	.db #$A0
	.db #$FE
	.db #$1F
	.db #$01
	.db #$11
	.db #$FB
	.db #$BF
	.db #$12
	.db #$10
	.db #$B5
	.db #$FF
	.db #$4A
	.db #$04
	.db #$C0
	.db #$FE
	.db #$7F
	.db #$00
	.db #$A8
	.db #$FF
	.db #$15
	.db #$95
	.db #$04
	.db #$B8
	.db #$FF
	.db #$4B
	.db #$04
	.db #$E4
	.db #$FE
	.db #$17
	.db #$00
	.db #$F8
	.db #$FF
	.db #$03
	.db #$00
	.db #$EE
	.db #$FF
	.db #$07
	.db #$00
	.db #$E8
	.db #$FF
	.db #$17
	.db #$00
	.db #$E8
	.db #$FF
	.db #$1F
	.db #$00
	.db #$F0
	.db #$FF
	.db #$03
	.db #$00
	.db #$FE
	.db #$FF
	.db #$00
	.db #$80
	.db #$FF
	.db #$1F
	.db #$00
	.db #$F0
	.db #$FF
	.db #$1F
	.db #$00
	.db #$E0
	.db #$FF
	.db #$0F
	.db #$00
	.db #$E8
	.db #$FF
	.db #$07
	.db #$00
	.db #$FE
	.db #$FF
	.db #$01
	.db #$00
	.db #$FF
	.db #$7F
	.db #$00
	.db #$A0
	.db #$FF
	.db #$0F
	.db #$00
	.db #$F8
	.db #$FF
	.db #$03
	.db #$00
	.db #$FE
	.db #$7F
	.db #$00
	.db #$E0
	.db #$FF
	.db #$0F
	.db #$00
	.db #$F8
	.db #$FF
	.db #$01
	.db #$80
	.db #$FF
	.db #$1F
	.db #$00
	.db #$F8
	.db #$FF
	.db #$03
	.db #$00
	.db #$FE
	.db #$1F
	.db #$00
	.db #$FE
	.db #$7F
	.db #$01
	.db #$80
	.db #$FF
	.db #$07
	.db #$C0
	.db #$FE
	.db #$3F
	.db #$00
	.db #$D8
	.db #$7F
	.db #$00
	.db #$F8
	.db #$FF
	.db #$17
	.db #$00
SND_INDIR_DAT:
	.db #$F8
	.db #$0F
	.db #$80
	.db #$FF
	.db #$7F
	.db #$01
	.db #$80
	.db #$7F
	.db #$40
	.db #$B5
	.db #$FE
	.db #$3F
	.db #$00
FRAME_1D_DATA_03:
	.db #$E8
FRAME_1C_DATA_05:
	.db #$03
	.db #$F4
FRAME_19_DATA_03:
	.db #$BF
	.db #$E4
	.db #$5E
	.db #$01
	.db #$10
	.db #$EE
	.db #$BF
	.db #$90
	.db #$FF
	.db #$05
	.db #$00
	.db #$FC
	.db #$7F
FRAME_6_DATA_03:
	.db #$00
	.db #$F8
	.db #$7F
	.db #$00
	.db #$F0
	.db #$FF
	.db #$01
	.db #$E0
	.db #$FF
	.db #$04
	.db #$A0
	.db #$FF
	.db #$07
	.db #$80
	.db #$FE
	.db #$0F
	.db #$00
	.db #$FF
	.db #$1F
	.db #$00
	.db #$F8
	.db #$FF
	.db #$00
	.db #$E0
	.db #$FF
	.db #$05
	.db #$A0
	.db #$FF
	.db #$07
	.db #$00
	.db #$FE
	.db #$3F
	.db #$00
	.db #$FA
	.db #$3F
	.db #$00
	.db #$F8
	.db #$FF
	.db #$00
	.db #$ED
	.db #$17
	.db #$00
	.db #$FB
	.db #$5F
	.db #$A0
	.db #$FB
	.db #$13
	.db #$00
	.db #$FC
	.db #$3F
	.db #$00
	.db #$FB
	.db #$3F
	.db #$00
	.db #$E8
	.db #$FF
	.db #$00
	.db #$E0
	.db #$FF
	.db #$07
	.db #$00
	.db #$FF
	.db #$0F
	.db #$00
	.db #$FF
	.db #$7F
	.db #$00
	.db #$E0
	.db #$7F
	.db #$01
	.db #$F0
	.db #$FF
	.db #$07
	.db #$00
	.db #$FE
	.db #$1F
	.db #$00
	.db #$F8
	.db #$FF
	.db #$01
	.db #$80
	.db #$FF
	.db #$07
	.db #$80
	.db #$FF
	.db #$7F
	.db #$00
	.db #$E0
	.db #$FF
	.db #$01
	.db #$A0
	.db #$FF
	.db #$0F
	.db #$00
	.db #$FA
	.db #$7F
	.db #$00
	.db #$E8
	.db #$FF
	.db #$01
	.db #$80
	.db #$FF
	.db #$1F
	.db #$00
	.db #$F8
	.db #$FF
	.db #$01
	.db #$80
	.db #$FF
	.db #$1F
	.db #$00
	.db #$F8
	.db #$FF
	.db #$01
	.db #$A0
	.db #$FF
	.db #$0F
	.db #$00
	.db #$F8
	.db #$FF
	.db #$01
	.db #$A0
	.db #$FF
	.db #$1F
	.db #$00
	.db #$F0
	.db #$FF
	.db #$05
	.db #$E0
	.db #$BF
	.db #$12
	.db #$00
	.db #$F8
	.db #$FF
	.db #$07
	.db #$80
	.db #$FE
	.db #$3F
	.db #$00
	.db #$11
	.db #$EA
	.db #$FE
	.db #$17
	.db #$E8
	.db #$AA
	.db #$EE
	.db #$04
	.db #$A9
	.db #$15
	.db #$81
	.db #$FB
	.db #$5F
	.db #$51
	.db #$A4
	.db #$FB
	.db #$01
	.db #$A0
	.db #$FF
	.db #$03
	.db #$40
	.db #$FE
	.db #$FF
	.db #$00
	.db #$C0
	.db #$FF
	.db #$47
	.db #$00
	.db #$EB
	.db #$5F
	.db #$00
	.db #$B4
	.db #$FF
	.db #$0F
	.db #$00
	.db #$EC
	.db #$FF
	.db #$05
	.db #$80
	.db #$EE
	.db #$57
	.db #$11
	.db #$D5
	.db #$BE
	.db #$45
	.db #$A4
	.db #$D6
	.db #$AA
	.db #$54
	.db #$55
	.db #$D5
	.db #$54
	.db #$AA
	.db #$BA
	.db #$52
	.db #$D5
	.db #$B6
	.db #$54
	.db #$4A
	.db #$A9
	.db #$2A
	.db #$55
	.db #$BB
	.db #$4D
	.db #$A5
	.db #$94
	.db #$6A
	.db #$AB
	.db #$4A
	.db #$55
	.db #$AD
	.db #$2B
	.db #$11
	.db #$A9
	.db #$AE
	.db #$B7
	.db #$44
	.db #$DA
	.db #$56
	.db #$15
	.db #$91
	.db #$FA
	.db #$AB
	.db #$14
	.db #$A5
FRAME_4_DATA_03:
	.db #$AD
	.db #$4A
	.db #$A4
	.db #$BE
	.db #$AB
FRAME_19_DATA_01:
	.db #$14
	.db #$49
FRAME_1C_DATA_01:
	.db #$EB
FRAME_24_DATA_01:
	.db #$56
FRAME_1E_DATA_01:
	.db #$25
	.db #$D1
FRAME_20_DATA_03:
	.db #$6E
FRAME_23_DATA_01:
	.db #$4B
FRAME_22_DATA_03:
	.db #$91
	.db #$54
FRAME_1E_DATA_03:
	.db #$EB
	.db #$AA
	.db #$52
	.db #$55
	.db #$55
	.db #$53
	.db #$55
	.db #$55
	.db #$55
	.db #$AB
	.db #$AA
	.db #$54
	.db #$55
	.db #$55
	.db #$AB
	.db #$AA
	.db #$54
	.db #$55
	.db #$D5
	.db #$52
	.db #$A9
	.db #$AE
	.db #$2B
	.db #$45
	.db #$52
	.db #$6B
	.db #$AB
	.db #$AA
	.db #$AA
	.db #$52
	.db #$55
	.db #$55
	.db #$B5
	.db #$AA
	.db #$52
	.db #$D5
	.db #$52
	.db #$55
	.db #$55
	.db #$AD
	.db #$A6
	.db #$52
	.db #$55
	.db #$55
	.db #$D5
	.db #$AA
	.db #$2A
	.db #$55
	.db #$95
	.db #$AA
	.db #$ED
	.db #$4A
	.db #$91
	.db #$D4
	.db #$6A
	.db #$AB
	.db #$AA
	.db #$2A
	.db #$55
	.db #$55
	.db #$55
	.db #$55
	.db #$55
	.db #$D5
	.db #$AA
	.db #$54
	.db #$59
	.db #$AB
	.db #$2A
	.db #$55
	.db #$55
	.db #$55
	.db #$55
	.db #$AD
	.db #$AA
	.db #$14
	.db #$B5
	.db #$BB
	.db #$46
	.db #$44
	.db #$D5
	.db #$BA
	.db #$AA
	.db #$AA
	.db #$52
	.db #$A5
	.db #$6A
	.db #$D5
	.db #$2A
	.db #$55
	.db #$55
	.db #$2B
	.db #$55
	.db #$D5
	.db #$AA
	.db #$52
	.db #$95
	.db #$6A
	.db #$B5
	.db #$AA
	.db #$2A
	.db #$45
	.db #$EA
	.db #$7B
	.db #$15
	.db #$41
	.db #$AA
	.db #$DB
	.db #$5A
	.db #$95
	.db #$52
	.db #$A5
	.db #$55
	.db #$D5
	.db #$54
	.db #$55
	.db #$B5
	.db #$AA
	.db #$AA
	.db #$AA
	.db #$54
	.db #$AA
	.db #$DA
	.db #$5A
	.db #$A9
	.db #$54
	.db #$A9
	.db #$D4
	.db #$EE
	.db #$55
	.db #$04
	.db #$A9
	.db #$EB
	.db #$5A
	.db #$4A
	.db #$55
	.db #$B5
	.db #$52
	.db #$55
	.db #$5A
	.db #$55
	.db #$AD
	.db #$56
	.db #$15
	.db #$91
	.db #$BA
	.db #$6B
	.db #$55
	.db #$49
	.db #$A9
	.db #$B6
	.db #$44
	.db #$B9
	.db #$BF
	.db #$44
	.db #$A0
	.db #$BA
	.db #$6B
	.db #$52
	.db #$D5
	.db #$AA
	.db #$4A
	.db #$A9
	.db #$AA
	.db #$AD
	.db #$AA
	.db #$2B
	.db #$11
	.db #$A9
	.db #$BE
	.db #$2E
	.db #$45
	.db #$69
	.db #$6B
	.db #$49
	.db #$90
	.db #$FE
	.db #$5F
	.db #$00
	.db #$E8
	.db #$3F
	.db #$05
	.db #$B5
	.db #$AF
	.db #$12
	.db #$51
	.db #$6D
	.db #$AB
	.db #$54
	.db #$DB
	.db #$12
	.db #$91
	.db #$FA
	.db #$56
	.db #$52
	.db #$6D
	.db #$53
	.db #$44
	.db #$C4
	.db #$FF
	.db #$17
	.db #$00
	.db #$FD
	.db #$13
	.db #$A4
	.db #$EF
	.db #$46
	.db #$A8
	.db #$56
	.db #$95
	.db #$D5
	.db #$AA
	.db #$AA
	.db #$4A
	.db #$B2
	.db #$B6
	.db #$52
	.db #$B5
	.db #$2D
	.db #$11
	.db #$91
	.db #$FE
	.db #$1F
	.db #$80
	.db #$BE
	.db #$12
	.db #$ED
	.db #$4E
	.db #$52
	.db #$AD
	.db #$44
	.db #$ED
	.db #$47
	.db #$50
	.db #$6F
	.db #$05
	.db #$ED
	.db #$2A
	.db #$A5
	.db #$DB
	.db #$12
	.db #$41
	.db #$FA
	.db #$3F
	.db #$C0
	.db #$2E
	.db #$91
	.db #$BE
	.db #$15
	.db #$B5
	.db #$13
	.db #$94
	.db #$FB
FRAME_1A_DATA_07:
	.db #$12
	.db #$65
	.db #$4B
	.db #$A9
	.db #$AD
	.db #$AA
	.db #$52
	.db #$B5
	.db #$16
	.db #$01
	.db #$FF
	.db #$0F
	.db #$F0
	.db #$03
	.db #$F4
	.db #$17
	.db #$EA
	.db #$17
	.db #$C4
	.db #$5A
	.db #$B5
	.db #$15
	.db #$A9
	.db #$55
	.db #$A5
	.db #$6D
	.db #$45
	.db #$EC
	.db #$5A
	.db #$04
	.db #$F9
	.db #$5F
	.db #$A0
	.db #$17
	.db #$E0
	.db #$1F
	.db #$F8
	.db #$17
	.db #$E8
	.db #$12
	.db #$F9
	.db #$47
	.db #$E8
	.db #$12
	.db #$BB
	.db #$AA
	.db #$2A
	.db #$A9
	.db #$5B
	.db #$01
	.db #$FA
	.db #$1F
	.db #$F8
	.db #$04
	.db #$F8
	.db #$07
	.db #$FE
	.db #$44
	.db #$5B
	.db #$90
	.db #$7B
	.db #$51
	.db #$4B
	.db #$B4
	.db #$1B
	.db #$EA
	.db #$96
	.db #$5A
	.db #$11
	.db #$E0
	.db #$FF
	.db #$C1
	.db #$16
	.db #$D0
	.db #$4F
	.db #$EC
	.db #$93
	.db #$5A
	.db #$44
	.db #$ED
	.db #$56
	.db #$94
	.db #$AA
	.db #$5A
	.db #$AB
	.db #$AA
	.db #$49
	.db #$A9
	.db #$80
	.db #$FF
	.db #$87
	.db #$16
	.db #$D0
	.db #$5E
	.db #$BA
	.db #$AA
	.db #$96
	.db #$94
	.db #$AA
	.db #$5B
	.db #$54
	.db #$AA
	.db #$6A
	.db #$AB
	.db #$55
	.db #$49
	.db #$15
	.db #$E0
	.db #$FF
	.db #$45
	.db #$05
	.db #$AA
	.db #$57
	.db #$AD
	.db #$5A
	.db #$49
	.db #$95
	.db #$EA
	.db #$55
	.db #$94
	.db #$B4
	.db #$DA
	.db #$56
	.db #$A5
	.db #$B4
	.db #$04
	.db #$F8
	.db #$7F
	.db #$52
	.db #$90
	.db #$BA
	.db #$56
	.db #$AB
	.db #$95
	.db #$52
	.db #$A9
	.db #$6E
	.db #$25
	.db #$49
	.db #$6D
	.db #$B5
	.db #$56
	.db #$AA
	.db #$12
	.db #$A0
	.db #$FF
	.db #$17
	.db #$11
	.db #$69
	.db #$6B
	.db #$B5
	.db #$56
	.db #$49
	.db #$A5
	.db #$EA
	.db #$4D
	.db #$11
	.db #$D5
	.db #$D6
	.db #$5A
	.db #$A9
	.db #$26
	.db #$01
	.db #$FE
	.db #$5F
	.db #$44
	.db #$A4
	.db #$B6
	.db #$B5
	.db #$56
	.db #$25
	.db #$A5
	.db #$EA
	.db #$36
	.db #$45
	.db #$54
	.db #$6B
	.db #$AB
	.db #$55
	.db #$55
	.db #$00
	.db #$FE
	.db #$3F
	.db #$41
	.db #$92
	.db #$B6
	.db #$D6
	.db #$5A
	.db #$55
	.db #$14
	.db #$B5
	.db #$BB
	.db #$14
	.db #$91
	.db #$EE
	.db #$AA
	.db #$55
	.db #$AA
	.db #$04
	.db #$F8
	.db #$FF
	.db #$10
	.db #$52
	.db #$DA
	.db #$DA
	.db #$5A
	.db #$55
	.db #$94
	.db #$B4
	.db #$BB
	.db #$14
	.db #$54
	.db #$EB
	.db #$AA
	.db #$5A
	.db #$55
	.db #$00
	.db #$FE
	.db #$3F
	.db #$41
	.db #$51
	.db #$B6
	.db #$DA
	.db #$6A
	.db #$95
	.db #$94
	.db #$B4
	.db #$BB
	.db #$12
	.db #$54
	.db #$ED
	.db #$AA
	.db #$56
	.db #$55
	.db #$00
	.db #$FE
	.db #$5F
	.db #$44
	.db #$52
	.db #$AD
	.db #$B6
	.db #$6A
	.db #$95
	.db #$94
FRAME_17_DATA_09:
	.db #$AA
	.db #$5B
	.db #$15
	.db #$51
	.db #$EB
	.db #$AA
	.db #$AA
	.db #$55
	.db #$01
	.db #$FA
	.db #$5F
	.db #$44
FRAME_19_DATA_07:
	.db #$4A
	.db #$AB
	.db #$D6
	.db #$AA
	.db #$87
	.db #$04
	.db #$28
	.db #$04
	.db #$28
	.db #$04
	.db #$0C
	.db #$04
	.db #$0C
	.db #$04
	.db #$0C
	.db #$12
	.db #$0C
	.db #$12
	.db #$0C
	.db #$12
	.db #$48
	.db #$12
	.db #$48
	.db #$12
	.db #$48
	.db #$80
	.db #$02
	.db #$00
	.db #$80
	.db #$02
	.db #$87
	.db #$04
	.db #$28
	.db #$04
	.db #$28
	.db #$04
	.db #$0C
	.db #$04
	.db #$0C
	.db #$04
	.db #$0C
	.db #$12
	.db #$0C
	.db #$12
	.db #$0C
	.db #$12
	.db #$48
	.db #$12
	.db #$48
	.db #$12
	.db #$48
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
FRAME_7_DATA_03:
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.LOW VECTOR_ENTRY_NMI
	.HIGH VECTOR_ENTRY_NMI
	.LOW VECTOR_ENTRY_RESET
	.HIGH VECTOR_ENTRY_RESET
	.LOW VECTOR_ENTRY_RESET
	.HIGH VECTOR_ENTRY_RESET
