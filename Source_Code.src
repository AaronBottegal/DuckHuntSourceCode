;Source code translation done by Aaron Bottegal
;This disassembly is a work in progress.

	.rsset 0x0000
TMP_00:                                  .rs 0x01 ;0x0000
TMP_01:                                  .rs 0x01 ;0x0001
TMP_02:                                  .rs 0x01 ;0x0002
TMP_03:                                  .rs 0x01 ;0x0003
TMP_04:                                  .rs 0x01 ;0x0004
TMP_05:                                  .rs 0x01 ;0x0005
TMP_06:                                  .rs 0x01 ;0x0006
TMP_07:                                  .rs 0x01 ;0x0007
PPU_CTRL_RAM:                            .rs 0x01 ;0x0008
PPU_MASK_RAM:                            .rs 0x01 ;0x0009
PPU_SCROLL_X_RAM:                        .rs 0x01 ;0x000A
PPU_SCROLL_Y_RAM:                        .rs 0x01 ;0x000B
TMP_0C:                                  .rs 0x01 ;0x000C
TMP_0D:                                  .rs 0x01 ;0x000D
TMP_$0E:                                 .rs 0x01 ;0x000E
TMP_0F:                                  .rs 0x01 ;0x000F
TMP_$10:                                 .rs 0x01 ;0x0010
TMP_$11:                                 .rs 0x01 ;0x0011
TMP_12:                                  .rs 0x01 ;0x0012
TMP_13:                                  .rs 0x01 ;0x0013
TMP_INDIR_JMP_L:                         .rs 0x01 ;0x0014
TMP_INDIR_JMP_H:                         .rs 0x01 ;0x0015
CTRL_HELD:                               .rs 0x02 ;0x0016 to 0x0017

	.rsset 0x001A
FRAME_PTR_INDEX:                         .rs 0x01 ;0x001A
SPRITE_UPDATE_BASE:                      .rs 0x01 ;0x001B
GAME_SUBSTATE?:                          .rs 0x01 ;0x001C
PREV_GAME_STATE:                         .rs 0x01 ;0x001D
IN_GAME_FUTURE_STATE:                    .rs 0x01 ;0x001E
GAME_MODE_IN:                            .rs 0x01 ;0x001F
NMI_RAN:                                 .rs 0x01 ;0x0020
PPU_UPDATE_FLAG:                         .rs 0x01 ;0x0021
PPU_BLOCK_UPDATE_IN_NMI:                 .rs 0x01 ;0x0022
PALETTE_UPLOAD:                          .rs 0x01 ;0x0023
IN_MENU_FLAG:                            .rs 0x01 ;0x0024
IN_GAME_STATE:                           .rs 0x01 ;0x0025
MENU_STATE:                              .rs 0x01 ;0x0026
WHITE_BOX_DISPLAYED:                     .rs 0x01 ;0x0027
SAVE_STATE_X:                            .rs 0x01 ;0x0028
SAVE_STATE_Y:                            .rs 0x01 ;0x0029
TIMER_LARGE_COUNT:                       .rs 0x01 ;0x002A
FAST_TIMERS:                             .rs 0x02 ;0x002B to 0x002C
TIMER_SLOW:                              .rs 0x02 ;0x002D to 0x002E
FRAME_COUNTER:                           .rs 0x01 ;0x002F
OBJ_ZP_COPY:                             .rs 0x4F ;0x0030 to 0x007E

	.rsset 0x0031
OBJ_ZP_STATE:                            .rs 0x01 ;0x0031
OBJ_ZP_Y_COORD:                          .rs 0x01 ;0x0032
OBJ_ZP_X_COORD:                          .rs 0x01 ;0x0033
OBJ_ZP_DIRECTION:                        .rs 0x01 ;0x0034
OBJ_ZP_FRAME:                            .rs 0x01 ;0x0035
OBJ_SPR_INDEX_START:                     .rs 0x01 ;0x0036
OBJ_SPR_INDEX_FINAL:                     .rs 0x01 ;0x0037
OBJ_ZP_COPY_BEHIND_BG?:                  .rs 0x01 ;0x0038
OBJ_ZP_POINTS:                           .rs 0x01 ;0x0039
OBJ_ZP_COPY_PIGEON_UNK:                  .rs 0x01 ;0x003A
OBJ_ZP_TARGET_NUMBER+1:                  .rs 0x01 ;0x003B
OBJ_ZP_DISP_ATTR?:                       .rs 0x01 ;0x003C

	.rsset 0x003F
OBJ_ZP_DUCK_COLOR:                       .rs 0x01 ;0x003F
OBJ_ZP_PTR_L_UNK:                        .rs 0x01 ;0x0040
OBJ_ZP_PTR_H_UNK:                        .rs 0x01 ;0x0041
OBJ_ZP_ANIM_TIMER:                       .rs 0x01 ;0x0042
OBJ_ZP_PTR_INDEX:                        .rs 0x01 ;0x0043
OBJ_ZP_EXTRA_PTR/DATA:                   .rs 0x02 ;0x0044 to 0x0045
OBJ_ZP_TIMER_MISC?:                      .rs 0x01 ;0x0046
OBJ_ZP_MISC_INDEX?:                      .rs 0x01 ;0x0047
OBJ_ZP_DATA_DIRECTION:                   .rs 0x01 ;0x0048
OBJ_ZP_INDEX_UNK:                        .rs 0x01 ;0x0049
OBJ_ZP_INDEX_4A_UNK:                     .rs 0x01 ;0x004A
OBJ_ZP_UNK_$4B:                          .rs 0x01 ;0x004B
OBJ_ZP_COPY_FLYAWAY_COUNTDOWN:           .rs 0x01 ;0x004C
OBJ_ZP_TIMER_FALLING?:                   .rs 0x01 ;0x004D

	.rsset 0x0050
OBJ_ZP_PARTICLE_TIMER_1:                 .rs 0x01 ;0x0050
OBJ_ZP_COPY+33_VAL_EN_PARTICLE_2:        .rs 0x01 ;0x0051
OBJ_ZP_COPY_SETS_UP_PARTICLE_TIMER_2:    .rs 0x01 ;0x0052
OBJ_ZP_PARTICLE_TIMER_2:                 .rs 0x01 ;0x0053
OBJ_ZP_DISABLE_PARTICLES_GROUP_1:        .rs 0x01 ;0x0054
OBJ_ZP_DISABLE_PARTICLES_GROUP_2:        .rs 0x01 ;0x0055
OBJ_ZP_COPY_PIGEON_FRAME_INDEX?:         .rs 0x01 ;0x0056
OBJ_ZP_ADD'L_STATE:                      .rs 0x01 ;0x0057
OBJ_COPY_PIGEON_SOUND_COUNTDOWN:         .rs 0x01 ;0x0058

	.rsset 0x005E
OBJ_ZP_DUCK_DIFF:                        .rs 0x01 ;0x005E
OBJ_ZP_$47_PIGEON_UNK:                   .rs 0x01 ;0x005F
OBJ_ZP_PARTICLES_Y_BASE:                 .rs 0x0E ;0x0060 to 0x006D

	.rsset 0x0061
OBJ_ZP_COPY_PARTICLES_X_BASE:            .rs 0x0E ;0x0061 to 0x006E

	.rsset 0x0080
SCORE_ANIM_COUNTER:                      .rs 0x02 ;0x0080 to 0x0081

	.rsset 0x0081
SCORE_OBJ_Y:                             .rs 0x02 ;0x0081 to 0x0082

	.rsset 0x0082
SCORE_OBJ_X:                             .rs 0x02 ;0x0082 to 0x0083

	.rsset 0x0083
SCORE_UPPER_SPRITE:                      .rs 0x02 ;0x0083 to 0x0084

	.rsset 0x0093
UNK_$93:                                 .rs 0x01 ;0x0093
UNK_$94:                                 .rs 0x01 ;0x0094
UNK_$95:                                 .rs 0x01 ;0x0095
UNK_$96:                                 .rs 0x01 ;0x0096
UNK_$97:                                 .rs 0x01 ;0x0097
DUCK_COMBO_INDEX:                        .rs 0x01 ;0x0098
TARGETS_ACTIVATED_COUNT?:                .rs 0x01 ;0x0099
SHOT_BLINK_COUNTER:                      .rs 0x01 ;0x009A
DISPLAY_BLINK_TIMER:                     .rs 0x01 ;0x009B
UNK_$9C_INDEX:                           .rs 0x01 ;0x009C
MULTIPLE_BG_UPDATE_INDEX:                .rs 0x01 ;0x009D
OBJ3_SOUND_COUNT_DOWN:                   .rs 0x01 ;0x009E
ACTIVATE_SHOOTING_COUNTDOWN?:            .rs 0x01 ;0x009F

	.rsset 0x00A1
OBJ_ZP_ORIGIN_SLOT#:                     .rs 0x01 ;0x00A1
FROM_TARGET_STORAGE_INDEX:               .rs 0x01 ;0x00A2

	.rsset 0x00A6
COUNTDOWN_TO_ENABLE_TARGETS:             .rs 0x01 ;0x00A6
PIGEON_FLAG_NEEDS_CLEARED?:              .rs 0x01 ;0x00A7
LEVEL_TIED_VAR?:                         .rs 0x01 ;0x00A8
END_OF_ROUND_STATE:                      .rs 0x01 ;0x00A9
TARGETS_IN_LEVEL:                        .rs 0x01 ;0x00AA
HITS_REQUIRED_RAM:                       .rs 0x01 ;0x00AB

	.rsset 0x00AD
UPDATE_TARGETS_HIT:                      .rs 0x01 ;0x00AD
UNK_FLYAWAY?:                            .rs 0x01 ;0x00AE
DUCK_MOVEMENT_LAST_HELD_CONTROLLER:      .rs 0x01 ;0x00AF
LIGHT_HIT_INDEX:                         .rs 0x01 ;0x00B0
TARGET_Y_COORD_CPY:                      .rs 0x01 ;0x00B1
TARGET_X_COORD_CPY:                      .rs 0x01 ;0x00B2
SPRITE_ATTR_COPY?:                       .rs 0x01 ;0x00B3
SPRITE_INDEX_VAL:                        .rs 0x01 ;0x00B4
ZAPPER_TRIG_RELEASED:                    .rs 0x01 ;0x00B5
ZAPPER_PRESSED:                          .rs 0x01 ;0x00B6
ZAP_PREVIOUS_STATE:                      .rs 0x01 ;0x00B7
ZAP_STATE_COUNT:                         .rs 0x01 ;0x00B8
ZAP_SHOT_ENABLED:                        .rs 0x01 ;0x00B9
SHOTS_REMAINING:                         .rs 0x01 ;0x00BA
GAME_TARGETS_SHOWN?:                     .rs 0x01 ;0x00BB
#_TARGETS_REMAINING:                     .rs 0x01 ;0x00BC
TRGT_SHOT_DURING_ATTEMPT:                .rs 0x01 ;0x00BD
SHOT_FIRED:                              .rs 0x01 ;0x00BE

	.rsset 0x00C1
LEVEL:                                   .rs 0x01 ;0x00C1
HITS_REQUIRED_RAM_INDEX:                 .rs 0x01 ;0x00C2
SCORE_LOWER:                             .rs 0x01 ;0x00C3
SCORE_XX0000:                            .rs 0x01 ;0x00C4
SCORE_00XX00:                            .rs 0x01 ;0x00C5
SCORE_0000XX:                            .rs 0x01 ;0x00C6
SCORE_ACCESS_CPY:                        .rs 0x01 ;0x00C7
SCORE_CPY_XX0000:                        .rs 0x01 ;0x00C8
SCORE_CPY_00XX00:                        .rs 0x01 ;0x00C9
SCORE_CPY_0000XX:                        .rs 0x01 ;0x00CA

	.rsset 0x00D0
SND_D0:                                  .rs 0x01 ;0x00D0
SND_D1:                                  .rs 0x01 ;0x00D1
SND_D2:                                  .rs 0x01 ;0x00D2
SND_D3:                                  .rs 0x01 ;0x00D3
SND_D4:                                  .rs 0x01 ;0x00D4

	.rsset 0x00D8
SND_D8:                                  .rs 0x01 ;0x00D8
SND_D9:                                  .rs 0x01 ;0x00D9
SND_DA:                                  .rs 0x01 ;0x00DA
SND_DB:                                  .rs 0x01 ;0x00DB
SND_DC:                                  .rs 0x01 ;0x00DC
UNK_DD:                                  .rs 0x01 ;0x00DD
SND_DE:                                  .rs 0x01 ;0x00DE
SND_DF:                                  .rs 0x01 ;0x00DF
SND_E0:                                  .rs 0x01 ;0x00E0

	.rsset 0x00E4
SND_E4:                                  .rs 0x01 ;0x00E4
SND_E5:                                  .rs 0x01 ;0x00E5
SND_E6_LOADED?:                          .rs 0x01 ;0x00E6
SND_TRI.CNTR_RELOAD:                     .rs 0x01 ;0x00E7

	.rsset 0x00E9
SND_SQ1.DUTY:                            .rs 0x01 ;0x00E9
SND_SQ2.DUTY:                            .rs 0x01 ;0x00EA
SND_COUNTER_EB:                          .rs 0x01 ;0x00EB
SND_EC:                                  .rs 0x01 ;0x00EC
SND_INDEX_ED:                            .rs 0x01 ;0x00ED
SND_COUNTER_EE:                          .rs 0x01 ;0x00EE
SND_COUNTER_EF:                          .rs 0x01 ;0x00EF
SND_PLAY_F0:                             .rs 0x01 ;0x00F0
SND_PLAY_F1:                             .rs 0x01 ;0x00F1
SND_PLAY_F2:                             .rs 0x01 ;0x00F2
SND_PLAY_F3:                             .rs 0x01 ;0x00F3
SND_PTR_REG_WRITE:                       .rs 0x02 ;0x00F4 to 0x00F5
SND_PTR_REG_WRITE_DATA:                  .rs 0x02 ;0x00F6 to 0x00F7
SND_F8:                                  .rs 0x01 ;0x00F8
SND_F9:                                  .rs 0x01 ;0x00F9
SND_PTR_FA_UNK:                          .rs 0x01 ;0x00FA
SND_FB:                                  .rs 0x01 ;0x00FB
SND_FC_IND?:                             .rs 0x01 ;0x00FC
SNF_FD:                                  .rs 0x01 ;0x00FD
SND_FE:                                  .rs 0x01 ;0x00FE
SND_FF:                                  .rs 0x01 ;0x00FF

	.rsset 0x02F0
POINTS_SPRITE_AREA:                      .rs 0x10 ;0x02F0 to 0x02FF
TRGT1_TYPE:                              .rs 0x01 ;0x0300
TRGT1_STATE:                             .rs 0x01 ;0x0301
TRGT1_Y_COORD:                           .rs 0x01 ;0x0302
TRGT1_X_COORD:                           .rs 0x01 ;0x0303

	.rsset 0x030A
TRGT1_SKELETON_TO_USE?:                  .rs 0x01 ;0x030A

	.rsset 0x0350
TRGT2_TYPE:                              .rs 0x01 ;0x0350
TRGT2_STATE:                             .rs 0x01 ;0x0351

	.rsset 0x03A0
TRGT3_TYPE:                              .rs 0x01 ;0x03A0
TRGT3_STATE:                             .rs 0x01 ;0x03A1

	.rsset 0x03EF
DUCKS_HIT_ARRAY-1:                       .rs 0x01 ;0x03EF
DUCKS_HIT_ARRAY:                         .rs 0x0A ;0x03F0 to 0x03F9

	.rsset 0x0400
UNK_0400:                                .rs 0x01 ;0x0400
UNK_0401:                                .rs 0x01 ;0x0401
UNK_0402:                                .rs 0x01 ;0x0402
UNK_403:                                 .rs 0x01 ;0x0403

	.rsset 0x0407
UNK_407:                                 .rs 0x01 ;0x0407

	.rsset 0x040B
UNK_40B:                                 .rs 0x01 ;0x040B

	.rsset 0x040F
UNK_40F:                                 .rs 0x01 ;0x040F

	.rsset 0x0413
UNK_0413:                                .rs 0x01 ;0x0413

	.rsset 0x0430
TIMER_STATE_SAVE:                        .rs 0x01 ;0x0430

	.rsset 0x0440
CTRL_PREV:                               .rs 0x02 ;0x0440 to 0x0441
CTRL_SAME:                               .rs 0x02 ;0x0442 to 0x0443

	.rsset 0x0500
PPU_BLOCK_BUF_SETTING:                   .rs 0x01 ;0x0500
PPU_UPDATE_BUF:                          .rs 0x4F ;0x0501 to 0x054F

	.rsset 0x0560
PPU_UPD8_BUF_INDEX:                      .rs 0x01 ;0x0560
PPU_UPDATE_BUF:                          .rs 0x4F ;0x0561 to 0x05AF

	.rsset 0x05EC
RNG_ARRAY:                               .rs 0x04 ;0x05EC to 0x05EF
HIGH_SCORES_ARRAY:                       .rs 0x01 ;0x05F0

	.rsset 0x05FC
BLOCK_UNPAUSE:                           .rs 0x01 ;0x05FC
CURSOR_UPDATE_DISALLOWED:                .rs 0x01 ;0x05FD
MENU_OPTION_SELECTING:                   .rs 0x01 ;0x05FE
ZAPPER_RESULT:                           .rs 0x01 ;0x05FF

	.rsset 0x0610
SND_PTR_RUN_CODE_0610:                   .rs 0x01 ;0x0610
UNK_0611:                                .rs 0x01 ;0x0611
SND_PTR_RUN_CODE_0612:                   .rs 0x01 ;0x0612
UNK_0613:                                .rs 0x01 ;0x0613


;SOURCE CODE STARTS HERE

VECTOR_ENTRY_RESET:
	CLD  ;starts here.
	SEI 
WAIT_VBL:
	LDA PPU_Status ;waits for vbl
	BPL WAIT_VBL
	LDX #$00 ;disable graphics and whatnot.
	STX PPU_Ctrl
	STX PPU_Mask
	DEX  ;X=#$FF
	TXS  ;Setup stack to #$FF.
	LDX RNG_ARRAY ;0x5EC - 0x5EF RNG values. RNG[0]->X
	LDY #$06
	STY TMP_01
	LDY #$00
	STY TMP_00
	LDA #$00
CLR_RAM_LOOP:
	STA (TMP_00),Y
	DEY 
	BNE CLR_RAM_LOOP
	DEC TMP_01
	BPL CLR_RAM_LOOP
	TXA  ;RNG[0]->A
	BNE SKIP_SEED_RNG ;if !0, seed with that. More random!
	LDX #$5F ;Otherwise seed with #$5F
SKIP_SEED_RNG:
	STX RNG_ARRAY ;Seed RNG array.
	JSR CLEAR_BOTH_SCREENS
	JSR CLEAR_SPRITES
	LDY #$00
	STA PPU_Scroll ;latch was reset in screen clearing
	STA PPU_Scroll
	LDY #$01
	STY IN_MENU_FLAG ;set in-menu to true
	LDA #$0F
	STA APU_STATUS ;enable all except DMC
	JSR #F4->$611+613
	LDA #$90
	STA PPU_Ctrl ;sprites from 0x1000, enable NMI.
	STA PPU_CTRL_RAM ;i personally would reverse these writes.
	LDA #$02
	STA PPU_MASK_RAM
	LDX #$0B
LOOP_MOVE_DAT:
	LDA DEFAULT_HIGH_SCORES,X ;move default high scores into place.
	STA HIGH_SCORES_ARRAY,X
	DEX 
	BPL LOOP_MOVE_DAT
	BMI LOOP_FOREVER
RUN_FRAME:
	LDA IN_MENU_FLAG
	BEQ SOUND_STUFF
	LDA MENU_STATE
	CMP #$01 ;if state isn't this
	BNE SKIP_SOUND
SOUND_STUFF:
	JSR PLAY_SOUNDS ;play sounds.
SKIP_SOUND:
	JSR DEC_TIMERS_2B-2E ;handle timers.
	JSR READ_CONTROLLERS
	JSR MAIN_ZAPPER_LOGIC
	INC FRAME_COUNTER
	JSR CLEAR_NMIRAN/PPUSTUFFFLAG
LOOP_FOREVER:
	LDA NMI_RAN
	BNE RUN_FRAME ;run code for frame
	JSR RNG_ADVANCE
	JMP LOOP_FOREVER
VECTOR_ENTRY_NMI:
	PHP  ;Save stack and whatnot.
	PHA 
	TXA 
	PHA 
	TYA 
	PHA 
	LDA #$00
	STA PPU_OAM_Addr
	LDA #$02
	STA PPU_DMA ;write sprites to screen.
	LDA PPU_BLOCK_UPDATE_IN_NMI
	BNE NO_PPU_STUFF ;needs to be 0 to run PPU stuff.
	JSR PPU_PROCESS_UPDATE_BUF
	JSR UPLOAD_PALETTE
	JSR UPDATE_PALATTE_FROM_400_DUR_WHITEBOX
	JSR SET_PPU_SCROLL
NO_PPU_STUFF:
	LDY #$01
	STY PPU_BLOCK_UPDATE_IN_NMI
	STY NMI_RAN
	PLA 
	TAY 
	PLA 
	TAX 
	PLA 
	PLP 
	RTI 
MAIN_ZAPPER_LOGIC:
	LDA IN_MENU_FLAG
	BEQ NOT_IN_MENU ;not in menu go here?
	JMP IN_MENU
NOT_IN_MENU:
	LDA CTRL_HELD
	AND #$10 ;button start
	BEQ SWITCH_UNBLOCK_PAUSE ;no change.
	LDY BLOCK_UNPAUSE
	BNE GOTO_STATE ;skip unpausing for one update?
	INY  ;Y=1
	STY BLOCK_UNPAUSE ;set to 1
	LDY IN_GAME_STATE ;pausable states?
	CPY #$10 ;paused state value
	BEQ UNPAUSE_GAME ;Unpause this state.
	CPY #$03 ;these are all the possible pause states.
	BEQ PAUSE_GAME
	CPY #$04
	BEQ PAUSE_GAME
	CPY #$0B
	BEQ PAUSE_GAME
	CPY #$0C
	BNE GOTO_STATE ;state cant be paused continue on.
PAUSE_GAME:
	LDX #$05
SAVE_TIMERS_LOOP:
	LDA TIMER_LARGE_COUNT,X
	STA TIMER_STATE_SAVE,X ;save timers.
	DEX 
	BPL SAVE_TIMERS_LOOP
	LDA PPU_MASK_RAM
	AND #$0E ;Enable BG/SPR in left 8, BG, no SPR.
	STA PPU_Mask
	STA PPU_MASK_RAM
	LDA IN_GAME_STATE
	STA PREV_GAME_STATE ;save state to restore.
	LDA #$10
	STA IN_GAME_STATE
	LDA #$07 ;ppu update group #
	JMP DONT_CHANGE_STATE ;could have used bne, tsk tsk, 1 byte lost.
UNPAUSE_GAME:
	LDA PPU_MASK_RAM
	ORA #$10 ;enable sprites.
	STA PPU_Mask
	STA PPU_MASK_RAM
	LDA #$11
	STA IN_GAME_STATE ;switch state.
	LDA #$30
	STA GAME_SUBSTATE? ;substate...why?
	LDA #$00
DONT_CHANGE_STATE:
	JSR UPDATE_PPU_GROUP ;show graphics needed.
	JSR SND_SET_F0_#$01 ;Do sound.
	JSR WAIT_FOR_NMI
	JMP SND_SET_F1_#$80 ;pause sound?
SWITCH_UNBLOCK_PAUSE:
	LDA #$00
	STA BLOCK_UNPAUSE ;clear paused setup flag.
GOTO_STATE:
	LDA IN_GAME_STATE
	JSR GOTO_TABLE_PAST_JSR
	.LOW GAME_STATE_0_INIT_RAM+SCREENS ;setup game start.
	.HIGH GAME_STATE_0_INIT_RAM+SCREENS
	.LOW GAME_STATE_1_SETUP_DUCKS ;ducks main setup.
	.HIGH GAME_STATE_1_SETUP_DUCKS
	.LOW GAME_STATE_2_SETUP_SUBROUND ;ducks info setup.
	.HIGH GAME_STATE_2_SETUP_SUBROUND
	.LOW GAME_STATE_3_ZAP+TRGTS(+STATUS)+SHOT ;main game loop?
	.HIGH GAME_STATE_3_ZAP+TRGTS(+STATUS)+SHOT
	.LOW GAME_STATE_C_END_RND_OPTIONS ;end round routines.
	.HIGH GAME_STATE_C_END_RND_OPTIONS
	.LOW RTS_3 ;RTS's
	.HIGH RTS_3
	.LOW GAME_STATE_6_IDK ;start of round stuff?
	.HIGH GAME_STATE_6_IDK
	.LOW GAME_STATE_7_SCORE+TRGT3 ;continue target 3 only?
	.HIGH GAME_STATE_7_SCORE+TRGT3
	.LOW GAME_STATE_8_SETUP_PIGEONS ;Pigeons init.
	.HIGH GAME_STATE_8_SETUP_PIGEONS
	.LOW GAME_STATE_9_PIGEON_RND_SETUP ;pigeon setup.
	.HIGH GAME_STATE_9_PIGEON_RND_SETUP
	.LOW GAME_STATE_A_SUBROUND_INIT ;sets up duck targets and inits stuff.
	.HIGH GAME_STATE_A_SUBROUND_INIT
	.LOW GAME_STATE_B_PIGEON_MAIN ;target/anim processing
	.HIGH GAME_STATE_B_PIGEON_MAIN
	.LOW GAME_STATE_C_END_RND_OPTIONS ;end round routines.
	.HIGH GAME_STATE_C_END_RND_OPTIONS
	.LOW GAME_STATE_D_WAIT_UPDATES ;unsure
	.HIGH GAME_STATE_D_WAIT_UPDATES
	.LOW RTS_3 ;removed?
	.HIGH RTS_3
	.LOW RTS_3 ;removed?
	.HIGH RTS_3
	.LOW RTS_3 ;Pause state actual, does nothing.
	.HIGH RTS_3
	.LOW GAME_STATE_11_UNPAUSE
	.HIGH GAME_STATE_11_UNPAUSE
	.LOW GAME_STATE_12_WAIT_TO_FORWARD
	.HIGH GAME_STATE_12_WAIT_TO_FORWARD
IN_MENU:
	LDA #$00
	STA ZAPPER_RESULT ;init result
	LDA #$01
	STA ZAP_SHOT_ENABLED ;menu always enables zapper.
	STA SHOTS_REMAINING ;menu always has 1 shot.
	LDA MENU_STATE
	BEQ SKIP_MENU ;switches screen.
	JSR ZAP_PROC_TRIGGER ;process zapper trigger
	JSR PROCESS_ZAPPER ;changes result
	LDA ZAPPER_RESULT ;menu was hit?
	CMP #$01 ;was hit
	BEQ MENU_GOTO_GAME
	CMP #$02 ;miss
	BEQ INC_MENU_OPTION
	LDA CTRL_HELD ;get buttons held
	AND #$30 ;get select and start
	CMP #$10 ;comp start
	BNE START_NOT_PRESSED ;not pressed alone. (Why alone checked?)
MENU_GOTO_GAME:
	LDA #$00 ;go to game here.
	STA IN_MENU_FLAG ;not in menu now.
	STA IN_GAME_STATE ;No in-game state?
	JSR SND_SET_F0_#$01 ;disable all sounds
	JSR NMI_DISABLE_SPRITS/BG ;disable screen
	LDA #$02
	STA TIMER_LARGE_COUNT ;play music when back on title screen
	STA TIMER_SLOW ;set to low number.
	RTS 
START_NOT_PRESSED:
	LDX MENU_STATE ;wait for selection
	BNE START_NOT_PRESSED/ALONE ;always taken?
SKIP_MENU:
	JMP COUNT_DOWN_MENU ;X=0=selected?
START_NOT_PRESSED/ALONE:
	CMP #$20 ;select pressed?
	BNE SELECT_NOT_PRESSED/ALONE ;no press/alone
	LDA CURSOR_UPDATE_DISALLOWED
	BNE RESET_COUNTDOWN ;no update without full release
INC_MENU_OPTION:
	LDY MENU_OPTION_SELECTING
	INY 
	CPY #$03 ;only 0-2 options available
	BNE WRITE_MENU_OPTION
	LDY #$00 ;wrap
WRITE_MENU_OPTION:
	STY MENU_OPTION_SELECTING
	JMP DISALLOW_CURSOR_UPDATES
SELECT_NOT_PRESSED/ALONE:
	CMP #$00
	BNE DISALLOW_CURSOR_UPDATES
	STA CURSOR_UPDATE_DISALLOWED ;allow updates, all released.
	BEQ NOTHING_PRESSED ;always taken
DISALLOW_CURSOR_UPDATES:
	LDA #$01 ;moved cursor, needs full release for next go.
	STA CURSOR_UPDATE_DISALLOWED
RESET_COUNTDOWN:
	LDA #$FF
	STA TIMER_SLOW ;reset countdown for menu music.
NOTHING_PRESSED:
	CPX #$01 ;blocking switch?
	BNE COUNT_DOWN_MENU ;no?
	LDA #$51 ;loop counter= 5 times, 1 byte each
	STA PPU_BLOCK_BUF_SETTING
	LDA #$24 ;blanks
	LDX #$04
Write_Data_Loop:
	STA PPU_UPDATE_BUF,X ;store 505-501
	DEX 
	BPL Write_Data_Loop
	LDA MENU_OPTION_SELECTING ;0-2
	ASL A ;mul by 2
	TAX 
	LDA #$26 ;cursor char
	STA PPU_UPDATE_BUF,X ;save to row
	LDX #$26 ;nametable addr starting 2622
	LDY #$22
	JSR MAKE_SETUP_PPU_BLOCK ;write blanks
	LDA MENU_OPTION_SELECTING ;0-2
	ASL A
	ASL A ;mul by 4
	CLC 
	ADC #$03 ;put at end
	TAX  ;X=score digit index
	LDY #$05 ;6 digits to move
MOVE_DIGITS_FOR_DISP_LOOP:
	LDA HIGH_SCORES_ARRAY,X
	AND #$0F ;get digit
	STA PPU_UPDATE_BUF,Y ;write to update buf
	DEY 
	LDA HIGH_SCORES_ARRAY,X
	LSR A
	LSR A
	LSR A
	LSR A
	STA PPU_UPDATE_BUF,Y ;again
	DEX 
	DEY 
	BPL MOVE_DIGITS_FOR_DISP_LOOP
	LDA PPU_UPDATE_BUF ;get top char
	BNE NO_BLANK_ZERO ;is 0?
	LDA #$24
	STA PPU_UPDATE_BUF ;make top 0 space instead
NO_BLANK_ZERO:
	LDA #$16 ;setting is 1 group of 6 bytes
	STA PPU_BLOCK_BUF_SETTING
	LDX #$12 ;put to PPUADDR 2312
	LDY #$23
	JSR MAKE_SETUP_PPU_BLOCK ;make the buffer to upload.
COUNT_DOWN_MENU:
	LDA TIMER_SLOW ;count down for menu music
	BNE Switch_State ;only set music when "switched" to
	JSR SND_SET_F1_#$02 ;title sound play?
	LDA #$FF ;why not just DEC $2D? Hmm...
	STA TIMER_SLOW ;title screen countdown reset
Switch_State:
	LDA MENU_STATE ;which selected?
	JSR GOTO_TABLE_PAST_JSR ;1=RTS, 0=UPLOAD FILE
	.LOW TABLE_SETUP_SCREEN_MENU_STUFF
	.HIGH TABLE_SETUP_SCREEN_MENU_STUFF ;selection made?
	.LOW RTS_3
	.HIGH RTS_3 ;RTS's.
CLEAR_BOTH_SCREENS:
	LDA #$02 ;clear screen $2400
	JSR SETUP_CLEAR_SCREEN ;screen cleared here
CLEAR_NAMETABLE_$2000:
	LDA #$01 ;clear screen $2000
SETUP_CLEAR_SCREEN:
	STA TMP_01 ;screen updating
	LDA #$24
	STA TMP_00 ;tile to clear with.
	JMP CLEAR_SCREEN
CLEAR_SPRITES:
	LDY #$00
	LDA #$F4 ;Clear value.
CLR_LOOP:
	STA $0200,Y ;clr sprites.
	INY 
	INY 
	INY 
	INY 
	BNE CLR_LOOP
	RTS 
UPLOAD_PALETTE:
	LDY PALETTE_UPLOAD
	BEQ RTS ;none to upload
	DEY  ;flag is zero'd index?
	TYA 
	ASL A ;mul by 2 for index
	TAY 
	LDA PALLETE_PTR_L,Y ;low
	LDX PALLETE_PTR_H,Y ;high
	LDY #$00
	STY PALETTE_UPLOAD ;clear flag
PREP_PPU_FILE_PTR:
	STA TMP_00 ;set up pointers to data
	STX TMP_01
	JSR PPU_FILE_TEST_STREAM
RTS:
	RTS 
UPDATE_PALATTE_FROM_400_DUR_WHITEBOX:
	LDY WHITE_BOX_DISPLAYED
	BEQ RTS ;no white box displayed
	LDY #$00 ;could be optim by removing LDY using A
	STY WHITE_BOX_DISPLAYED ;clear flag.
	LDA #$00
	LDX #$04 ;get data from 0x400
	BNE PREP_PPU_FILE_PTR ;file from RAM.
GAME_STATE_11_UNPAUSE:
	DEC GAME_SUBSTATE? ;has to do with unpausing?
	BNE RTS_0 ;leave if still counting. for sound to play?
	LDX #$05 ;move 6 bytes
MOVE_LOOP:
	LDA TIMER_STATE_SAVE,X ;load saved timers.
	STA TIMER_LARGE_COUNT,X ;store back at main timers.
	DEX 
	BPL MOVE_LOOP
	LDA PREV_GAME_STATE ;get state before pause.
	STA IN_GAME_STATE ;by back, effectively unpausing.
RTS_0:
	RTS 
READ_CONTROLLERS:
	LDX #$01
	STX NES_CONTROLLER1
	DEX 
	STX NES_CONTROLLER1 ;reset controller latch to get buttons.
	JSR READ_CTRL_SETUP ;do X index 0, aka player 1.
	INX  ;get player 2 by indexing.
READ_CTRL_SETUP:
	LDY #$08 ;bits to pull
READ_CTRL_LOOP:
	PHA  ;save buttons
	LDA NES_CONTROLLER1,X ;get data
	STA TMP_00 ;=a
	LSR A ;shift off bottom bit.
	ORA TMP_00 ;get famicom expansion bit+controller bit
	LSR A ;to carry
	PLA  ;pull a
	ROL A ;rotate into a
	DEY 
	BNE READ_CTRL_LOOP
	CMP CTRL_PREV,X
	BNE READ_CTRL_STORE_PREV ;didn't match prev
	INC CTRL_SAME,X ;times matched
	LDY CTRL_SAME,X
	CPY #$05
	BCC READ_CTRL_RTS ;Y < 5, RTS
	STA CTRL_HELD,X ;store held
	JMP READ_CTRL_CLEAR_SAME
READ_CTRL_STORE_PREV:
	STA CTRL_PREV,X ;update new expected buttons
READ_CTRL_CLEAR_SAME:
	LDA #$00
	STA CTRL_SAME,X ;reset counter for held.
READ_CTRL_RTS:
	RTS 
PPU_PROCESS_UPDATE_BUF:
	LDA PPU_UPDATE_FLAG ;see if updates
	BEQ RTS_1 ;->RTS
	LDA #$61 ;ptr to PPU_UPDATE_BUF
	STA TMP_00
	LDA #$05
	STA TMP_01
	LDA PPU_CTRL_RAM
	AND #$FB ;make sure vram in by 1
	STA PPU_Ctrl
	STA PPU_CTRL_RAM
	LDX PPU_Status ;reset latch
	LDY #$00
	BEQ TEST_PPU_DATA_BUFFER ;always taken
WRITE_PPU_ADDR:
	STA PPU_Addr ;store location writing to.
	INY 
	LDA (TMP_00),Y
	STA PPU_Addr ;store low
	INY 
	LDA (TMP_00),Y ;length
	AND #$3F ;make max length
	TAX 
PPU_DATA_WRITE_LOOP:
	INY  ;ptr++
	LDA (TMP_00),Y ;ptr
	STA PPU_Data ;write data
	DEX 
	BNE PPU_DATA_WRITE_LOOP
	INY  ;ptr++
TEST_PPU_DATA_BUFFER:
	LDA (TMP_00),Y ;see if ppuaddr, will be #$20+
	BNE WRITE_PPU_ADDR ;!= 0 means update screen
	LDA #$00
	STA PPU_UPD8_BUF_INDEX ;init index
	STA PPU_UPDATE_BUF ;init buffer
	STA PPU_UPDATE_FLAG ;init index
RTS_1:
	RTS 
CLEAR_SCREEN:
	LDA PPU_Status ;reset latch
	LDA PPU_CTRL_RAM
	AND #$FB ;1111.1011, vram inc by 1
	STA PPU_Ctrl
	STA PPU_CTRL_RAM ;init/store status
	LDA #$1C
	CLC 
COMPUTE_NAMETBL_ADDR_HIGH:
	ADC #$04
	DEC TMP_01 ;screen updating?
	BNE COMPUTE_NAMETBL_ADDR_HIGH
	STA TMP_02 ;screen addr high
	STA PPU_Addr ;set screen addr
	LDA #$00
	STA PPU_Addr
	LDX #$04 ;init looping values
	LDY #$00
	LDA TMP_00 ;get tile to clear with
WRITE_NAMETABLE_LOOP:
	STA PPU_Data
	DEY 
	BNE WRITE_NAMETABLE_LOOP ;loop 256
	DEX 
	BNE WRITE_NAMETABLE_LOOP ;loop 1024
	LDA TMP_02
	ADC #$03 ;attribute table, $2[3/7]C0
	STA PPU_Addr
	LDA #$C0
	STA PPU_Addr
	LDY #$40 ;bytes in attr table.
	LDA #$00
WRITE_ATTR_LOOP:
	STA PPU_Data ;clear
	DEY 
	BNE WRITE_ATTR_LOOP ;loop
	RTS  ;leave
DEC_TIMERS_2B-2E:
	LDX #$01 ;index
	DEC TIMER_LARGE_COUNT
	BPL DEC_TIMER(X) ;Only B+C
	LDA #$0A ;Timers[2+] only dec every 12 frames.
	STA TIMER_LARGE_COUNT
	LDX #$03 ;index 2E instead
DEC_TIMER(X):
	LDA FAST_TIMERS,X
	BEQ ALREADY_0 ;dont dec if 0.
	DEC FAST_TIMERS,X ;dec if not already 0
ALREADY_0:
	DEX  ;next timer
	BPL DEC_TIMER(X)
	RTS 
GOTO_TABLE_PAST_JSR:
	STX SAVE_STATE_X ;save x and y
	STY SAVE_STATE_Y
	ASL A ;mul by 2 for index
	TAY 
	INY  ;go past instruction byte.
	PLA  ;get location after JSR to us.
	STA TMP_INDIR_JMP_L
	PLA 
	STA TMP_INDIR_JMP_H
	LDA (TMP_INDIR_JMP_L),Y ;load which ptr to go to.
	TAX 
	INY 
	LDA (TMP_INDIR_JMP_L),Y
	STA TMP_INDIR_JMP_H
	STX TMP_INDIR_JMP_L
	LDX SAVE_STATE_X ;load X and Y again.
	LDY SAVE_STATE_Y
	JMP (TMP_INDIR_JMP_L) ;jump to routine.
PPU_WRITE_FILE:
	STA PPU_Addr ;store addrs first
	INY 
	LDA (TMP_00),Y
	STA PPU_Addr
	INY 
	LDA (TMP_00),Y ;this 3rd byte has flag bits
	ASL A ;get increment setting
	PHA  ;save the flag for later
	LDA PPU_CTRL_RAM
	ORA #$04 ;Set PPU_CTRL to inc by 32
	BCS SET_PPUCTRL
	AND #$FB ;Set PPU_CTRL to inc by 1
SET_PPUCTRL:
	STA PPU_Ctrl
	STA PPU_CTRL_RAM
	PLA  ;get flags again
	ASL A ;single block flag
	BCC DATA_CHUNK ;setting up a chunk
	ORA #$02 ;single block flag
	INY  ;move ptr to block data
DATA_CHUNK:
	LSR A ;move other parts all back
	LSR A ;this sets carry to 0:screen, or 1:block
	TAX  ;X=original bottom bits 0-5, used as counter.
PPU_DATA_LOOP:
	BCS SINGLE BLOCK ;if CS, only writing one block type.
	INY  ;only moves on carry clear
SINGLE BLOCK:
	LDA (TMP_00),Y ;get data
	STA PPU_Data ;store data
	DEX  ;move bytes
	BNE PPU_DATA_LOOP ;loop if not done. MAX=64 bytes
	SEC  ;not sure
	TYA  ;get ready for maffs
	ADC TMP_00 ;move pointer
	STA TMP_00
	LDA #$00
	ADC TMP_01
	STA TMP_01
PPU_FILE_TEST_STREAM:
	LDX PPU_Status ;reset latch.
	LDY #$00 ;start at beginning
	LDA (TMP_00),Y ;get data at ptr
	BNE PPU_WRITE_FILE ;0 = EOF, the universal truth.
SET_PPU_SCROLL:
	PHA  ;set scroll at end of PPU_ADDR access.
	LDA PPU_SCROLL_X_RAM
	STA PPU_Scroll
	LDA PPU_SCROLL_Y_RAM
	STA PPU_Scroll
	PLA  ;good for avoiding bugs. :D
	RTS 
PPU_UPDATE_BLOCK_CREATE:
	LDA #$01 ;this creates the update block. FMT: [ADDR_W,DATA,0x00]
	STA PPU_UPDATE_FLAG ;set update flag
	LDY #$00 ;start at beginning
	LDA (TMP_02),Y ;setup byte load.
	AND #$0F
	STA TMP_05 ;%0000 1111 = Bytes in group.
	LDA (TMP_02),Y
	LSR A
	LSR A
	LSR A
	LSR A
	STA TMP_04 ;number of groups, upto 15
	LDX PPU_UPD8_BUF_INDEX ;should start at 0, or if multiple updates, indexed.
PROCESS_GROUP:
	LDA TMP_01
	STA PPU_UPDATE_BUF,X ;store high addr of ppu addr
	JSR INCREASE_PPU_UPD8_INDEX
	LDA TMP_00
	STA PPU_UPDATE_BUF,X ;store low ppu addr
	JSR INCREASE_PPU_UPD8_INDEX
	LDA TMP_05 ;Bytes static.
	STA TMP_06 ;Bytes static.
	STA PPU_UPDATE_BUF,X ;store to update buf
MORE_BYTES_IN_GROUP:
	JSR INCREASE_PPU_UPD8_INDEX
	INY 
	LDA (TMP_02),Y
	STA PPU_UPDATE_BUF,X
	DEC TMP_06 ;dec num bytes left
	BNE MORE_BYTES_IN_GROUP ;0 is end for bytes.
	JSR INCREASE_PPU_UPD8_INDEX
	STX PPU_UPD8_BUF_INDEX ;save new index.
	CLC 
	LDA #$20 ;move ppu to next line.
	ADC TMP_00
	STA TMP_00
	LDA #$00
	ADC TMP_01
	STA TMP_01
	DEC TMP_04 ;more groups?
	BNE PROCESS_GROUP ;0 is end for groups.
	LDA #$00 ;null terminate
	STA PPU_UPDATE_BUF,X ;end of data
	RTS 
INCREASE_PPU_UPD8_INDEX:
	INX 
	TXA  ;not sure why not CPX below without this. TODO.
	CMP #$4F ;last byte possible.
	BCC NO_TERM ;if index < 4F
	LDX PPU_UPD8_BUF_INDEX ;Stop overflow if >=4F.
	LDA #$00 ;terminate
	STA PPU_UPDATE_BUF,X
	PLA  ;leave 2 routines back since JSR.
	PLA 
NO_TERM:
	RTS 
SCORE_ADD/SUB:
	CLC 
	ADC #$01 ;10
	AND #$0F ;0
	ASL A
	ASL A
	TAX 
	LDA TMP_04 ;subtract score flag?
	BEQ L_046A ;dead code maybe?
	LDA SCORE_LOWER,X
	BEQ SCORE_GROUP_SUBTRACT
SCORE_ADD:
	CLC 
	LDA SCORE_0000XX,X
	STA TMP_03 ;digits group scratch
	LDA TMP_07 ;adding digits 0000XX
	JSR SCORE_ADD_GROUP
	STA SCORE_0000XX,X ;store new score.
	LDA SCORE_00XX00,X ;same as above
	STA TMP_03 ;digits group scratch
	LDA TMP_06 ;adding digits 00XX00
	JSR SCORE_ADD_GROUP
	STA SCORE_00XX00,X
	LDA SCORE_XX0000,X ;same as above
	STA TMP_03 ;digits group scratch
	LDA TMP_05 ;adding digits 0000XX
	JSR SCORE_ADD_GROUP
	STA SCORE_XX0000,X
	RTS 
L_046A:
	LDA SCORE_LOWER,X
	BEQ SCORE_ADD ;always taken? code below possibly dead.
SCORE_GROUP_SUBTRACT:
	SEC 
	LDA SCORE_0000XX,X
	STA TMP_03 ;digit groups scratch
	LDA TMP_07 ;digits subtracting 0000XX
	JSR SCORE_SUBTRACT_FROM_03
	STA SCORE_0000XX,X
	LDA SCORE_00XX00,X
	STA TMP_03 ;digit groups scratch
	LDA TMP_06 ;digits subtracting 00XX00
	JSR SCORE_SUBTRACT_FROM_03
	STA SCORE_00XX00,X
	LDA SCORE_XX0000,X
	STA TMP_03 ;digit groups scratch
	LDA TMP_05 ;digits subtracting XX0000
	JSR SCORE_SUBTRACT_FROM_03
	STA SCORE_XX0000,X
	LDA SCORE_XX0000,X ;why load what we just stored?
	BNE L_049C
	LDA SCORE_00XX00,X
	BNE L_049C
	LDA SCORE_0000XX,X
	BEQ L_04A2 ;if zero skip
L_049C:
	BCS L_04BE
	LDA SCORE_LOWER,X ;invert C3
	EOR #$FF
L_04A2:
	STA SCORE_LOWER,X ;store c3
	SEC 
	LDA #$00
	STA TMP_03
	LDA SCORE_0000XX,X
	JSR SCORE_SUBTRACT_FROM_03
	STA SCORE_0000XX,X
	LDA SCORE_00XX00,X
	JSR SCORE_SUBTRACT_FROM_03
	STA SCORE_00XX00,X
	LDA SCORE_XX0000,X
	JSR SCORE_SUBTRACT_FROM_03
	STA SCORE_XX0000,X
L_04BE:
	RTS 
SCORE_ADD_GROUP:
	JSR SETUP_RAM,RET_LOW_DIGIT ;A=value to add to base.
	ADC TMP_01
	CMP #$0A ;see if above 9
	BCC NO_ROLLOVER
	ADC #$05 ;roll first digit, carry important.
NO_ROLLOVER:
	CLC 
	ADC TMP_02 ;add high digit
	STA TMP_02 ;stores whole value.
	LDA TMP_03
	AND #$F0
	ADC TMP_02
	BCC L_04DB
L_04D7:
	ADC #$5F ;adds #$60 because c always set.
	SEC  ;unneeded because it should always roll.
	RTS 
L_04DB:
	CMP #$A0
	BCS L_04D7 ;roll
	RTS  ;no roll, leave alone
SCORE_SUBTRACT_FROM_03:
	JSR SETUP_RAM,RET_LOW_DIGIT
	SBC TMP_01 ;subtract low digit
	STA TMP_01
	BCS SCORE_SUB_NOUNDER
	ADC #$0A ;put digit 0-9 range, carry set after
	STA TMP_01
	LDA TMP_02 ;load high digit
	ADC #$0F ;adds 10
	STA TMP_02 ;store back
SCORE_SUB_NOUNDER:
	LDA TMP_03 ;score digit high
	AND #$F0 ;get high digit
	SEC 
	SBC TMP_02
	BCS NO_UNDERFLOW
	ADC #$A0 ;put top in 0-9 range
	CLC  ;underflow next jsr
NO_UNDERFLOW:
	ORA TMP_01 ;combine digits
	RTS  ;done subbing
SETUP_RAM,RET_LOW_DIGIT:
	PHA  ;A=add/sub value
	AND #$0F
	STA TMP_01 ;store lower digit
	PLA 
	AND #$F0
	STA TMP_02 ;store higher digit
	LDA TMP_03 ;add/sub from these digits
	AND #$0F ;get lower digplayed digits
	RTS  ;ret lower digit.
MOVE_HIGHER_TO_SCORE:
	LDA #$00
	STA TMP_04 ;clear
	CLC 
	LDA TMP_00 ;F0
	ADC #$10 ;put into range
	AND #$F0 ;mask bits
	LSR A
	LSR A ;>> 2
	TAY  ;Y=0
	LDA TMP_00
	AND #$07
	ASL A
	ASL A ;<< 2
	TAX  ;X=0
LOOP_ALL_X_INDEXES:
	LDA SCORE_LOWER,Y ;wrong addr mode lol.
	BEQ ACCESS_NO_VAL
	LDA SCORE_ACCESS_CPY,X
	BEQ SET_SCORE_CPY
SUBTRACT_CPY_FROM_SCORE:
	SEC 
	LDA SCORE_0000XX,Y ;wrong addr modes here
	STA TMP_03
	LDA SCORE_CPY_0000XX,X
	JSR SCORE_SUBTRACT_FROM_03
	LDA SCORE_00XX00,Y ;again
	STA TMP_03
	LDA SCORE_CPY_00XX00,X
	JSR SCORE_SUBTRACT_FROM_03
	LDA SCORE_XX0000,Y ;again
	STA TMP_03
	LDA SCORE_CPY_XX0000,X
	JSR SCORE_SUBTRACT_FROM_03
	BCS SCORE_LOWER ;>= ?
	LDA SCORE_LOWER,Y ;again
	BNE SCORE_HIGHER ;always taken?
SET_SCORE_CPY:
	LDA #$FF
	STA TMP_04 ;which higher flag?
	SEC 
SCORE_WRITE_CPY_LOWER:
	TYA 
	BNE RTS_2 ;don't write if Y not 0
	BCC SKIP_COPY ;skip on no carry
	LDA SCORE_ACCESS_CPY,X
	STA SCORE_LOWER
	LDA SCORE_CPY_XX0000,X
	STA SCORE_XX0000
	LDA SCORE_CPY_00XX00,X
	STA SCORE_00XX00
	LDA SCORE_CPY_0000XX,X
	STA SCORE_0000XX
SKIP_COPY:
	LDA TMP_00
	AND #$08
	BEQ RTS_2
	DEX 
	DEX 
	DEX 
	DEX 
	BPL LOOP_ALL_X_INDEXES
RTS_2:
	RTS 
ACCESS_NO_VAL:
	LDA SCORE_ACCESS_CPY,X ;see if cpy has value
	BEQ SUBTRACT_CPY_FROM_SCORE ;both are empty, sub.
SCORE_LOWER:
	LDA SCORE_LOWER,Y
	BNE SET_SCORE_CPY
SCORE_HIGHER:
	CLC 
	BCC SCORE_WRITE_CPY_LOWER ;always taken
RNG_ADVANCE:
	LDA RNG_ARRAY ;LFSR between 0-2,1-2
	AND #$02
	STA TMP_07 ;either #$02 or #$00
	LDA RNG_ARRAY+1
	AND #$02
	EOR TMP_07 ;if match, C=0, otherwise C=1
	CLC 
	BEQ RNG_ROTATE
	SEC 
RNG_ROTATE:
	ROR RNG_ARRAY
	ROR RNG_ARRAY+1
	ROR RNG_ARRAY+2
	ROR RNG_ARRAY+3
	LDA RNG_ARRAY
	RTS 
TABLE_SETUP_SCREEN_MENU_STUFF:
	JSR NMI_DISABLE_SPRITS/BG ;JUMPS TO FROM MENU SELECTION
	JSR CLEAR_NAMETABLE_$2000 ;clears nametable
	JSR WAIT_FOR_NMI ;wait for nmi.
	LDA #$02
	STA TMP_01 ;nametable $2400 to clear
	LDA #$50
	STA TMP_00 ;tile to clear with
	JSR CLEAR_SCREEN
	JSR CLEAR_SPRITES
	JSR WAIT_FOR_NMI
	LDX #$04
	LDY #$E4 ;upload file from E404
	JSR UPLOAD_PPU_FILE
	LDA #$01
	STA PALETTE_UPLOAD ;palette
	LDA #$01
	STA CURSOR_UPDATE_DISALLOWED ;disallow cursor.
	INC MENU_STATE
	JMP PPU_ENABLE_SPRITES/BG
WAIT_FOR_NMI:
	JSR CLEAR_NMIRAN/PPUSTUFFFLAG ;waited always clears current.
WAIT_FOR_NMI_LOOP:
	LDA NMI_RAN
	BEQ WAIT_FOR_NMI_LOOP
RTS_3:
	RTS  ;Jumped to from somewhere else.
NMI_DISABLE_SPRITS/BG:
	JSR WAIT_FOR_NMI
	LDA PPU_MASK_RAM
	AND #$E7
STORE_PPUMASK:
	STA PPU_MASK_RAM
	STA PPU_Mask
	RTS 
PPU_ENABLE_SPRITES/BG:
	JSR WAIT_FOR_NMI
	LDA PPU_MASK_RAM
	ORA #$18 ;set sprits/bg
	BNE STORE_PPUMASK
COPY_OBJ_$3YY_TO_OBJ_ZP:
	STY FROM_TARGET_STORAGE_INDEX ;save for move back later
	LDX #$00 ;these bytes are the object data.
Loopy:
	LDA TRGT1_TYPE,Y ;it moves them to work on them all in zp.
	STA OBJ_ZP_COPY,X ;and then moves them back.
	INY  ;thanks for coming to my ted talk.
	INX 
	CPX #$50
	BNE Loopy
	RTS 
MOVE_OBJ_ZP_BACK_TO_ORIGIN:
	LDY FROM_TARGET_STORAGE_INDEX ;get original location.
	LDX #$00
LOOP_MOVE_BACK:
	LDA OBJ_ZP_COPY,X
	STA TRGT1_TYPE,Y ;store back.
	INY 
	INX 
	CPX #$50
	BNE LOOP_MOVE_BACK ;not done.
	RTS  ;done.
UPLOAD_PPU_FILE:
	STX TMP_00
	STY TMP_01
	JMP PPU_FILE_TEST_STREAM
CLEAR_NMIRAN/PPUSTUFFFLAG:
	LDA #$00
	STA NMI_RAN ;NMI not ran.
	STA PPU_BLOCK_UPDATE_IN_NMI ;dont block ppu stuff.
	RTS  ;return.
GAME_STATE_12_WAIT_TO_FORWARD:
	LDA TIMER_SLOW ;timer slow is handled by NMI.
	BNE RTS_4 ;wait to move state.
	LDA IN_GAME_FUTURE_STATE ;future is now...
	STA IN_GAME_STATE
RTS_4:
	RTS  ;leave.
SET_NEW_STATE_AFTER_TIMER:
	STX IN_GAME_FUTURE_STATE ;X = state to go to.
	STA TIMER_SLOW ;A = time until switch.
	LDA #$12 ;wait game state.
	STA IN_GAME_STATE ;move to state now.
	RTS 
CLEAR_0300-03FF:
	LDY #$00
	TYA 
more_data:
	STA TRGT1_TYPE,Y ;$300 generic.
	INY 
	BNE more_data
	RTS 
CLEAR_RAM_$30-$FF:
	LDA #$00
	LDX #$30 ;start
LOOPX:
	STA TMP_00,X
	INX 
	BNE LOOPX ;end when we write $FF
	RTS 
CLEAR_0040_00BF:
	LDA #$00 ;half of obj data? and other vars?
	LDX #$7F
MORE_CLEAR:
	STA OBJ_ZP_PTR_L_UNK,X
	DEX 
	BPL MORE_CLEAR
	RTS 
DISP_NEW_SCORE:
	LDX #$03 ;3 groups of digits.
	LDY #$05 ;index?
DIGITS_TO_UPDATE_BUF:
	LDA SCORE_LOWER,X ;get digits.
	AND #$0F
	STA PPU_UPDATE_BUF,Y ;store digits.
	DEY  ;next spot.
	LDA SCORE_LOWER,X ;get digit.
	LSR A ;shift data.
	LSR A
	LSR A
	LSR A
	STA PPU_UPDATE_BUF,Y ;store to buffer.
	DEX  ;next group.
	DEY  ;count.
	BPL DIGITS_TO_UPDATE_BUF ;if not 6 digits, loop.
	LDA #$16
	STA PPU_BLOCK_BUF_SETTING ;1 group 6 bytes.
	LDX BONUS_ADDR_LOW ;get location on screen.
	LDY BONUS_ADDR_HIGH
	JMP MAKE_SETUP_PPU_BLOCK ;commit data.
SPRITE_OFFSETS_APPLY:
	LDA TMP_0C ;get temp data byte.
	ASL A ;make index.
	TAY  ;to index reg.
	LDA SPRITE_X_Y_OFFSETS_LOW,Y
	STA TMP_$10
	LDA SPRITE_X_Y_OFFSETS_HIGH,Y
	STA TMP_$11
	LDY #$00 ;start of stream/data.
	LDX #$00
LOOP_SPRITE_X_Y:
	LDA (TMP_$10),Y ;check stream.
	CMP #$AA ;end of data/stream/file marker.
	BNE COMMIT_SPRITE_DATA_RTN ;not end, write bytes.
RTS_5:
	RTS  ;leave if the end.
COMMIT_SPRITE_DATA_RTN:
	CLC 
	ADC TARGET_Y_COORD_CPY ;get Y after offset.
	CMP #$A8
	BCC LESS_THAN_A8 ;if <A8
	LDA #$F4 ;move off screen.
LESS_THAN_A8:
	STA TMP_0D ;Y coord.
	INY 
	LDA (TMP_$10),Y ;get next byte.
	CLC 
	ADC TARGET_X_COORD_CPY ;add X.
	STA TMP_$0E ;save X.
	INY 
	LDA TMP_0D ;get saved Y
	STA $0200,X ;store  Y
	INX  ;next OAM
	LDA #$56 ;tile 56 is blank, filled with %10 pixel values.
	STA $0200,X
	INX  ;next addr
	LDA #$00 ;no mods to tile.
	STA $0200,X
	INX 
	LDA TMP_$0E ;get saved X
	STA $0200,X ;write saved X
	INX  ;point to next area.
	JMP LOOP_SPRITE_X_Y
DISP_TARGETS_HIT:
	LDA UPDATE_TARGETS_HIT
	BEQ RTS_5 ;not set
	LDA #$00
	STA UPDATE_TARGETS_HIT ;clear flag
PPU_DISP_TARGET_STATUS:
	LDA #$D6 ;duck ppu tile. unconditional JSR.
	LDY GAME_MODE_IN
	CPY #$02
	BNE DUCKS_GAME ;is ducks game
	LDA #$D4 ;pigeon ppu tile
DUCKS_GAME:
	STA TMP_0C ;TMP_OC = game tile here.
	LDX #$09 ;items to shoot.
MOVE_DAT_LOOP:
	LDY TMP_0C ;get tile shown.
	LDA DUCKS_HIT_ARRAY,X ;get if hit.
	BEQ DUCK_NOT_HIT
	DEY  ;make graphic the hit graphic.
DUCK_NOT_HIT:
	TYA  ;graphic to A.
	STA PPU_UPDATE_BUF,X ;store.
	DEX  ;next entry.
	BPL MOVE_DAT_LOOP
PPU_SHOW_TARGETS_BUFFER:
	LDA #$1A ;1 group, 10 things. entry point.
	STA PPU_BLOCK_BUF_SETTING
	LDX #$4C ;location on screen.
	LDY #$23
	JMP MAKE_SETUP_PPU_BLOCK ;put to screen.
PPU_DISP_SHOTS_LEFT:
	LDA SHOT_FIRED
	BEQ RTS_5 ;no shot fired.
	LDA #$00
	STA SHOT_FIRED ;clear fired.
	LDX SHOTS_REMAINING
	LDY #$00 ;setup index.
MOVE_MORE_TILES:
	CPX #$00
	BEQ NO_SHOTS_REMAINING
	DEX  ;1 less shot.
	LDA #$D9 ;bullet tile
	BNE COMMIT_BULLET_TILE ;write this value.
NO_SHOTS_REMAINING:
	LDA #$B7 ;blank shot tile here.
COMMIT_BULLET_TILE:
	STA PPU_UPDATE_BUF,Y ;store to spot.
	INY  ;next spot.
	CPY #$03 ;check for 3 bullets.
	BNE MOVE_MORE_TILES ;do all tiles.
	LDA #$13 ;1 group of 3
	STA PPU_BLOCK_BUF_SETTING
	LDX #$43 ;put where they go.
	LDY #$23
MAKE_SETUP_PPU_BLOCK:
	STX TMP_00 ;low ppu addr
	STY TMP_01 ;high ppu addr
	LDX #$00
	LDY #$05
	STX TMP_02
	STY TMP_03 ;setup ram pointer to self.
	JMP PPU_UPDATE_BLOCK_CREATE
GAME_STATE_7_SCORE+TRGT3:
	LDA TIMER_SLOW
	BEQ SCORE_SOMETHING ;wait until 0 to score.
	LDA GAME_MODE_IN
	CMP #$02
	BEQ RTS_6 ;if pigeons, no dog advance.
	JMP FORWARD_TARGET_3
RTS_6:
	RTS 
SCORE_SOMETHING:
	LDX #$03 ;score digits loop counter
SCORE_TO_C7:
	LDA SCORE_LOWER,X
	STA SCORE_ACCESS_CPY,X
	DEX 
	BPL SCORE_TO_C7
	LDA GAME_MODE_IN
	ASL A
	ASL A ;mul game mode by 4
	TAY  ;index
	STY TMP_0F ;score index
	LDX #$00 ;ugh counting up
LOOP_MOVE_HIGHSCORE_TO_CURR:
	LDA HIGH_SCORES_ARRAY,Y
	STA SCORE_LOWER,X
	INY 
	INX 
	CPX #$04 ;moved 4 bytes?
	BNE LOOP_MOVE_HIGHSCORE_TO_CURR ;move more
	LDA #$F0 ;looking at
	STA TMP_00
	JSR MOVE_HIGHER_TO_SCORE
	LDY TMP_0F
	LDX #$00
WRITE_HIGH_SCORE:
	LDA SCORE_LOWER,X
	STA HIGH_SCORES_ARRAY,Y
	INY 
	INX 
	CPX #$04
	BNE WRITE_HIGH_SCORE
	LDY #$00
	STY ZAPPER_TRIG_RELEASED
	STY MENU_STATE ;menu state 0 inits menu.
	INY 
	STY IN_MENU_FLAG
	JMP NMI_DISABLE_SPRITS/BG
GAME_STATE_6_IDK:
	JSR SND_SET_F1_#$04 ;clear sound?
	JSR WAIT_FOR_NMI ;wait for frame.
	JSR SND_SET_F0_#$40 ;set sound now?
	LDA #$01
	STA TRGT3_TYPE ;set up dog?
	STA TRGT3_STATE ;enable state?
	LDA #$07
	STA IN_GAME_STATE ;go to state 7, does score and stuff.
	LDA #$15 ;set timer.
	STA TIMER_SLOW ;timer for score counting? unused maybe?
	RTS 
MAKE_DISP_BUF_REQUIRED:
	LDX #$0A
WRITE_NEEDED_LINE:
	CPX HITS_REQUIRED_RAM
	BCC REQUIRED_BLOCK ;X >= HITS_REQD
	BEQ REQUIRED_BLOCK ;whoops. can be taken. still bad, could LDA #$0B, BCS
	LDA #$B7 ;Display blank.
	BNE WRITE_SETTING
REQUIRED_BLOCK:
	LDA #$D7 ;Display required lines.
WRITE_SETTING:
	STA PPU_BLOCK_BUF_SETTING,X ;store blank/lines
	DEX 
	BNE WRITE_NEEDED_LINE
	LDA #$1A ;1 group, 10 chars
	STA PPU_BLOCK_BUF_SETTING
	LDX #$6C
	LDY #$23 ;PPU ADDR
	JMP MAKE_SETUP_PPU_BLOCK ;make update block
MAKE_DISP_BUF_LEVEL:
	LDA LEVEL
	STA TMP_03
	LDA #$01
	CLC 
	JSR SCORE_ADD_GROUP ;inc level
	STA LEVEL
	LDA #$12 ;1 group of 2 bytes
	STA PPU_BLOCK_BUF_SETTING
	LDX #$DD ;PIGEONS DEFAULT ROUND CHR
	LDA GAME_MODE_IN
	CMP #$02
	BEQ WRITE_TILE
	LDX #$50 ;DUCK DEFAULT ROUND CHR
WRITE_TILE:
	STX PPU_UPDATE_BUF+1 ;Always blank just in case.
	LDX #$00 ;set chr writing
	LDA LEVEL
	AND #$F0
	BEQ WRITE_DIGIT ;Write only 1 digit if taken.
	LSR A
	LSR A
	LSR A
	LSR A
	STA PPU_UPDATE_BUF,X ;store high digit
	INX  ;next digit
WRITE_DIGIT:
	LDA LEVEL
	AND #$0F
	STA PPU_UPDATE_BUF,X ;store low digit
	LDX #$05
	LDY #$23 ;PPU ADDR for update
	JMP MAKE_SETUP_PPU_BLOCK ;make buffer.
GAME_STATE_D_WAIT_UPDATES:
	LDA MULTIPLE_BG_UPDATE_INDEX
	BEQ 9D_IS_ZERO ;if not done updating the BG.
	JMP BG_UPDATES_AUTOMATIC ;handle timer if not 0, abuse RTS.
9D_IS_ZERO:
	LDA #$0A ;Move to state A when update done.
	STA IN_GAME_STATE ;new state when timer = 0.
	RTS 
BG_UPDATES_AUTOMATIC:
	LDA FAST_TIMERS
	BNE RTS_7 ;rts if timer !0
	LDY MULTIPLE_BG_UPDATE_INDEX
	BEQ RTS_7 ;rts if flag clear.
	LDA TIMER_9D_STUFF?,Y
	CMP #$AA
	BEQ EOF ;clear 9D if loaded?
	PHA  ;save otherwise.
	INY 
	LDA TIMER_9D_STUFF?,Y ;get next byte.
	STA FAST_TIMERS ;set timer.
	INY 
	STY MULTIPLE_BG_UPDATE_INDEX ;save next value.
	PLA  ;pull first value.
	JMP SPR_BG_UNK ;use it to...
EOF:
	LDA #$00
	STA MULTIPLE_BG_UPDATE_INDEX ;No 9D index when reset.
RTS_7:
	RTS 
GAME_STATE_0_INIT_RAM+SCREENS:
	JSR CLEAR_RAM_$30-$FF
	JSR WAIT_FOR_NMI
	JSR CLEAR_BOTH_SCREENS
	JSR CLEAR_MEMORIES ;clear sprites, $3XX, and 40-BF
	LDX #$01 ;ducks.
	LDA MENU_OPTION_SELECTING
	STA GAME_MODE_IN ;0-1 = ducks, 2 = pigeons
	CMP #$02
	BCC GAME_MODE_<2 ;bne should work too.
	LDX #$08 ;pigeons.
GAME_MODE_<2:
	STX IN_GAME_STATE ;now either 1 or 8.
	RTS 
GAME_STATE_1_SETUP_DUCKS:
	JSR WAIT_FOR_NMI ;set up game for ducks here.
	LDX #$42
	LDY #$E0
	JSR UPLOAD_PPU_FILE ;upload file for screen.
	LDA #$02
	STA PALETTE_UPLOAD ;game palette
	LDA #$02
	STA IN_GAME_STATE ;next game state
	JSR SET_PPU_SCROLL ;set scroll
	JSR PPU_ENABLE_SPRITES/BG ;turn on screeen
	JMP SND_SET_F1_#$10 ;set a sound. intro music?
GAME_STATE_2_SETUP_SUBROUND:
	JSR CLEAR_MEMORIES
	JSR SETUP_HITSREQD_TARGETS_OTHER ;sets up level hits number, targets, etc.
	JSR MAKE_DISP_BUF_REQUIRED
	JSR MAKE_DISP_BUF_LEVEL
	NOP  ;removed feature?
	NOP 
	NOP 
	LDA #$00
	STA ZAPPER_TRIG_RELEASED ;not true.
	STA MULTIPLE_BG_UPDATE_INDEX ;(cleared with above jsr's)
	LDA #$03
	STA IN_GAME_STATE ;switch state
	RTS 
GAME_STATE_3_ZAP+TRGTS(+STATUS)+SHOT:
	JSR ZAP_PROC_TRIGGER
	JSR PROCESS_ZAPPER
	JSR FORWARD_TARGET_3 ;dog obj handling.
	JSR FORWARD_TARGETS_1+2 ;target handling.
	JSR PPU_DISP_SHOTS_LEFT
	JSR UPDATE_ACTIVE_TARGET_STATUS
	JSR DISP_TARGETS_HIT
	JSR DISP_SCORE_SPRITES
	JSR DISP_BLINK_WORD_SHOT
	JSR BG_UPDATES_AUTOMATIC
	NOP  ;removed feature?
	NOP 
	NOP 
	RTS  ;return.
FORWARD_TARGETS_1+2:
	LDA TRGT1_TYPE ;get if is target.
	BEQ FORWARD_TARGET_2 ;not active
	LDY #$00
	STY OBJ_ZP_ORIGIN_SLOT# ;where obj came from
	JSR COPY_OBJ_$3YY_TO_OBJ_ZP ;move obj data.
	JSR PROCESS_OBJ_TARGET ;do obj stuff.
	JSR MOVE_OBJ_ZP_BACK_TO_ORIGIN
FORWARD_TARGET_2:
	LDA TRGT2_TYPE
	BEQ DO_ZAPPER ;not active, next step.
	LDY #$50
	INC OBJ_ZP_ORIGIN_SLOT# ;apparently active target will ALWAYS be in slot 1?
	JSR COPY_OBJ_$3YY_TO_OBJ_ZP
	JSR PROCESS_OBJ_TARGET
	JSR MOVE_OBJ_ZP_BACK_TO_ORIGIN
DO_ZAPPER:
	LDA ZAP_SHOT_ENABLED
	BEQ RTS_8 ;Zapper shot disabled, leave.
	LDY ACTIVATE_SHOOTING_COUNTDOWN? ;if 
	BNE WRITE_COUNTDOWN ;count down
	LDY #$41 ;set value, unk.
	LDA SHOTS_REMAINING ;see if shots remaining.
	BNE WRITE_COUNTDOWN ;if has shots, go here.
	LDY #$15 ;otherwise, this value if no shots.
WRITE_COUNTDOWN:
	DEY  ;dec countdown.
	STY ACTIVATE_SHOOTING_COUNTDOWN? ;store back to now.
	LDA #_TARGETS_REMAINING
	BNE DEC_A6 ;If targets in mode, dec A6.
	LDA TRGT1_STATE
	BNE RTS_8 ;in state, rts.
	LDA TRGT2_STATE
	BNE RTS_8 ;in state, rts
	LDA FAST_TIMERS
	BNE RTS_8 ;has time, rts
	LDA #$0A ;state for laugh?
	LDY #$07 ;palette
	LDX TRGT_SHOT_DURING_ATTEMPT
	BEQ TARGET_3_STATE_DECIDED ;target not shot.
	LDA #$0C ;state for success?
	LDY #$02 ;palette
TARGET_3_STATE_DECIDED:
	STA TRGT3_STATE
	STY PALETTE_UPLOAD ;put this pallette in for it.
	JSR WAIT_FOR_NMI
	JSR DISP_SHOT_TEXT
	LDA #$40
	STA FAST_TIMERS ;store timer
	LDA #$00
	STA ZAP_SHOT_ENABLED ;disable shots
	JMP UPDATE_PPU_GROUP
DEC_A6:
	LDA COUNTDOWN_TO_ENABLE_TARGETS
	BEQ RTS_8
	DEC COUNTDOWN_TO_ENABLE_TARGETS ;if not zero, dec.
RTS_8:
	RTS 
PROCESS_OBJ_TARGET:
	LDA OBJ_ZP_STATE
	JSR GOTO_TABLE_PAST_JSR
	.LOW RTS_3
	.HIGH RTS_3 ;RTS, uninit'd.
	.LOW TRGT_STATE_1_INIT_OBJ ;inits target data in $30 area, sets tile range.
	.HIGH TRGT_STATE_1_INIT_OBJ
	.LOW TARGET_STATE_2_SPAWN ;spawn objects.
	.HIGH TARGET_STATE_2_SPAWN
	.LOW TARGET_STATE_3_FLY+BOX+STATE4 ;something to do with shooting.
	.HIGH TARGET_STATE_3_FLY+BOX+STATE4
	.LOW TARGET_STATE_4_HIT ;something with target hit.
	.HIGH TARGET_STATE_4_HIT
	.LOW TARGET_STATE5_FALLING ;shot? something sound.
	.HIGH TARGET_STATE5_FALLING
	.LOW TARGET_STATE_6_SET_POPUP ;sprite, range, idk.
	.HIGH TARGET_STATE_6_SET_POPUP
	.LOW TARGET_STATE_7_MOVE_OR_THUMP ;falling?
	.HIGH TARGET_STATE_7_MOVE_OR_THUMP
	.LOW TARGET_STATE_8_REMOVE_OBJ ;take spr off screen?
	.HIGH TARGET_STATE_8_REMOVE_OBJ
TRGT_STATE_1_INIT_OBJ:
	LDX #$1F ;move 0 to 1F bytes.
LOOP:
	LDA TARGET_INIT_DATA_PIGEON/DUCK,X ;initial target data?
	STA OBJ_ZP_COPY,X ;store to in-ram buffer.
	DEX 
	BPL LOOP ;move 1F to 0
	LDA OBJ_ZP_ORIGIN_SLOT# ;if obj slot 0
	BEQ TARGET_INIT'D ;loaded data is correct.
	LDA #$40 ;fix the values for sprites instead here.
	STA OBJ_SPR_INDEX_START ;different spr area for target 2
	LDA #$7F
	STA OBJ_SPR_INDEX_FINAL ;ending for spr area for target 2.
TARGET_INIT'D:
	INC OBJ_ZP_STATE ;inc target state.
RTS_9:
	RTS 
TARGET_STATE_2_SPAWN:
	LDA ZAP_SHOT_ENABLED ;is zapper enabled?
	BEQ RTS_9 ;leave if not enabled
	LDA COUNTDOWN_TO_ENABLE_TARGETS
	BNE RTS_9 ;if not 0 leave.
	JSR RNG_ADVANCE ;get random number.
	AND #$0F
	LDY GAME_MODE_IN
	BNE TWO_TARGETS
	CLC 
	ADC #$10 ;up to 1F now.
TWO_TARGETS:
	CMP UNK_$9C_INDEX ;9C unk
	BNE WRITE_9C ;if not same, leave+write.
	CLC 
	ADC #$01 ;up to #$20 now.
	CMP #$10
	BEQ SUB_10 ;sub 10 if =10, idk why.
	CMP #$20
	BNE WRITE_9C ;not 20
SUB_10:
	SEC 
	SBC #$10 ;subtract 10.
WRITE_9C:
	STA UNK_$9C_INDEX ;store. might be part of AI for movement?
	ASL A ;make it an index.
	TAX 
	LDA OBJ_DATA_UNK_HIGH,X
	STA OBJ_ZP_EXTRA_PTR/DATA
	LDA OBJ_DATA_UNK_LOW,X
	STA OBJ_ZP_EXTRA_PTR/DATA+1
	JSR RNG_ADVANCE ;get new rand number.
	AND #$3F ;Time between targets, 100%.
	TAY 
	INY  ;1 to 40, 0 is done so can't be 0.
	STY COUNTDOWN_TO_ENABLE_TARGETS ;store next target time.
	LDY #$00 ;reset index
	LDA (OBJ_ZP_EXTRA_PTR/DATA),Y ;load data pointer.
	INY 
	STY OBJ_ZP_MISC_INDEX? ;store next index.
	STA OBJ_ZP_X_COORD ;store loaded data.
	LDY #$00 ;not DEY smh. Means 1 duck game.
	LDX TARGETS_ACTIVATED_COUNT? ;Get # duck on.
	BEQ KEEP_Y ;no targets activated.
	LDY #$02 ;2 duck game.
KEEP_Y:
	STY OBJ_ZP_DISP_ATTR? ;store
	INC TARGETS_ACTIVATED_COUNT? ;INC
	LDX DUCK_COMBO_INDEX
	LDA DUCK_DATA_COMBO,X ;get duck data.
	CPY #$00
	BEQ SHIFT_DATA ;first target, use top.
	AND #$0F ;get lower byte data for 2nd.
	JMP DATA_LOW_START ;jump to code.
SHIFT_DATA:
	LSR A ;move duck bits down.
	LSR A
	LSR A
	LSR A
DATA_LOW_START:
	STA OBJ_ZP_DUCK_COLOR ;store color for target.
	LDX LEVEL ;get level.
	LDA GAME_MODE_IN
	BNE TWO_TARGET_GAME
	LDA #$0B ;index for...
	CPX #$12 ;level #
	BCS IS_MORE_EQUAL_THAN_LEVEL ;IF x >= 12, A->X
	LDA #$0A ;index
	CPX #$11 ;level
	BCS IS_MORE_EQUAL_THAN_LEVEL
	LDA #$09 ;index
	CPX #$10 ;level
	BCS IS_MORE_EQUAL_THAN_LEVEL
	DEX  ;else, just DEX one from X. This probs where level 0 bug is.
	TXA  ;X->A, raw index from level text.
IS_MORE_EQUAL_THAN_LEVEL:
	TAX  ;level index.
	LDA LEVEL_DATA_UNK,X ;harder max, doesn't go based on color for add'l speed.
	JMP OUTPUT_DIFFICULTY ;output difficulty.
TWO_TARGET_GAME:
	LDA #$1B ;max index.
	LDX LEVEL
	CPX #$10
	BCS LEVEL_>=10 ;level >= 10
	DEX  ;dex. level 0 bug here too?
	TXA  ;Level to A.
	STA TMP_0C ;store
	ASL A ;double A.
	CLC 
	ADC TMP_0C ;Add. Effectively multiplied by 3.
LEVEL_>=10:
	CLC 
	ADC OBJ_ZP_DUCK_COLOR ;get difficulty per duck type.
	TAX  ;get index into array.
	LDA DIFFICULTY_2ND_TARGET,X
OUTPUT_DIFFICULTY:
	STA OBJ_ZP_DUCK_DIFF ;difficulty from arrays and duck types/data.
	LDX LEVEL
	LDA #$0B ;index...
	CPX #$27 ;for level ?? 27
	BCS OUTPUT_INDEX ;>=
	LDA #$0A ;index...
	CPX #$24 ;for level ?? 24
	BCS OUTPUT_INDEX ;>=
	LDA #$09 ;else, default to this.
OUTPUT_INDEX:
	STA OBJ_ZP_COPY_PIGEON_UNK ;unk value.
	LDA #$00 ;reset all below.
	STA OBJ_ZP_TIMER_MISC?
	STA OBJ_ZP_ANIM_TIMER
	STA OBJ_ZP_COPY+30 ;unk
	STA OBJ_ZP_COPY+31 ;unk
	LDA #$01
	STA OBJ_ZP_UNK_$4B ;unk
	STA UNK_FLYAWAY? ;enable target 1 something always?
	LDA GAME_MODE_IN
	BNE TWO_TARGET_GAME_0 ;if 1 or 2, go here.
	LDX LEVEL ;get level in X again.
	LDA #$7D ;countdown value
	CPX #$11 ;if level ?? 11
	BCC SET_COUNTDOWN ;<
	LDA #$5D ;countdown value
	CPX #$20 ;if level ?? 20
	BCC SET_COUNTDOWN ;<
	LDA #$3E ;default, smallest.
SET_COUNTDOWN:
	STA OBJ_ZP_COPY_FLYAWAY_COUNTDOWN ;store countdown.
	LDA #$00
	STA DUCK_MOVEMENT_LAST_HELD_CONTROLLER ;clear ???
TWO_TARGET_GAME_0:
	INC GAME_TARGETS_SHOWN? ;inc objects init'd.
	LDA GAME_TARGETS_SHOWN? ;get value.
	STA OBJ_ZP_TARGET_NUMBER+1 ;1 or 2, which target this is.
	DEC #_TARGETS_REMAINING ;one less target.
	INC OBJ_ZP_STATE ;init'd, play by going to next state.
	RTS 
TARGET_STATE_3_FLY+BOX+STATE4:
	LDA FRAME_COUNTER
	AND #$07
	BNE SKIP_SET_SOUND ;not sure why 7
	JSR SND_SET_F0_#$08 ;set idk.
SKIP_SET_SOUND:
	LDA ACTIVATE_SHOOTING_COUNTDOWN?
	BNE DON'T_SET_SOUND ;if counting down, skip quack.
	JSR SND_SET_F2_#$02 ;set quack.
DON'T_SET_SOUND:
	LDA SHOTS_REMAINING
	BNE HAS_SHOTS/SETUP ;if shots, valid.
	LDA OBJ_ZP_COPY+30 ;get value
	BNE HAS_SHOTS/SETUP ;if !=0, go here.
	LDA #$01 ;if was 0, set to 1.
	STA OBJ_ZP_COPY+30 ;set to 1 if 0.
	LDA #$F0
	STA OBJ_ZP_TIMER_MISC? ;set timer for...
	LDA #$00 ;clear...
	JMP OBJ_ANIM+MOVEMENT ;anim+move.
HAS_SHOTS/SETUP:
	LDA GAME_MODE_IN
	BEQ GAME_MODE_1_TRGT
TWO_TARGET_GAME_1:
	JMP GAME_MODE_2_TARGETS
GAME_MODE_1_TRGT:
	LDA OBJ_ZP_UNK_$4B ;get data.
	BEQ $4B_IS_0
	LDA OBJ_ZP_Y_COORD ;get obj Y
	CMP #$88
	BCS TWO_TARGET_GAME_1 ;if A>=#$88, goto. unk why.
	LDA #$00
	STA OBJ_ZP_UNK_$4B ;clear $4B now.
$4B_IS_0:
	LDX #$01 ;unk why
	LDA OBJ_ZP_COPY_FLYAWAY_COUNTDOWN
	BEQ FLYAWAY_COUNTDOWN_ALREADY_ENDED ;if countdown ended, go here.
	LDA SHOTS_REMAINING
	BNE HAS_SHOTS_REMAINING ;shots remaining.
	STA OBJ_ZP_COPY_FLYAWAY_COUNTDOWN ;if no shots, set flyaway to 0. duck flies up.
COUNTDOWN_NOW_ZERO:
	JSR DISP_FLY_AWAY ;change screen.
	LDX #$01 ;set flag.
	BNE FLYAWAY_COUNTDOWN_ALREADY_ENDED ;freshly ended.
HAS_SHOTS_REMAINING:
	DEX  ;sets flyaway to false?
	LDA FRAME_COUNTER
	LSR A
	BCC FLYAWAY_COUNTDOWN_ALREADY_ENDED ;decrease on odd frames.
	DEC OBJ_ZP_COPY_FLYAWAY_COUNTDOWN ;decrease.
	BEQ COUNTDOWN_NOW_ZERO ;now counted down.
FLYAWAY_COUNTDOWN_ALREADY_ENDED:
	STX UNK_FLYAWAY? ;store if we are flying away.
	CPX #$01
	BEQ FLYAWAY_ENABLED ;dont let controller move now?
	LDA CTRL_HELD ;first controller. makes sense.
	AND #$0F
	BNE MOVEMENT_BUTTONS_PRESSED
	LDA CTRL_HELD+1 ;2nd controller. doesn't. zapper is here, like, wtf.
	AND #$0F
	BNE MOVEMENT_BUTTONS_PRESSED
	LDA #$00
	STA DUCK_MOVEMENT_LAST_HELD_CONTROLLER
	LDA UNK_FLYAWAY? ;get if flying away?
	BEQ NOT_FLYING_AWAY
FLYAWAY_ENABLED:
	JMP DUCK_FLY_AWAY_CHECK
NOT_FLYING_AWAY:
	LDA OBJ_ZP_Y_COORD
	CMP #$20
	BCC Y_COORD_<20
	CMP #$90
	BCS Y_COORD_>=90
	LDX #$00 ;value used in direction X changing.
	LDA OBJ_ZP_X_COORD
	CMP #$10
	BCC X_COORD_<10
	LDX #$08 ;now this one for these.
	CMP #$F0
	BCS X_COORD_>=F0
MOVE_DUCKS_AUTOMATICALLY:
	JMP GET_DUCK_DIFFICULTY+MOVE
MOVEMENT_BUTTONS_PRESSED:
	CMP DUCK_MOVEMENT_LAST_HELD_CONTROLLER
	BEQ FLYAWAY_ENABLED ;no new buttons pressed.
	STA DUCK_MOVEMENT_LAST_HELD_CONTROLLER ;update buttons pressed.
	LDX #$35 ;two possible
	LSR A ;right
	BCS FOUND_DIRECTION
	LDX #$DB ;two possible.
	LSR A ;left
	BCS FOUND_DIRECTION
	LDX #$79 ;two possible.
	LSR A ;down
	BCS FOUND_DIRECTION
	LDX #$1F ;up, two possible.
FOUND_DIRECTION:
	LDA FRAME_COUNTER ;has 2 options each time?
	LSR A ;randomly get which
	TXA  ;get up values.
	BCC RANDOMLY_SHIFT
	AND #$0F ;use bottom.
	JMP WRITE_DIRECTION_FROM_CONTROLLER
RANDOMLY_SHIFT:
	LSR A ;use top bit value.
	LSR A
	LSR A
	LSR A
	JMP WRITE_DIRECTION_FROM_CONTROLLER
Y_COORD_<20:
	INC OBJ_ZP_Y_COORD ;move right one pixel.
	LDY #$00 ;direction down?
	BEQ CHANGE_DIRECTION_Y
Y_COORD_>=90:
	DEC OBJ_ZP_Y_COORD ;move left one pixel.
	LDY #$02 ;direction up?
CHANGE_DIRECTION_Y:
	LDA OBJ_ZP_DATA_DIRECTION
	AND #$08 ;keep animation set?
	TAX  ;get value passed.
	JMP CHANGE_DIRECTION_X ;make direction?
X_COORD_<10:
	INC OBJ_ZP_X_COORD ;move right one pixel.
	LDY #$04 ;direction right?
	BNE CHANGE_DIRECTION_X
X_COORD_>=F0:
	DEC OBJ_ZP_X_COORD ;move one pixel left.
	LDY #$02 ;direction left?
CHANGE_DIRECTION_X:
	STX TMP_0C ;animation set?
	STY TMP_0F ;direction?
	LDA OBJ_ZP_DATA_DIRECTION ;get current direction info.
	AND #$07 ;bits 0000 0***
	EOR #$07 ;invert the bits.
	ORA TMP_0C ;set the animation set bits?
	STA TMP_0C ;store value.
	JSR RNG_ADVANCE ;get random number...
	AND #$03 ;get bits.
	CMP #$03
	BNE ALL_NOT_SET
	LDA #$02 ;use this if not 3.
ALL_NOT_SET:
	CLC  ;either 3 or 2.
	ADC TMP_0C ;add bit #3.
	STA TMP_$0E ;store to temp.
	LDY TMP_0F ;get direction?
	CMP #$00
	BNE A_NOT_0
	CPY #$01
	BEQ DEC_0E+OUTPUT ;-1, output.
	CPY #$02
	BEQ +/-_0E_RANDOMLY ;+/- output.
	BNE INC_OE+OUTPUT ;inc output.
A_NOT_0:
	CMP #$04
	BNE A_NOT_4
	CPY #$00 ;direction?
	BEQ INC_OE+OUTPUT ;+1
	CPY #$02 ;direction?
	BEQ DEC_0E+OUTPUT ;-1
	BNE +/-_0E_RANDOMLY ;randomly choose otherwise.
A_NOT_4:
	CMP #$08
	BNE A_NOT_8
	CPY #$00 ;direction?
	BEQ +/-_0E_RANDOMLY ;change randomly.
	CPY #$01 ;direction?
	BEQ INC_OE+OUTPUT ;+1
	BNE DEC_0E+OUTPUT ;-1 otherwise.
A_NOT_8:
	CMP #$0C
	BNE OUTPUT_E ;don't change if not C.
	CPY #$00 ;direction?
	BEQ DEC_0E+OUTPUT ;-1
	CPY #$01 ;direction?
	BEQ +/-_0E_RANDOMLY ;randomly change.
	BNE INC_OE+OUTPUT ;otherwise increase.
+/-_0E_RANDOMLY:
	JSR RNG_ADVANCE ;GET RANDOM NUMBER.
	ASL A ;GET BIT.
	BCS INC_OE+OUTPUT ;inc or dec. this selects the frame used, randomly.
DEC_0E+OUTPUT:
	DEC TMP_$0E ;dec 0E instead.
	JMP OUTPUT_E ;output.
INC_OE+OUTPUT:
	INC TMP_$0E ;inc 0E
OUTPUT_E:
	LDA TMP_$0E ;get 0E
	AND #$0F ;set bottom bits only.
WRITE_DIRECTION_FROM_CONTROLLER:
	JMP OBJ_ANIM+MOVEMENT ;animate with it.
GAME_MODE_2_TARGETS:
	LDA OBJ_ZP_TIMER_MISC?
	BNE GET_DUCK_DIFFICULTY+MOVE ;if set, do something.
	LDY OBJ_ZP_MISC_INDEX? ;index is offset.
	LDA (OBJ_ZP_EXTRA_PTR/DATA),Y ;get data.
	INY 
	CMP #$FF ;if EOF.
	BNE NOT_EXTRA_PTR_EOF
	LDA (OBJ_ZP_EXTRA_PTR/DATA),Y ;get data.
	INY 
	STA OBJ_ZP_STATE ;store to obj state.
	LDA (OBJ_ZP_EXTRA_PTR/DATA),Y ;get next data.
	STA OBJ_ZP_ANIM_TIMER ;timer for animation.
	RTS 
NOT_EXTRA_PTR_EOF:
	STA OBJ_ZP_TIMER_MISC? ;store data here.
	LDA (OBJ_ZP_EXTRA_PTR/DATA),Y ;get next data.
	INY 
	STY OBJ_ZP_MISC_INDEX? ;store index.
OBJ_ANIM+MOVEMENT:
	STA OBJ_ZP_DATA_DIRECTION ;store data.
	TAX  ;value to index.
	LDA UNK_OBJ_DATA_264B,X
	STA OBJ_ZP_INDEX_UNK ;store 2 places.
	STA OBJ_ZP_INDEX_4A_UNK
	LDA #$00
	STA OBJ_ZP_DIRECTION ;clear direction. right.
	LDA OBJ_ZP_DATA_DIRECTION ;get data.
	CMP #$11 ;is ?? #$11
	BCC <#$11 ;<, contains all data its self.
	TAX  ;Save A in X.
	LDA #$00 ;reason for val: always commits ptr branches to from below.
	CPX #$15 ;for this, ends up as commented.
	BEQ POINTER_THREE_DECIDED ;ptr 3, dir >
	CPX #$14
	BEQ DECIDE_POINTER_TWO ;ptr 2, dir >
	CPX #$13
	BEQ DECIDE_POINTER_ONE ;ptr 1, dir >
	INC OBJ_ZP_DIRECTION ;dir now left.
	CPX #$12
	BEQ DECIDE_POINTER_TWO ;ptr 2, dir <
	BNE POINTER_THREE_DECIDED ;ptr 3, dir <
<#$11:
	CMP #$08 ;A=UNK data
	BCC DECIDE_POINTER_ONE ;keep right for %**** 0***
	INC OBJ_ZP_DIRECTION ;dir < otherwise.
DECIDE_POINTER_ONE:
	LDX #$0C
	LDY #$E7 ;pointer to $E70C
	AND #$07 ;range 0 to 7 (disregard direction bit)
	BEQ COMMIT_ANIM_PTR ;This ptr if **** *000 (8 or 0)
DECIDE_POINTER_TWO:
	LDX #$05 ;used if A=0,1,2,6,7
	LDY #$E7 ;pointer to $E707
	CMP #$03
	BCC COMMIT_ANIM_PTR ;if <3, commit.
	CMP #$06
	BCS COMMIT_ANIM_PTR ;if >= 6, commit.
POINTER_THREE_DECIDED:
	LDX #$1D ;if A=3,4,5,11,15 use
	LDY #$E7 ;pointer to $E71D
COMMIT_ANIM_PTR:
	JSR SETUP_OBJ_ANIM_[PTR,INDEX,TIMER] ;set up ptr decided.
GET_DUCK_DIFFICULTY+MOVE:
	JSR GET_DUCK_DIFF_FROM_GROUP
MOVE_OBJ_LOOP:
	PHA  ;save difficulty loaded.
	LDA OBJ_ZP_Y_COORD
	CMP #$F0
	BCC OBJ_Y_<#$F0 ;if Y < #$F0.
	PLA  ;fix stack, ignore data.
	JMP OBJ_STATE_8_ANIM_TIMER_0
OBJ_Y_<#$F0:
	LDA OBJ_ZP_TIMER_MISC?
	BEQ TIMER_ZERO
	DEC OBJ_ZP_TIMER_MISC? ;dec timer if not 0.
TIMER_ZERO:
	LDY OBJ_ZP_INDEX_UNK ;get index
LOAD_TARGET_DATA_AGAIN:
	LDA UNK_TARGET_DATA,Y ;get data at index.
	INY  ;next index.
	CMP #$AA
	BNE NOT_MARKER ;if not marker byte.
	LDY OBJ_ZP_INDEX_4A_UNK ;User this instead for index.
	JMP LOAD_TARGET_DATA_AGAIN ;load with this index.
NOT_MARKER:
	CLC 
	ADC OBJ_ZP_Y_COORD ;add data to y coord...
	LDX OBJ_ZP_UNK_$4B
	BNE FLAG_WAS_SET_STORE_Y_COORD ;if !0, store.
	LDX UNK_FLYAWAY?
	BNE FLAG_WAS_SET_STORE_Y_COORD ;if !0, store.
	CMP #$1E
	BCC SKIP_WRITE_Y_COORD ;<1E, don't store.
	CMP #$92
	BCS SKIP_WRITE_Y_COORD ;>=92, don't store.
FLAG_WAS_SET_STORE_Y_COORD:
	STA OBJ_ZP_Y_COORD ;over write Y coord.
SKIP_WRITE_Y_COORD:
	LDA UNK_TARGET_DATA,Y ;get next data.
	INY  ;next index.
	STY OBJ_ZP_INDEX_UNK ;store index.
	CLC 
	ADC OBJ_ZP_X_COORD ;add to X coord.
	LDX OBJ_ZP_UNK_$4B
	BNE FLAG_SET_WRITE_X_COORD ;if !0, store.
	LDX UNK_FLYAWAY?
	BNE FLAG_SET_WRITE_X_COORD ;if !0, store.
	CMP #$0E
	BCC SKIP_WRITE_X_COORD ;if <0E, don't store.
	CMP #$F2
	BCS SKIP_WRITE_X_COORD ;if >= F2, don't store.
FLAG_SET_WRITE_X_COORD:
	STA OBJ_ZP_X_COORD ;save obj X.
SKIP_WRITE_X_COORD:
	PLA  ;Pull difficulty loaded.
	SEC 
	SBC #$01
	BNE MOVE_OBJ_LOOP ;ddifficulty is number of loops.
	JMP TARGET_ANIM_TIMER_CHECK/DISP ;put obj/disp
TARGET_STATE_4_HIT:
	LDX OBJ_ZP_TARGET_NUMBER+1 ;get which hit.
	LDA #$01
	STA DUCKS_HIT_ARRAY-1,X ;set hit in status array -1 because of +1.
	LDA #$01
	STA UPDATE_TARGETS_HIT ;enable update for status bar.
	STA OBJ_ZP_DUCK_DIFF ;reset difficulty....
	LDA #$12
	STA OBJ_ZP_TIMER_FALLING? ;unk. timer to hold anim?
	JSR ADD_TO_SCORE_TARGET
	LDX #$13
	LDY #$E7 ;shot ptr $E713 guessing.
SETUP_SCRIPT_NEXT_STATE:
	JSR SETUP_OBJ_ANIM_[PTR,INDEX,TIMER] ;set it up.
	INC OBJ_ZP_STATE ;next state.
	RTS 
TARGET_STATE5_FALLING:
	LDA OBJ_ZP_TIMER_FALLING? ;get timer.
	BEQ SKIP_SOUND_0 ;if 0, done.
	DEC OBJ_ZP_TIMER_FALLING? ;otherwise decrease.
	AND #$0F ;get %0000 1111
	CMP #$0A
	BNE SKIP_SOUND_0 ;A!=#A, skip.
	JSR SND_SET_F2_#$02 ;not sure.
SKIP_SOUND_0:
	JMP TARGET_ANIM_TIMER_CHECK/DISP
TARGET_STATE_6_SET_POPUP:
	JSR POINTS_DISPLAY_ADD ;display points for obj.
	JSR SND_SET_F0_#$10 ;falling sound.
	LDA OBJ_ZP_X_COORD ;get X for dog position.
	LDX #$48 ;Ranged value.
	CMP #$48
	BCC RANGE_DATA ;<48 on screen.
	LDX #$A0 ;Ranged value.
	CMP #$A0
	BCS RANGE_DATA ;>A0
	TAX 
RANGE_DATA:
	STX $03A3 ;Range dog sprite on screen for pop up.
	LDA #$01
	STA OBJ_ZP_UNK_$4B ;set, unk
	LDX #$10
	STX OBJ_ZP_DATA_DIRECTION ;not sure, but is direction/animinfo?
	LDA UNK_OBJ_DATA_264B,X ;always+#$10?
	STA OBJ_ZP_INDEX_UNK ;store 2x?
	STA OBJ_ZP_INDEX_4A_UNK
	LDX #$18
	LDY #$E7 ;script $E718
	BNE SETUP_SCRIPT_NEXT_STATE ;setup script+state, always taken.
TARGET_STATE_7_MOVE_OR_THUMP:
	LDA OBJ_ZP_Y_COORD ;Y-coord?
	CMP #$B0
	BCS GREATER_THAN_#$B0 ;>=
	JMP GET_DUCK_DIFFICULTY+MOVE ;move duck if not fell to ground.
GREATER_THAN_#$B0:
	JSR SND_SET_F2_#$08 ;thump sound?
	INC OBJ_ZP_STATE ;next state, removed from screen.
	RTS 
TARGET_STATE_8_REMOVE_OBJ:
	LDA #$00
	STA OBJ_ZP_STATE ;disable object.
	LDX OBJ_SPR_INDEX_START ;get its start.
	JMP OBJ_SPRITE_OFF_SCREEN ;put off screen.
FORWARD_TARGET_3:
	LDA TRGT3_TYPE
	BEQ RTS_10 ;deativated, nothing to display.
	LDA #$02
	STA OBJ_ZP_ORIGIN_SLOT#
	LDY #$A0
	JSR COPY_OBJ_$3YY_TO_OBJ_ZP ;move object to $30
	JSR PROCESS_OBJ_DOG
	JSR MOVE_OBJ_ZP_BACK_TO_ORIGIN ;put into high RAM
RTS_10:
	RTS 
PROCESS_OBJ_DOG:
	LDA OBJ_ZP_STATE
	JSR GOTO_TABLE_PAST_JSR
	.LOW RTS_3 ;RTS, default state?
	.HIGH RTS_3
	.LOW TRGT_STATE_1_SETUP_GAME_VARS ;setup dog, moves to 2.
	.HIGH TRGT_STATE_1_SETUP_GAME_VARS
	.LOW TRGT_STATE_2_ANIMATE_DOG_INTRO/LEVEL ;setup obj anim ptr, display.
	.HIGH TRGT_STATE_2_ANIMATE_DOG_INTRO/LEVEL
	.LOW TRGT_STATE_3_COUNT_FRAME ;watch counter, animate, go to state 6 or 4.
	.HIGH TRGT_STATE_3_COUNT_FRAME
	.LOW TRGT_STATE_4_STEP_0+SCRIPT ;step 0, setup animation script.
	.HIGH TRGT_STATE_4_STEP_0+SCRIPT
	.LOW TARGET_ANIM_TIMER_CHECK/DISP ;copy of state 0x11
	.HIGH TARGET_ANIM_TIMER_CHECK/DISP
	.LOW TRGT_STATE_6_SETUP_ANIM_SCRIPT ;setup.
	.HIGH TRGT_STATE_6_SETUP_ANIM_SCRIPT
	.LOW TARGET_ANIM_TIMER_CHECK/DISP ;another copy.
	.HIGH TARGET_ANIM_TIMER_CHECK/DISP
	.LOW TRGT_STATE_8_SET_SND_COUNTDOWN+SCRIPT ;setup script, set 9E=4
	.HIGH TRGT_STATE_8_SET_SND_COUNTDOWN+SCRIPT
	.LOW TRGT_STATE_9_CNTDWN_TO_SND ;9E, sound.
	.HIGH TRGT_STATE_9_CNTDWN_TO_SND
	.LOW TRGT_STATE_A_FTIMER_CNTDWN2SND+_SETXY+SCRIPT ;as named, lots here.
	.HIGH TRGT_STATE_A_FTIMER_CNTDWN2SND+_SETXY+SCRIPT
	.LOW TARGET_ANIM_TIMER_CHECK/DISP ;unused?
	.HIGH TARGET_ANIM_TIMER_CHECK/DISP
	.LOW TRGT_STATE_C_CNTDOWNTMR2SND_SETY_SCRIPT1/2 ;2B,setup,sound.
	.HIGH TRGT_STATE_C_CNTDOWNTMR2SND_SETY_SCRIPT1/2
	.LOW TARGET_ANIM_TIMER_CHECK/DISP ;unused?
	.HIGH TARGET_ANIM_TIMER_CHECK/DISP
	.LOW TRGT_STATE_E_SETUP_BETWEEN_ROUNDS? ;init game and other?
	.HIGH TRGT_STATE_E_SETUP_BETWEEN_ROUNDS?
	.LOW TRGT_STATE_F_CHK_TRGTS+IDK ;end of round?
	.HIGH TRGT_STATE_F_CHK_TRGTS+IDK
	.LOW TRGT_STATE_10_SET_X_BEHIND_BG_SETY_SCRIPT ;pigeons start from state 1?
	.HIGH TRGT_STATE_10_SET_X_BEHIND_BG_SETY_SCRIPT
	.LOW TARGET_ANIM_TIMER_CHECK/DISP ;disp obj?
	.HIGH TARGET_ANIM_TIMER_CHECK/DISP
	.LOW TRGT_STATE_12_CLR_WHEN_SCRIPT_DONE ;clears sprites when animation ends.
	.HIGH TRGT_STATE_12_CLR_WHEN_SCRIPT_DONE
TRGT_STATE_1_SETUP_GAME_VARS:
	LDX #$1F ;index
MOVE_DATA:
	LDA TARGET_3_DATA,X ;move initial data here to OBJ_ZP_COPY
	STA OBJ_ZP_COPY,X
	DEX 
	BPL MOVE_DATA
	LDA #$03
	STA SHOTS_REMAINING ;set shots remaining.
	LDA #$01
	STA SHOT_FIRED ;disable shooting the screen.
	STA UPDATE_TARGETS_HIT ;unk, set to 1.
	LDA #$02
	STA PALETTE_UPLOAD ;upload pallette.
	LDA IN_GAME_STATE
	CMP #$07 ;if game state is 7 (pigeons start?)
	BNE GAME_HAS_DOG
	LDA #$10
	STA OBJ_ZP_STATE ;move this to state #$10 if state is 7.
	RTS 
GAME_HAS_DOG:
	LDA LEVEL
	LDY #$18 ;X coord for dog in intro, very left.
	LDX #$00 ;not sure.
	CMP #$01
	BEQ IS_LEVEL_1 ;put dog earlier, not closer to middle.
	LDY #$50 ;puts dog mid screen here.
	LDX #$18
IS_LEVEL_1:
	STY OBJ_ZP_X_COORD ;X coord.
	STX OBJ_ZP_EXTRA_PTR/DATA ;animation step? Not sure.
	LDA #$01
	STA MULTIPLE_BG_UPDATE_INDEX ;Set index 1 for stepped updates.
	JSR WAIT_FOR_NMI
	JSR PLAY_SOUNDS ;init sounds to clear garbage up?
	INC OBJ_ZP_STATE ;inc object state to 2.
	RTS 
TRGT_STATE_2_ANIMATE_DOG_INTRO/LEVEL:
	LDX #$8E ;points to $E78E, animation script.
	LDY #$E7 ;this is the dog walking across the screen.
	JMP SETUP_INC_TRGT_GOTO_11
TRGT_STATE_3_COUNT_FRAME:
	LDA OBJ_ZP_FRAME ;get frame showing.
	CMP #$0C ;if is frame X.
	BNE FRAME_NOT_C
	INC OBJ_ZP_EXTRA_PTR/DATA ;is counter on dog. inc count.
	LDA OBJ_ZP_EXTRA_PTR/DATA ;get value.
	CMP #$20 ;if is 20...
	BCC FRAME_NOT_C
	INC OBJ_ZP_STATE ;go to next state.
RTS_11:
	RTS 
FRAME_NOT_C:
	JSR TARGET_ANIM_TIMER_CHECK/DISP ;check animation/disp.
	LDA OBJ_ZP_X_COORD
	CMP OBJ_ZP_EXTRA_PTR/DATA+1 ;idk what for yet. is pointer data? why this?
	BNE RTS_11 ;if not eq, rts.
	LDA #$06
	STA OBJ_ZP_STATE ;set state to 6 when eq.
	RTS 
TRGT_STATE_4_STEP_0+SCRIPT:
	LDA #$00
	STA OBJ_ZP_EXTRA_PTR/DATA
	LDX #$98
	LDY #$E7 ;script at E798
SETUP_INC_TRGT_GOTO_11:
	JSR SETUP_OBJ_ANIM_[PTR,INDEX,TIMER]
	INC OBJ_ZP_STATE ;State++
	JMP TARGET_ANIM_TIMER_CHECK/DISP ;display this obj NOW.
TRGT_STATE_6_SETUP_ANIM_SCRIPT:
	LDX #$A7 ;Animation ptr to script.
	LDY #$E7
	BNE SETUP_INC_TRGT_GOTO_11
TRGT_STATE_8_SET_SND_COUNTDOWN+SCRIPT:
	LDA #$04
	STA OBJ3_SOUND_COUNT_DOWN ;unk why.
	LDX #$AC
	LDY #$E7 ;animation script.
	BNE SETUP_INC_TRGT_GOTO_11
TRGT_STATE_9_CNTDWN_TO_SND:
	DEC OBJ3_SOUND_COUNT_DOWN
	LDA OBJ3_SOUND_COUNT_DOWN
	BNE ANIMATE_ONLY ;if 9E != 0, no sound, just animate.
	LDA #$10 ;new timer.
	STA OBJ3_SOUND_COUNT_DOWN ;save.
	JSR SND_SET_F2_#$01 ;play sound.
ANIMATE_ONLY:
	JMP TARGET_ANIM_TIMER_CHECK/DISP ;animate, abuse their rts.
TRGT_STATE_A_FTIMER_CNTDWN2SND+_SETXY+SCRIPT:
	LDA FAST_TIMERS
	BNE RTS_11 ;if timer not 0.
	JSR SND_SET_F0_#$40 ;play sound.
	LDA #$80
	STA OBJ_ZP_X_COORD ;move obj to near center screen.
	JSR SPAWN_DUCK?
	LDX #$46 ;anim script ptr to E846
	LDY #$E8
	BNE SETUP_INC_TRGT_GOTO_11
TRGT_STATE_C_CNTDOWNTMR2SND_SETY_SCRIPT1/2:
	LDA FAST_TIMERS
	BNE RTS_11 ;if timer not 0, leave.
	JSR SND_SET_F1 ;set sound.
	JSR SPAWN_DUCK? ;more clearing of stuff.
	LDX #$94
	LDY #$E8 ;loads animation ptr. E894
	LDA TRGT_SHOT_DURING_ATTEMPT
	CMP #$01
	BEQ SETUP_INC_TRGT_GOTO_11 ;use this animation script if BD=1
	LDX #$A3 ;load this ptr instead, E8A3.
	LDY #$E8
	BNE SETUP_INC_TRGT_GOTO_11
TRGT_STATE_E_SETUP_BETWEEN_ROUNDS?:
	LDA #$30 ;mostly self explainatory.
	STA COUNTDOWN_TO_ENABLE_TARGETS
	LDA #$01
	STA ZAP_SHOT_ENABLED
	LDA #$03
	STA SHOTS_REMAINING
	LDA #$01
	STA SHOT_FIRED
	LDA #$00
	STA TRGT_SHOT_DURING_ATTEMPT
	LDA #$02 ;targets in mode
	LDY #$01 ;target 2 state+type
	LDX GAME_MODE_IN
	BNE TWO_TARGET_GAME_2
	LDA #$01 ;one target
	LDY #$00 ;disable target 2
TWO_TARGET_GAME_2:
	STA #_TARGETS_REMAINING
	STY TRGT2_TYPE
	STY TRGT2_STATE ;enabled for 2 target games, disabled for 1 target.
	LDA #$01 ;always enabled, enable.
	STA TRGT1_TYPE
	STA TRGT1_STATE
	JSR RNG_ADVANCE ;rng advance and get number in A.
	STA TMP_0C ;random number stored.
	LDA #$03 ;blue and black ducks.
	LDY LEVEL
	CPY #$01
	BEQ FIRST_LEVEL ;if not the 2+ level, no red ducks!
	LDA #$07 ;red ducks possible now.
FIRST_LEVEL:
	AND TMP_0C
	STA DUCK_COMBO_INDEX ;DUCK_TYPE
	LDY #$00
	STY TARGETS_ACTIVATED_COUNT? ;# targets activated.
	TAX 
	LDA DUCK_DATA_COMBO,X ;get types from array
	STA TMP_0C ;store
	AND #$F0 ;get high group of 4 bits.
	LSR A ;index mul by 8, basically.
	LDY #$00 ;index
	JSR MOVE_DATA_TO_403+Y ;init state data?
	LDA TMP_0C ;get target info again
	AND #$0F ;get low byte
	ASL A
	ASL A
	ASL A ;shift mul by 8
	JSR MOVE_DATA_TO_403+Y ;Y continued.
	LDA #$3F
	STA UNK_0400 ;idk
	LDA #$10
	STA UNK_0401
	STA UNK_0402
	LDA #$00
	STA UNK_0413
	LDA #$01
	STA WHITE_BOX_DISPLAYED ;init?
	LDA #$12
	STA OBJ_ZP_STATE ;move state
	LDA #$00
	STA OBJ_ZP_ANIM_TIMER ;init
	RTS 
TRGT_STATE_F_CHK_TRGTS+IDK:
	LDA GAME_TARGETS_SHOWN?
	CMP #$0A ;is targets shown 100%?
	BNE OBJ_GOTO_STATE_E ;if not complete, continue.
	LDA #$00
	STA END_OF_ROUND_STATE ;clear A9 state.
	LDA #$04
	STA IN_GAME_STATE ;move to state end of round.
	JMP CLEAR_SPRITES
OBJ_GOTO_STATE_E:
	LDA #$0E
	STA OBJ_ZP_STATE ;sets up round of targets and whatnot.
	RTS 
TRGT_STATE_10_SET_X_BEHIND_BG_SETY_SCRIPT:
	LDA #$80
	STA OBJ_ZP_X_COORD ;sets x coord to $80.
	LDA #$01
	STA OBJ_ZP_COPY_BEHIND_BG? ;set to behind BG.
	JSR SPAWN_DUCK? ;set Y, unsure what 46+47 are.
	LDX #$B2 ;animation script ptr E8B2
	LDY #$E8
	JMP SETUP_INC_TRGT_GOTO_11
TRGT_STATE_12_CLR_WHEN_SCRIPT_DONE:
	LDA OBJ_ZP_ANIM_TIMER
	BNE TARGET_ANIM_TIMER_CHECK/DISP ;Do animation stuff if timer valid.
	LDA #$00 ;else, clear obj and remove from screen.
	STA OBJ_ZP_STATE ;clear state, disable object.
	LDX OBJ_SPR_INDEX_START ;get start of index to clear.
	JMP OBJ_SPRITE_OFF_SCREEN
TARGET_ANIM_TIMER_CHECK/DISP:
	LDA OBJ_ZP_ANIM_TIMER ;obj substate?
	BEQ UPDATE_ANIMATION_TO_PTR ;if update time...?
	DEC OBJ_ZP_ANIM_TIMER ;not sure why dec.
	JMP OBJ_TO_SCREEN_ROUTINE
UPDATE_ANIMATION_TO_PTR:
	LDY OBJ_ZP_PTR_INDEX ;index of animation data pointed to by OBJ.
	LDA (OBJ_ZP_PTR_L_UNK),Y ;get either 1. frames until change, or 2. flag.
	CMP #$FA ;if <= FA, not flag.
	BCC OBJ_ANIM_NO_FLAG ;if < FA, go here.
	INC OBJ_ZP_PTR_INDEX ;next index.
	SEC 
	SBC #$FA ;if >= #$FA, make index 0 to 5.
	JSR GOTO_TABLE_PAST_JSR ;ANIMATION COMMANDS BELOW.
	.LOW RTS_3 ;FA, does nothing.
	.HIGH RTS_3
	.LOW RTS_3 ;FB, does nothing.
	.HIGH RTS_3
	.LOW OBJ_ZP_INDEX_TO_#$1E ;FC, sets animation index to #$1E.
	.HIGH OBJ_ZP_INDEX_TO_#$1E
	.LOW OBJ_PUT_BEHIND_BG? ;FD, push animation behind BG.
	.HIGH OBJ_PUT_BEHIND_BG?
	.LOW OBJ_ZP_PTR_INDEX_TO_0 ;FE, restarts animation.
	.HIGH OBJ_ZP_PTR_INDEX_TO_0
	.LOW OBJ_ZP_NEW_STATE_FROM_PTR ;sets up substate from own ptr. FF
	.HIGH OBJ_ZP_NEW_STATE_FROM_PTR
OBJ_ANIM_NO_FLAG:
	LDY OBJ_ZP_PTR_INDEX ;get index int anim data.
	LDX OBJ_ZP_ORIGIN_SLOT#
	CPX #$02 ;if dog origin?
	BNE OBJ_ORIGIN_NOT_DOG ;if not dog, go here.
	LDX OBJ_ZP_STATE ;load dog state.
	CPX #$09 ;state
	BEQ OBJ_STATE_9 ;if is
	CPX #$0B ;state
	BEQ OBJ_STATE_B/D/11_(POPUP) ;if is
	CPX #$0D ;state
	BEQ OBJ_STATE_B/D/11_(POPUP) ;if is
	CPX #$11 ;state
	BNE NOT_ANY_OBJ_STATE_WANTED ;Not any obj state we care for.
OBJ_STATE_B/D/11_(POPUP):
	LDX OBJ_ZP_TIMER_MISC? ;load idk.
	BEQ OBJ_POPUP_ZERO ;skip if 0.
	DEC OBJ_ZP_TIMER_MISC? ;count down otherwise.
	LDA OBJ_ZP_MISC_INDEX? ;load popup amount.
	CLC 
	ADC OBJ_ZP_Y_COORD ;Add to Y.
	STA OBJ_ZP_Y_COORD ;store changed.
	JMP OBJ_TO_SCREEN_ROUTINE
OBJ_POPUP_ZERO:
	STA OBJ_ZP_TIMER_MISC? ;store data loaded by ptr
	INY  ;next byte.
	LDA (OBJ_ZP_PTR_L_UNK),Y ;load next byte.
	BPL IS_POSITIVE ;unsigned positive value.
	AND #$7F ;get lower bits.
	JSR TWO_COMPLIMENT_A_REGISTER ;get inverse.
IS_POSITIVE:
	STA OBJ_ZP_MISC_INDEX? ;store
	JMP MOVE_MORE_PTR_DATA
OBJ_STATE_9:
	TAX  ;script value to X.
	BPL IS_POSITIVE_0
	AND #$7F ;if negative, 2 compliment.
	JSR TWO_COMPLIMENT_A_REGISTER
IS_POSITIVE_0:
	CLC 
	ADC OBJ_ZP_Y_COORD ;add to the Y coord.
	STA OBJ_ZP_Y_COORD ;store Y coord.
	INY 
	LDA (OBJ_ZP_PTR_L_UNK),Y ;get direction.
	LDX OBJ_ZP_DIRECTION
	BEQ DIRECTION_RIGHT_NO_SUB
	JSR TWO_COMPLIMENT_A_REGISTER ;two compliment if subtracting.
DIRECTION_RIGHT_NO_SUB:
	CLC 
	ADC OBJ_ZP_X_COORD ;moe on X axis.
	STA OBJ_ZP_X_COORD ;store X axis.
MOVE_MORE_PTR_DATA:
	INY  ;next data ptr.
	LDA (OBJ_ZP_PTR_L_UNK),Y ;load
	STA OBJ_ZP_FRAME ;animation frame from file.
	INY 
	STY OBJ_ZP_PTR_INDEX ;store pointer to next byte.
	JMP OBJ_TO_SCREEN_ROUTINE ;sprite on screen.
NOT_ANY_OBJ_STATE_WANTED:
	CPX #$03 ;If state isn't currently 3.
	BNE OBJ_ORIGIN_NOT_DOG
	LDA #$02 ;offset two each step?
	LDX OBJ_ZP_DIRECTION ;get direction?
	BEQ MOVING_RIGHT ;if right, dont invert.
	JSR TWO_COMPLIMENT_A_REGISTER ;invert for -2
MOVING_RIGHT:
	CLC 
	ADC OBJ_ZP_X_COORD ;add to coord.
	STA OBJ_ZP_X_COORD ;save to obj.
OBJ_ORIGIN_NOT_DOG:
	LDA (OBJ_ZP_PTR_L_UNK),Y ;get frame timer to hold this animation.
	STA OBJ_ZP_ANIM_TIMER ;write that to obj timer.
	JMP MOVE_MORE_PTR_DATA
OBJ_ZP_NEW_STATE_FROM_PTR:
	LDY OBJ_ZP_PTR_INDEX ;get index.
	LDA (OBJ_ZP_PTR_L_UNK),Y ;get data at index.
	STA OBJ_ZP_STATE ;store to state.
	INY  ;next index.
	LDA (OBJ_ZP_PTR_L_UNK),Y ;get timer.
	STA OBJ_ZP_ANIM_TIMER ;store to timer.
	RTS 
OBJ_ZP_PTR_INDEX_TO_0:
	LDA #$00
WRITE_OBJ_PTR_INDEX:
	STA OBJ_ZP_PTR_INDEX ;store index value.
	JMP UPDATE_ANIMATION_TO_PTR
OBJ_PUT_BEHIND_BG?:
	LDA #$01
	STA OBJ_ZP_COPY_BEHIND_BG? ;set to true.
	JMP UPDATE_ANIMATION_TO_PTR
OBJ_ZP_INDEX_TO_#$1E:
	LDA #$1E
	BNE WRITE_OBJ_PTR_INDEX ;always taken.
SETUP_OBJ_ANIM_[PTR,INDEX,TIMER]:
	STX OBJ_ZP_PTR_L_UNK ;Pointer from X+Y, aination to play.
	STY OBJ_ZP_PTR_H_UNK
	LDA #$00
	STA OBJ_ZP_PTR_INDEX ;index to obj data of some type.
	STA OBJ_ZP_ANIM_TIMER ;substate counter?
	RTS 
DUCK_FLY_AWAY_CHECK:
	LDA OBJ_ZP_Y_COORD ;get y coord.
	CMP #$08
	BCC OBJ_STATE_8_ANIM_TIMER_0 ;if less than 8, gone.
	CMP #$90 ;Y pos on screen.
	BCS CHANGE_DIRECTION_UP ;always direction up if needed.
	LDA OBJ_ZP_X_COORD
	CMP #$0C
	BCC OBJ_STATE_8_ANIM_TIMER_0 ;off screen on left.
	CMP #$F4
	BCC MOVE_DUCKS_AUTOMATICALLY_0 ;if not at edge, just move.
OBJ_STATE_8_ANIM_TIMER_0:
	LDA #$08 ;disables here if not saved above. TODO: All this.
	STA OBJ_ZP_STATE
	LDA #$00
	STA OBJ_ZP_ANIM_TIMER
	RTS 
CHANGE_DIRECTION_UP:
	JMP Y_COORD_>=90 ;moves up.
MOVE_DUCKS_AUTOMATICALLY_0:
	JMP MOVE_DUCKS_AUTOMATICALLY ;moves wherever.
SPAWN_DUCK?:
	LDA #$00 ;clear two below.
	STA OBJ_ZP_TIMER_MISC? ;clear misc timer?
	STA OBJ_ZP_MISC_INDEX? ;clear misc index?
	LDA #$AC ;off screen behind bushes?
	STA OBJ_ZP_Y_COORD
	RTS 
MOVE_DATA_TO_403+Y:
	TAX  ;A to index?
	LDA #$08
	STA TMP_0D ;counter
LOOP_DATA_8:
	LDA TARGET_3_STATE_INIT?,X
	STA UNK_403,Y ;store to $403+Y
	INX 
	INY 
	DEC TMP_0D
	BNE LOOP_DATA_8
	RTS  ;still have no idea about this code or those vars.
ADD_TO_SCORE_PIGEON:
	LDA LEVEL ;get level.
	LDY #$02 ;score index to use.
	CMP #$06
	BCC SET_POINTS_FROM_Y ;level < 6
	LDY #$03
	CMP #$11
	BCC SET_POINTS_FROM_Y ;level < 10
	LDY #$05
	BNE SET_POINTS_FROM_Y ;commit our custom index to score.
ADD_TO_SCORE_TARGET:
	LDX LEVEL ;get level
	LDA #$00
	CPX #$06 ;increase score at level 6
	BCC WHICH_SCORES ;if level < 6
	LDA #$03
	CPX #$11 ;increase score at level 11
	BCC WHICH_SCORES ;if level <11
	LDA #$06 ;max scores.
WHICH_SCORES:
	CLC 
	ADC OBJ_ZP_DUCK_COLOR ;get score for color.
	TAX  ;put to index.
	LDY TBL_DUCK_INDEXES,X ;get value for duck.
SET_POINTS_FROM_Y:
	STY OBJ_ZP_POINTS ;save index for score.
	LDA TBL_DUCK_SCORES,Y ;get score digits BCD.
	STA TMP_06 ;score adding 00XX00
	LDA #$00
	STA TMP_04 ;add/subtract flag.
	STA TMP_05 ;score adding 00XX00
	STA TMP_07 ;adding digits 0000XX
	LDA #$0F ;jsr setup
	JSR SCORE_ADD/SUB ;do.
	JMP DISP_NEW_SCORE ;put to screen.
DISP_FLY_AWAY:
	LDA TRGT_SHOT_DURING_ATTEMPT
	BNE RTS_12 ;leave if any hits.
	LDA #$06
	JSR UPDATE_PPU_GROUP
	LDA #$30
	STA FAST_TIMERS ;not sure why.
	LDA #$06
	STA PALETTE_UPLOAD ;orange color?
	LDA #$01
	STA WHITE_BOX_DISPLAYED ;not sure why here.
	LDA #$36
	STA UNK_403 ;not sure why.
	STA UNK_407
	STA UNK_40B
	STA UNK_40F
RTS_12:
	RTS 
DISP_SCORE_SPRITES:
	LDX #$00 ;obj 0
	LDY #$00 ;spr slot 60
	JSR SPRITE_SOMETHING_1
	LDX #$04 ;obj 1
	LDY #$08 ;spr slot 62
SPRITE_SOMETHING_1:
	LDA SCORE_ANIM_COUNTER,X
	BEQ RTS_13 ;already ended.
	DEC SCORE_ANIM_COUNTER,X ;Dec counter
	BNE KEEP_ON_SCREEN
	LDA #$F4 ;Sprite Y value, removed from screen
	STA SCORE_OBJ_Y,X
	STA SCORE_OBJ_X,X
KEEP_ON_SCREEN:
	LDA SCORE_OBJ_Y,X
	STA POINTS_SPRITE_AREA,Y
	STA POINTS_SPRITE_AREA+4,Y ;Store Y
	LDA SCORE_UPPER_SPRITE,X ;get tile for score.
	STA POINTS_SPRITE_AREA+1,Y ;store tile
	LDA #$FF
	STA POINTS_SPRITE_AREA+5,Y ;2nd blank?
	LDA #$00 ;no attributes.
	STA POINTS_SPRITE_AREA+2,Y
	STA POINTS_SPRITE_AREA+6,Y
	LDA SCORE_OBJ_X,X ;get x pos
	STA POINTS_SPRITE_AREA+3,Y ;store.
	CLC 
	ADC #$08
	STA POINTS_SPRITE_AREA+7,Y ;store +8
RTS_13:
	RTS 
POINTS_DISPLAY_ADD:
	LDX #$00
	LDA SCORE_ANIM_COUNTER,X ;load.
	BEQ IS_ZER0
	LDX #$04 ;put into 2nd sprite slot if first is active.
IS_ZER0:
	LDA OBJ_ZP_Y_COORD ;Y-coord?
	SEC 
	SBC #$04 ;move slightly up.
	STA SCORE_OBJ_Y,X ;store at index...
	LDA OBJ_ZP_X_COORD ;X coord?
	SEC 
	SBC #$08 ;move left slightly.
	STA SCORE_OBJ_X,X ;store 
	LDA OBJ_ZP_POINTS
	CLC 
	ADC #$F7 ;Get score char to display.
	STA SCORE_UPPER_SPRITE,X ;store.
	LDA #$30 ;counter value to show scores for.
	STA SCORE_ANIM_COUNTER,X ;Store score animation length.
	RTS 
OBJ_TO_SCREEN_ROUTINE:
	LDA OBJ_SPR_INDEX_START ;unk
	STA SPRITE_INDEX_VAL ;last index of sprite? not sure yet.
	LDA OBJ_ZP_FRAME ;get frame to show.
	ASL A ;make index val.
	TAY  ;put to Y index.
	LDA #$C5 ;set up pointer to $DAC5, anim file pointers.
	STA TMP_12
	LDA #$DA
	STA TMP_13
	LDA (TMP_12),Y ;get frame from OBJ_ZP_FRAME
	STA TMP_$10
	INY  ;next data
	LDA (TMP_12),Y
	STA TMP_$11 ;$10 is now points to the file.
	LDY #$00
	STY FRAME_PTR_INDEX ;clear index into the frame pointer.
END_FRAME_DATA_CHECK:
	LDY FRAME_PTR_INDEX ;get frame index to display now.
	LDA (TMP_$10),Y ;load data from ANIM_FILE
	CMP #$00 ;EOF. Bad code, no need to compare smh.
	BNE NOT_END_OF_FRAME_FILE ;if not 0, maniuplate data.
	LDX SPRITE_INDEX_VAL ;index for sprite obj something.
OBJ_SPRITE_OFF_SCREEN:
	LDA #$F4 ;move sprite off screen.
CLEAR_SPRITE_LOOP:
	CPX OBJ_SPR_INDEX_FINAL ;Last index of obj.
	BEQ RTS_14 ;if at end, leave.
	STA $0200,X ;store data.
	INX  ;next byte.
	JMP CLEAR_SPRITE_LOOP
RTS_14:
	RTS 
NOT_END_OF_FRAME_FILE:
	STA TMP_13 ;store high byte of FRAME_DATA
	INY 
	LDA (TMP_$10),Y ;load other pointer byte from ANIM_FILE.
	INY 
	STA TMP_12 ;$12 now points to FRAME_DATA
	LDA (TMP_$10),Y ;Y offset
	INY 
	CLC 
	ADC OBJ_ZP_Y_COORD ;Add to Y coord.
	STA TARGET_Y_COORD_CPY ;store copy of value for later use? speculation?
	LDA (TMP_$10),Y ;X offset. From file?
	INY 
	LDX OBJ_ZP_DIRECTION ;get direction.
	BEQ DIRECTION_RIGHT ;3 below.
	JSR TWO_COMPLIMENT_A_REGISTER ;if left, invert.
	SEC 
	SBC #$08 ;subtract sprite width also, for right math.
DIRECTION_RIGHT:
	CLC 
	ADC OBJ_ZP_X_COORD ;X position of obj.
	STA TARGET_X_COORD_CPY ;store to copy. speculation?
	STY FRAME_PTR_INDEX ;store new $10 index.
	LDY #$00 ;reset index to load ANIM_DATA
	LDA (TMP_12),Y ;get anim data.
	LDX #$00 ;set index for object.
	CMP #$00 ;this cmp not needed if rearranged. or use an array.
	BEQ WRITE_UPDATE_GROUP ;if is, X index correct.
	LDX #$10 ;index for this obj.
	CMP #$01 ;position 1, index 10.
	BEQ WRITE_UPDATE_GROUP
	LDX #$38
	CMP #$02 ;position 2, index #$38.
	BEQ WRITE_UPDATE_GROUP
	LDX #$44 ;default
WRITE_UPDATE_GROUP:
	STX SPRITE_UPDATE_BASE ;index into $2XX to start at.
ANIM_DATA_NEXT:
	INY  ;next $12 ptr data.
MORE_ANIM_DATA:
	LDA (TMP_12),Y ;get anim data.
	CMP #$FF ;EOF for anim data.
	BEQ END_FRAME_DATA_CHECK ;goes back to $10 stream data.
	CMP #$FE
	BNE $12_NOT_#$FE
	INC SPRITE_UPDATE_BASE ;FE value skips 1 sprite. 2 point offsets.
	INC SPRITE_UPDATE_BASE
	JMP ANIM_DATA_NEXT ;keep processing $12
$12_NOT_#$FE:
	CMP #$FD
	BNE SPRITE_OUTPUT_FINALLY
	INY  ;FD command does...
	LDA (TMP_12),Y ;gets the next byte.
	CLC 
	ADC OBJ_ZP_DISP_ATTR? ;add it to obj attr. for pallaette selection?
	STA SPRITE_ATTR_COPY? ;store outside of obj data.
	LDA OBJ_ZP_COPY_BEHIND_BG?
	BEQ ANIM_DATA_NEXT ;but if it's 0, process more data.
	LDA SPRITE_ATTR_COPY? ;set B3 %0010 0000, behind background?
	ORA #$20
	STA SPRITE_ATTR_COPY? ;save
	JMP ANIM_DATA_NEXT ;do more data.
SPRITE_OUTPUT_FINALLY:
	LDX SPRITE_UPDATE_BASE ;which index updating.
	LDA SPR_X/Y_OFFSETS_ARRAY,X ;get spr skeleton from base index.
	INC SPRITE_UPDATE_BASE ;next byte for array.
	CLC 
	ADC TARGET_Y_COORD_CPY ;add Y copy with data. does it do this to overflow if going to always?
	JSR MAKE_Y_PROPER ;something to do with Y, proper value, and FF.
	LDX SPRITE_INDEX_VAL ;get updating.
	STA $0200,X ;finally some sprite code jesus. sprite Y stored.
	INC SPRITE_INDEX_VAL ;next byte.
	LDA (TMP_12),Y ;get data.
	INY  ;next data.
	LDX SPRITE_INDEX_VAL ;get index. idk why not using X here.
	STA $0200,X ;store sprite tile.
	INC SPRITE_INDEX_VAL ;next data.
	LDA SPRITE_ATTR_COPY? ;get sprite attr copy.
	LDX OBJ_ZP_DIRECTION ;direction? 0=>,1=<?
	BEQ DIRECTION_RIGHT_0
	AND #$BF ;This rtn sets the sprite going <, all default going >. clear attr flip x
	STA TMP_0C ;store to temp.
	LDA SPRITE_ATTR_COPY? ;get attr again
	AND #$40 ;get bit 0100 0000
	EOR #$40 ;invert bit, sets sprite to flip horiz.
	ORA TMP_0C ;store in TMP. Does this because setting in obj would be screwed up.
DIRECTION_RIGHT_0:
	LDX SPRITE_INDEX_VAL ;get index.
	STA $0200,X ;store sprite attr.
	INC SPRITE_INDEX_VAL ;next index.
	LDX SPRITE_UPDATE_BASE ;get group index.
	LDA SPR_X/Y_OFFSETS_ARRAY,X ;get value
	INC SPRITE_UPDATE_BASE ;next data.
	LDX OBJ_ZP_DIRECTION ;get direction.
	BEQ IS_RIGHT
	JSR TWO_COMPLIMENT_A_REGISTER ;invert if left. x?
IS_RIGHT:
	CLC 
	ADC TARGET_X_COORD_CPY ;add with X coord.
	JSR MAKE_X_PROPER ;make X proper value.
	LDX SPRITE_INDEX_VAL ;get index.
	STA $0200,X ;sprite data store X.
	INC SPRITE_INDEX_VAL ;next index.
	JMP MORE_ANIM_DATA ;LOOP.
MAKE_Y_PROPER:
	PHA  ;save A
	LDA OBJ_ZP_Y_COORD ;Y coord.
	JMP MAKE_A_PROPER_VALUE
MAKE_X_PROPER:
	PHA  ;save return.
	LDA OBJ_ZP_X_COORD ;X coord.
MAKE_A_PROPER_VALUE:
	STA TMP_0F ;A to 0F
	PLA  ;pull data on stack.
	PHA  ;push back for later again.
	SEC 
	SBC TMP_0F ;subtract with Y.
	BCS IS_ON_SCREEN_STILL
	JSR TWO_COMPLIMENT_A_REGISTER ;invert otherwise.
IS_ON_SCREEN_STILL:
	CMP #$30 ;idk why this value.
	PLA  ;pull old value back.
	BCC SPRITE_OKAY ;if < #$30
	LDA #$FF ;off screen?
SPRITE_OKAY:
	RTS 
TWO_COMPLIMENT_A_REGISTER:
	EOR #$FF ;invert
	CLC 
	ADC #$01 ;add 1 to correct to 2's compliment.
	RTS  ;return value.
ZAP_PROC_TRIGGER:
	LDA APU_FRAMECOUNTER ;zapper input
	AND #$10 ;read trigger
	CMP ZAP_PREVIOUS_STATE ;see if match
	BEQ INT_STATE_MATCH
	STA ZAP_PREVIOUS_STATE ;save state
ZERO_STATE_COUNT:
	LDA #$00
	STA ZAP_STATE_COUNT ;clear value.
RTS_15:
	RTS 
INT_STATE_MATCH:
	INC ZAP_STATE_COUNT ;trig in same state as prev
	LDY ZAP_STATE_COUNT
	CPY #$01
	BNE RTS_15 ;first match only.
	AND #$10 ;A=zapper state
	BEQ INT_ZAP_TRIG_RELEASED ;not pressed
	LDA #$01
	STA ZAPPER_PRESSED ;state pressed
	BNE ZERO_STATE_COUNT ;always taken.
INT_ZAP_TRIG_RELEASED:
	LDA ZAPPER_PRESSED
	BEQ ZERO_STATE_COUNT ;not marked as pressed, do this.
	LDY #$00
	STY ZAPPER_PRESSED ;clear pressed.
	INY 
	STY ZAPPER_TRIG_RELEASED ;set released.
	BNE ZERO_STATE_COUNT ;always taken
PROCESS_ZAPPER:
	LDA ZAP_SHOT_ENABLED
	BNE SHOOTING_ENABLED ;has to be enabled.
TRIG_NO_RELEASE:
	LDA #$00
	STA ZAPPER_TRIG_RELEASED ;not released.
RTS_16:
	RTS 
SHOOTING_ENABLED:
	LDA ZAPPER_TRIG_RELEASED
	BEQ RTS_16 ;wait for release to do anything.
	LDA SHOTS_REMAINING
	BEQ TRIG_NO_RELEASE ;never release if no shot
	DEC SHOTS_REMAINING ;1 less shot, if in game.
	LDA #$01
	STA SHOT_FIRED ;shot was fired.
	LDA #$00
	STA ZAPPER_TRIG_RELEASED ;not released.
	JSR SND_SET_F0_#$02 ;sound init?
	LDA #$04 ;palette 03 for whole screen
	STA PALETTE_UPLOAD ;pallet of all black bg, white sprite 0
	JSR CLEAR_SPRITES ;clear all sprites.
	JSR NMI_DISABLE_SPRITS/BG ;waits for nmi
	LDA IN_MENU_FLAG
	BEQ IN_GAME ;is in game if not in menu.
	JSR SND_SET_F0_#$01 ;disable all regs
	JSR PLAY_SOUNDS
	JSR SND_SET_F0_#$02 ;init noise+dmc?
	LDA #$02
	STA LIGHT_HIT_INDEX ;set for obj hit?
	LDA #$FF ;why not set ppuctrl? weird.
	STA PPU_SCROLL_X_RAM ;set scroll this way...
	BNE ZAPPER_TEST_HIT_SCREEN ;always taken.
IN_GAME:
	LDA #$05 ;pallette 5
	STA PALETTE_UPLOAD ;game palette black?
	LDA #$00
	STA LIGHT_HIT_INDEX ;obj 0.
	LDY #$00 ;target origin.
	LDA TRGT1_TYPE
	BEQ DETECT_TARGET_2 ;no type, not active.
	LDA TRGT1_STATE
	CMP #$03
	BEQ TARGET_STATE_CAN_BE_SHOT ;has to be state 3 to be shootable.
DETECT_TARGET_2:
	LDA #$01
	STA LIGHT_HIT_INDEX ;obj 1 if hit.
	LDY #$50 ;target origin.
	LDA TRGT2_TYPE
	BEQ UPLOAD_PELLETTE_FOR_GAME
	LDA TRGT2_STATE
	CMP #$03
	BNE UPLOAD_PELLETTE_FOR_GAME ;can't shoot this target.
TARGET_STATE_CAN_BE_SHOT:
	JSR MOVE_TRGT_INFO_TO_ZP_MINIMAL ;move tiny info to ZP.
ZAPPER_TEST_HIT_SCREEN:
	JSR CLEAR_NMIRAN/PPUSTUFFFLAG ;clear NMI_RAN
WAIT_NO_LIGHT:
	LDA NMI_RAN
	BNE NO_LIGHT_SUCCESS ;if get to 1 with no light, success.
	LDA APU_FRAMECOUNTER ;get zapper state
	AND #$08 ;does it see light
	BNE WAIT_NO_LIGHT ;no,wait
	LDA LIGHT_HIT_INDEX ;0, failure.
	JMP ACTUAL_TARGET_NOT_HIT ;does menu stuff too.
UPLOAD_PELLETTE_FOR_GAME:
	LDA GAME_MODE_IN ;get mode in.
	CMP #$02 ;is pigeons.
	BNE UPLOAD_PALETTE_DUCKS
	JMP GAME_MODE_PIGEONS
UPLOAD_PALETTE_DUCKS:
	LDY #$02
	STY PALETTE_UPLOAD ;palette 2
	JSR WAIT_FOR_NMI ;wait until palette updated.
	LDY #$01
	STY WHITE_BOX_DISPLAYED ;set flag
	JMP DISP_WHITE_BOX ;displays the white box.
NO_LIGHT_SUCCESS:
	JSR CLEAR_NMIRAN/PPUSTUFFFLAG ;previous test passed.
	LDA PPU_MASK_RAM
	AND #$E7 ;disable sprites/bg
	STA PPU_MASK_RAM
	LDA #$08 ;enable BG
	LDY LIGHT_HIT_INDEX
	CPY #$02 ;on menu?
	BEQ WRITE_PPU_MASK ;if so, use BG for detection.
	LDA #$10 ;otherwise, sprites in game.
WRITE_PPU_MASK:
	ORA PPU_MASK_RAM ;do what was told.
	STA PPU_MASK_RAM
	STA PPU_Mask ;write what was wanted.
	JSR CLEAR_SPRITES ;clear sprites.
	LDA TRGT2_TYPE
	BEQ TEST_LIGHT_LOOP ;doesn't exist.
	LDA TRGT2_STATE
	CMP #$03 ;state active
	BNE TEST_LIGHT_LOOP ;not valid rn
	LDY #$50 ;valid target, do something...
	JSR MOVE_TRGT_INFO_TO_ZP_MINIMAL ;display box?
TEST_LIGHT_LOOP:
	LDA NMI_RAN
	BNE TARGET_NOT_HIT ;test for light for whole frame.
	LDA APU_FRAMECOUNTER ;load controller.
	AND #$08
	BNE TEST_LIGHT_LOOP ;not detected, loop.
	LDA LIGHT_HIT_INDEX ;detected, hit target.
	CMP #$02
	BNE TARGET_WAS_HIT ;target hit.
	LDA #$01 ;menu hit
WRITE_ZAP_HIT_FROM_A:
	STA ZAPPER_RESULT ;hit=1,miss=2
	LDA #$01 ;upload palette 0
	STA PALETTE_UPLOAD
	LDA #$00 ;back to screen.
	STA PPU_SCROLL_X_RAM
	JSR WAIT_FOR_NMI
	JMP PPU_ENABLE_SPRITES/BG ;RTS's here, screen back.
TARGET_WAS_HIT:
	INC TARGETS_IN_LEVEL ;not sure why inc IN level.
	INC TRGT_SHOT_DURING_ATTEMPT ;set to true by INC, so 1 or 2 targets both true.
	LDX #$04 ;target state to write.
	LDA LIGHT_HIT_INDEX
	BNE HIT_TARGET_2
	STX TRGT1_STATE ;target 1 hit.
	JMP IN_GAME_0
HIT_TARGET_2:
	STX TRGT2_STATE ;target 2 hit.
IN_GAME_0:
	LDA GAME_MODE_IN
	CMP #$02
	BEQ GAME_MODE_PIGEONS
	LDY #$01 ;palette ducks.
	STY WHITE_BOX_DISPLAYED
	INY 
	BNE UPLOAD_PALETTE_ORIGINAL
GAME_MODE_PIGEONS:
	LDY #$03 ;pallette pigeons.
UPLOAD_PALETTE_ORIGINAL:
	STY PALETTE_UPLOAD ;store palette.
DISP_WHITE_BOX:
	JSR CLEAR_SPRITES ;clear.
	JMP PPU_ENABLE_SPRITES/BG ;show screen again.
TARGET_NOT_HIT:
	LDA LIGHT_HIT_INDEX
	BNE ACTUAL_TARGET_NOT_HIT
	LDA TRGT2_TYPE
	BEQ IN_GAME_0 ;skip if not active.
	LDA TRGT2_STATE
	CMP #$03
	BNE IN_GAME_0 ;skip if not active.
	LDA #$01
	STA LIGHT_HIT_INDEX ;testing target 2
	JSR CLEAR_NMIRAN/PPUSTUFFFLAG
	JMP TEST_LIGHT_LOOP
ACTUAL_TARGET_NOT_HIT:
	CMP #$02 ;menu signifier.
	BNE IN_GAME_0 ;not on menu
	LDA #$02 ;why load?
	BNE WRITE_ZAP_HIT_FROM_A ;saved a whopping -2 bytes, -2 cycles.
MOVE_TRGT_INFO_TO_ZP_MINIMAL:
	LDA TRGT1_Y_COORD,Y ;Move the target Y to ZP.
	STA TARGET_Y_COORD_CPY
	LDA TRGT1_X_COORD,Y ;Move target X to XP.
	STA TARGET_X_COORD_CPY
	LDA TRGT1_SKELETON_TO_USE?,Y ;is this the skeleton to use for the sprite?
	STA TMP_0C ;anim frame? Still not sure.
	JMP SPRITE_OFFSETS_APPLY ;TODO. Sprite for shooting?
SETUP_HITSREQD_TARGETS_OTHER:
	LDY HITS_REQUIRED_RAM_INDEX
RELOAD_HITS_REQD:
	LDA HITS_REQUIRED_FOR_LEVEL,Y
	CMP #$FF ;if at end
	BNE NO_MORE_DATA
	LDY #$13 ;range to end.
	BNE RELOAD_HITS_REQD ;load again
NO_MORE_DATA:
	INY  ;inc for next level.
	STY HITS_REQUIRED_RAM_INDEX ;store back current index.
	STA HITS_REQUIRED_RAM
	LDA #$00
	STA GAME_TARGETS_SHOWN? ;clear idk
	STA TARGETS_IN_LEVEL
	LDA #$01
	STA TRGT3_TYPE ;target type. dog?
	STA TRGT3_STATE ;enabled state?
	LDA #$FF
	STA UNK_$9C_INDEX ;set idk.
	RTS 
GAME_STATE_C_END_RND_OPTIONS:
	LDA END_OF_ROUND_STATE
	JSR GOTO_TABLE_PAST_JSR
	.LOW END_ROUND_STATE_0_TIMER+NEXT ;A9 next state. sets up timer.
	.HIGH END_ROUND_STATE_0_TIMER+NEXT
	.LOW END_ROUND_STATE_1_TARGET_SHIFT ;watch timer 2B, at 0 exec end of round
	.HIGH END_ROUND_STATE_1_TARGET_SHIFT
	.LOW END_ROUND_STATE_3_BONUS ;find bonus.
	.HIGH END_ROUND_STATE_3_BONUS
	.LOW END_ROUND_STATE_3_NEXT_ROUND ;display and play bonus sound.
	.HIGH END_ROUND_STATE_3_NEXT_ROUND
END_ROUND_STATE_0_TIMER+NEXT:
	LDA #$10 ;timer for duck counting.
	STA FAST_TIMERS ;set fast timer.
	INC END_OF_ROUND_STATE ;next round state.
	RTS 
END_ROUND_STATE_1_TARGET_SHIFT:
	LDA FAST_TIMERS
	BNE RTS_17 ;RTS if timer not 0.
	LDY #$00 ;Y is no_changes.
	LDX #$01 ;start with index 1
DUCK_MOVE_LOOP:
	LDA DUCKS_HIT_ARRAY,X ;get status+1
	BEQ SKIP_STATUS_SHIFT ;if not hit, skip.
	LDA DUCKS_HIT_ARRAY-1,X ;get status
	BNE SKIP_STATUS_SHIFT ;if hit, skip.
	INC DUCKS_HIT_ARRAY-1,X ;curr now hit.
	DEC DUCKS_HIT_ARRAY,X ;+1 not hit now.
	LDY #$01 ;changed, do again.
SKIP_STATUS_SHIFT:
	INX  ;next target
	CPX #$0A
	BNE DUCK_MOVE_LOOP ;not done, loop.
	DEY  ;if changed, Y=0.
	BNE FINALIZE_ROUND ;finalize if no changes.
	LDA #$00
	STA END_OF_ROUND_STATE ;do end round again, not finished.
	JSR SND_SET_F1_#$20 ;play swapped music.
	JMP PPU_DISP_TARGET_STATUS ;show new ducks, abuse RTS.
FINALIZE_ROUND:
	LDA TARGETS_IN_LEVEL
	CMP HITS_REQUIRED_RAM
	BCC NOT_ENOUGH_TARGETS ;if A is less than REQ'd.
	JSR SND_SET_F1_#$40 ;set success sound.
	LDA #$00
	STA SHOT_FIRED ;reset
	LDA #$10 ;timer value
	STA FAST_TIMERS
	INC END_OF_ROUND_STATE ;next state.
	LDA LEVEL
	AND #$0F ;get bottom digit
	BNE RTS_17 ;if level X1-X9, rts?
	JSR CLEAR_SPRITES
	LDA #$04
	JMP UPDATE_PPU_GROUP ;update something.
RTS_17:
	RTS 
NOT_ENOUGH_TARGETS:
	JSR CLEAR_SPRITES
	LDA #$08
	JSR UPDATE_PPU_GROUP ;game over group?
	JSR SND_SET_F2_#$80 ;game over sound?
	LDX #$06 ;future in game state.
	LDA #$0C ;timer.
	JMP SET_NEW_STATE_AFTER_TIMER
END_ROUND_STATE_3_BONUS:
	LDA FAST_TIMERS
	BNE RTS_17 ;if not 0, RTS.
	LDA #$10
	STA FAST_TIMERS ;reset timer.
	INC SHOT_FIRED ;used different here?
	LDA SHOT_FIRED
	CMP #$0F
	BNE SHOW_TRGT_NO_HITS ;pallette changing stuff, i believe.
	LDA TARGETS_IN_LEVEL
	CMP #$0A ;is perfect?
	BNE NOT_PERFECT ;not perfect?
	JSR SND_SET_F2_#$10 ;play perfect sound.
	LDA LEVEL ;get level
	LDX #$00 ;init bonus value.
	CMP #$11
	BCC BONUS_FOUND ;10K bonus.
	INX 
	CMP #$16
	BCC BONUS_FOUND ;15K bonus.
	INX 
	CMP #$21
	BCC BONUS_FOUND ;20K bonus.
	INX  ;30K bonus.
BONUS_FOUND:
	LDA BONUS_SCORES_HIGH,X
	STA TMP_05 ;store high.
	STA TMP_0C
	LDA BONUS_SCORES_LOW,X
	STA TMP_06 ;store low
	LSR A ;shift since only 3 bytes
	LSR A
	LSR A
	LSR A
	STA TMP_0D ;store low shifted.
	LDA #$00
	STA TMP_04
	STA TMP_07 ;clear others.
	LDA #$0F ;not sure init value.
	JSR SCORE_ADD/SUB
	JSR DISP_NEW_SCORE
	LDA #$03
	STA END_OF_ROUND_STATE ;end of round state.
	LDA #$A0
	STA FAST_TIMERS ;set timer.
	JSR CLEAR_SPRITES ;no sprites.
	LDA #$05
	JMP UPDATE_PPU_GROUP ;update and RTS.
NOT_PERFECT:
	LDA #$00 ;2D later.
END_ROUND_STATE_SWITCH:
	LDX #$02 ;future state duck.
	LDY GAME_MODE_IN ;get mode.
	CPY #$02 ;is pigeons?
	BNE NOT_PIGEONS ;no if taken
	LDX #$09 ;future state pigeons.
NOT_PIGEONS:
	JSR SET_NEW_STATE_AFTER_TIMER
	LDA #$00
	JMP UPDATE_PPU_GROUP
SHOW_TRGT_NO_HITS:
	AND #$01 ;which one to show.
	BNE SHOW_ALL_UNHIT
	JMP PPU_DISP_TARGET_STATUS ;show normal status.
SHOW_ALL_UNHIT:
	LDX #$09 ;loop count.
	LDA #$D6 ;duck not hit tile.
	LDY GAME_MODE_IN
	CPY #$02 ;is pigeons?
	BNE STORE_TILES_LOOP ;if not pigeons.
	LDA #$D4 ;pigeon unhit.
STORE_TILES_LOOP:
	STA PPU_UPDATE_BUF,X ;store tiles.
	DEX  ;next
	BPL STORE_TILES_LOOP ;if >=0, loop.
	JMP PPU_SHOW_TARGETS_BUFFER
END_ROUND_STATE_3_NEXT_ROUND:
	LDA FAST_TIMERS
	BNE RTS_18 ;if not 0, RTS.
	LDA #$04 ;2D timer later.
	BNE END_ROUND_STATE_SWITCH ;always taken.
RTS_18:
	RTS 
UPDATE_ACTIVE_TARGET_STATUS:
	LDA WHITE_BOX_DISPLAYED
	BNE RTS_19 ;white box displayed, ret.
	INC DISPLAY_BLINK_TIMER
	LDY #$00 ;index, target 1 first.
	JSR PROCESS_TARGET
	LDY #$50 ;target 2
PROCESS_TARGET:
	LDA TRGT1_TYPE,Y
	BEQ RTS_19 ;no target
	LDA TRGT1_STATE,Y
	CMP #$03 ;state active?
	BEQ TARGET_ACTIVE
	CMP #$08 ;state killed?
	BNE RTS_19 ;not killed, rts.
	LDX $030B,Y ;TRGT_INDEX_B = Target_Number
	LDA DUCKS_HIT_ARRAY-1,X ;Get status. $3F0 = target status array.
	BEQ TRGT_NOT_KILLED
	LDX #$D3 ;is killed, show.
	BNE OUT_TARGET_STATUS ;always go
TARGET_ACTIVE:
	LDA DISPLAY_BLINK_TIMER ;flag for blinking the status bar?
	AND #$0F
	BNE RTS_19 ;if X0, continue. RTS on 1-F, though.
	LDX #$B7 ;blank tile value.
	LDA DISPLAY_BLINK_TIMER
	AND #$10 ;every other group, show.
	BEQ COMMIT_TILE ;commit blank if 0, otherwise show targets.
TRGT_NOT_KILLED:
	LDX #$D4 ;tile for clay pigeon
OUT_TARGET_STATUS:
	LDA GAME_MODE_IN
	CMP #$02
	BEQ COMMIT_TILE
	INX  ;get proper char for ducks, D5/D6
	INX 
COMMIT_TILE:
	STX PPU_UPDATE_BUF
	LDX #$11 ;1 row, 1 tile.
	STX PPU_BLOCK_BUF_SETTING
	LDA $030B,Y ;get which number.
	CLC 
	ADC #$4B ;find PPU addr. $234B+which
	TAX 
	LDY #$23
	JMP MAKE_SETUP_PPU_BLOCK ;output.
RTS_19:
	RTS 
DISP_BLINK_WORD_SHOT:
	LDA ZAP_SHOT_ENABLED
	BEQ RTS_19 ;shots disabled
	LDA SHOTS_REMAINING
	BNE RTS_19 ;if any remaining, leave.
	LDA SHOT_BLINK_COUNTER
	AND #$07
	BNE INC_BLINK_COUNTER ;if bottom bits set.
	LDA WHITE_BOX_DISPLAYED
	BNE RTS_19 ;if white box, rts
	LDA SHOT_BLINK_COUNTER
	AND #$08
	BEQ DISP_SHOT_TEXT
	LDA #$B7 ;blank shot text with tile.
	TAX 
	TAY 
	BNE AXY_TO_UPDATEBUF_3BYTES
DISP_SHOT_TEXT:
	LDA #$DA ;SHOT text
	LDX #$DB
	LDY #$DC
AXY_TO_UPDATEBUF_3BYTES:
	STA PPU_UPDATE_BUF
	STX PPU_UPDATE_BUF+1
	STY PPU_UPDATE_BUF+2
	LDA #$13 ;1 group, 3 bytes.
	STA PPU_BLOCK_BUF_SETTING
	LDX #$63
	LDY #$23 ;store to 2363
	JSR MAKE_SETUP_PPU_BLOCK
INC_BLINK_COUNTER:
	INC SHOT_BLINK_COUNTER
	RTS 
UPDATE_PPU_GROUP:
	PHA 
	JSR WAIT_FOR_NMI
	JSR PLAY_SOUNDS
	PLA 
SPR_BG_UNK:
	STA SPRITE_UPDATE_BASE
	BEQ DISP_CLEAR_FIELD ;if A=0, clear message.
	ASL A
	TAX  ;X is now index.
	LDA MESSAGES_LOW,X
	STA TMP_INDIR_JMP_L
	LDA MESSAGES_HIGH,X
	STA TMP_INDIR_JMP_H
	LDY #$01
	LDA (TMP_INDIR_JMP_L),Y
	STA TMP_0F
	LDX #$00
	INY 
MORE_BYTES_IN_BLOCK:
	LDA (TMP_INDIR_JMP_L),Y
	STA PPU_BLOCK_BUF_SETTING,X
	INY 
	INX 
	DEC TMP_0F
	BNE MORE_BYTES_IN_BLOCK
	LDA SPRITE_UPDATE_BASE
	CMP #$01 ;level group?
	BNE NO_LEVEL_IN_UPDATE
	LDA LEVEL
	LSR A
	LSR A
	LSR A
	LSR A
	BEQ ONLY_ONE_DIGIT
	STA PPU_UPDATE_BUF+23 ;upper level digit if exists.
ONLY_ONE_DIGIT:
	LDA LEVEL
	AND #$0F ;bottom level digit
	STA PPU_UPDATE_BUF+24
	JMP NO_BONUS?
NO_LEVEL_IN_UPDATE:
	CMP #$05 ;perfect level bonus?
	BNE NO_BONUS?
	LDA TMP_0C ;bonus score for level digits?
	STA PPU_UPDATE_BUF+32
	LDA TMP_0D
	STA PPU_UPDATE_BUF+33
	JMP NO_BONUS?
DISP_CLEAR_FIELD:
	LDX #$44 ;68 bytes. DATA: 50 data, 10 addr. should be #60?
	LDA #$24 ;Set to area to clear.
LOOP_MAKE_BUF:
	STA PPU_UPDATE_BUF,X
	DEX 
	BPL LOOP_MAKE_BUF ;put clear tile loop.
	LDA #$6B ;5 groups of 10 bytes.
	STA PPU_BLOCK_BUF_SETTING ;save the setting to update buf.
	LDX #$CB ;where putting, $20XX
	BNE PPU_UPDATE_BLOCK_$20XX ;always taken.
NO_BONUS?:
	LDY #$00
	LDA (TMP_INDIR_JMP_L),Y
	TAX  ;get ppu high addr
PPU_UPDATE_BLOCK_$20XX:
	LDY #$20
	JMP MAKE_SETUP_PPU_BLOCK
CLEAR_MEMORIES:
	JSR CLEAR_SPRITES
	JSR CLEAR_0040_00BF
	JMP CLEAR_0300-03FF
SND_SET_F0_#$01:
	LDA #$01 ;disable all registers.
	BNE SND_SET_F0
SND_SET_F0_#$02:
	LDA #$02 ;NOISE+DMC INIT.
	BNE SND_SET_F0
SND_SET_F0_#$04:
	LDA #$04
	BNE SND_SET_F0
SND_SET_F0_#$08:
	LDA #$08
	BNE SND_SET_F0
SND_SET_F0_#$10:
	LDA #$10
	BNE SND_SET_F0
SND_SET_F0_#$20:
	LDA #$20
	BNE SND_SET_F0
SND_SET_F0_#$40:
	LDA #$40
	BNE SND_SET_F0
SND_SET_F0_#$80:
	LDA #$80
SND_SET_F0:
	ORA SND_PLAY_F0
	STA SND_PLAY_F0
	RTS 
SND_SET_F1_#$01:
	LDA #$01
	BNE SND_SET_F1_0
SND_SET_F1_#$02:
	LDA #$02 ;title sound?
	BNE SND_SET_F1_0
SND_SET_F1_#$04:
	LDA #$04
	BNE SND_SET_F1_0
SND_SET_F1:
	LDA #$08
	BNE SND_SET_F1_0
SND_SET_F1_#$10:
	LDA #$10 ;start of round?
	BNE SND_SET_F1_0
SND_SET_F1_#$20:
	LDA #$20
	BNE SND_SET_F1_0
SND_SET_F1_#$40:
	LDA #$40
	BNE SND_SET_F1_0
SND_SET_F1_#$80:
	LDA #$80
SND_SET_F1_0:
	ORA SND_PLAY_F1
	STA SND_PLAY_F1
	RTS 
SND_SET_F2_#$01:
	LDA #$01
	BNE SND_SET_F2
SND_SET_F2_#$02:
	LDA #$02
	BNE SND_SET_F2
	LDA #$04 ;dead code?
	BNE SND_SET_F2
SND_SET_F2_#$08:
	LDA #$08
	BNE SND_SET_F2
SND_SET_F2_#$10:
	LDA #$10
	BNE SND_SET_F2
SND_SET_F2_#$20:
	LDA #$20
	BNE SND_SET_F2
	LDA #$40
	BNE SND_SET_F2
SND_SET_F2_#$80:
	LDA #$80
SND_SET_F2:
	ORA SND_PLAY_F2
	STA SND_PLAY_F2
	RTS 
GAME_STATE_8_SETUP_PIGEONS:
	JSR WAIT_FOR_NMI ;this is for the pigeons game.
	LDX #$6C ;ptr $E26C
	LDY #$E2
	JSR UPLOAD_PPU_FILE ;upload file.
	LDA #$03
	STA PALETTE_UPLOAD ;Upload palette.
	LDA #$00
	STA MULTIPLE_BG_UPDATE_INDEX ;reset update index.
	LDA #$09
	STA IN_GAME_STATE ;go to next state.
	JSR SET_PPU_SCROLL
	JSR PPU_ENABLE_SPRITES/BG
	JMP SND_SET_F1_#$01 ;play sound. TODO:which snd
GAME_STATE_9_PIGEON_RND_SETUP:
	JSR CLEAR_MEMORIES ;setup memory.
	JSR SETUP_HITSREQD_TARGETS_OTHER ;set up hits for level.
	JSR MAKE_DISP_BUF_REQUIRED ;display hits per level.
	JSR MAKE_DISP_BUF_LEVEL ;display level #
	JSR WAIT_FOR_NMI
	JSR PLAY_SOUNDS
	LDA #$01
	STA SHOT_FIRED ;disable shots.
	LDA #$03
	STA SHOTS_REMAINING ;set remaining.
	JSR PPU_DISP_SHOTS_LEFT
	JSR PPU_DISP_TARGET_STATUS
	LDA #$06
	STA MULTIPLE_BG_UPDATE_INDEX ;Set to bg updates index.
	LDA #$0D
	STA IN_GAME_STATE ;move to state.
	RTS 
GAME_STATE_A_SUBROUND_INIT:
	LDA #$01
	STA TRGT1_TYPE ;target type.
	STA TRGT2_TYPE
	STA TRGT1_STATE ;target state. pigeons always 1 targets.
	STA TRGT2_STATE
	LDA #$30 ;max value from array.
	LDX LEVEL
	CPX #$10 ;max level value
	BCS LEVEL_MAXED ;if X >= 10, skip load.
	DEX  ;range 0-8???
	LDA LEVEL_DATA_UNK_0,X
LEVEL_MAXED:
	STA LEVEL_TIED_VAR? ;not sure
	LDA #$80
	STA COUNTDOWN_TO_ENABLE_TARGETS ;Set target enable countdown.
	LDA #$01
	STA SHOT_FIRED ;disable shooting.
	LDA #$03
	STA SHOTS_REMAINING ;store shots remaining.
	LDA #$02
	STA #_TARGETS_REMAINING ;set # trgts
	LDA #$00
	STA ZAPPER_TRIG_RELEASED ;disable trigger.
	STA ZAP_SHOT_ENABLED ;disable shots.
	STA TRGT_SHOT_DURING_ATTEMPT ;clear any hit. unused in pigeons?
	JSR PPU_DISP_SHOTS_LEFT ;show shots.
	JSR PPU_DISP_TARGET_STATUS ;show targets.
	LDA #$0B
	STA IN_GAME_STATE ;next state.
	RTS 
GAME_STATE_B_PIGEON_MAIN:
	JSR ZAP_PROC_TRIGGER
	JSR PROCESS_ZAPPER
	JSR PROCESS_TARGETS_PIGEONS
	JSR PPU_DISP_SHOTS_LEFT
	JSR UPDATE_ACTIVE_TARGET_STATUS
	JSR DISP_TARGETS_HIT
	JSR DISP_SCORE_SPRITES
	JSR DISP_BLINK_WORD_SHOT
	NOP  ;removed feature?
	NOP 
	NOP 
	RTS 
PROCESS_TARGETS_PIGEONS:
	LDA TRGT1_TYPE
	BEQ PROCESS_TARGET_2
	LDY #$00 ;origin $300
	STY OBJ_ZP_ORIGIN_SLOT# ;save where obj info came from.
	JSR COPY_OBJ_$3YY_TO_OBJ_ZP ;move obj to RAM.
	JSR HANDLE_TARGET_STATE_PIGEONS ;handle target.
	JSR MOVE_OBJ_ZP_BACK_TO_ORIGIN ;move to $500.
PROCESS_TARGET_2:
	LDA TRGT2_TYPE
	BEQ PROCESS_OTHER
	LDY #$50 ;origin $350
	INC OBJ_ZP_ORIGIN_SLOT# ;to 1.
	JSR COPY_OBJ_$3YY_TO_OBJ_ZP
	JSR HANDLE_TARGET_STATE_PIGEONS
	JSR MOVE_OBJ_ZP_BACK_TO_ORIGIN ;move to $500.
PROCESS_OTHER:
	LDA #_TARGETS_REMAINING
	BNE TARGETS_REMAINING
	LDX TRGT1_STATE
	LDY TRGT2_STATE
	CPX #$03 ;target state active?
	BEQ IS_MOVING ;state 3 is moving.
	CPY #$03
	BEQ IS_MOVING
	JSR SND_SET_F0_#$80 ;turn off pigeon sound?
IS_MOVING:
	CPX #$00
	BNE RTS_20 ;rts if any state
	CPY #$00
	BNE RTS_20 ;rts if any state.
	JSR DISP_SHOT_TEXT ;display text always.
	LDA #$00
	STA ZAP_SHOT_ENABLED ;disable shot.
	LDA GAME_TARGETS_SHOWN? ;end of round?
	CMP #$0A ;end of targets.
	BEQ ALL_TARGETS_SHOWN?
	LDA #$0A ;game state. pigeons main.
	BNE GAME_STATE_SWITCH
ALL_TARGETS_SHOWN?:
	LDA #$00
	STA END_OF_ROUND_STATE ;reset end round state.
	LDA #$0C
GAME_STATE_SWITCH:
	STA IN_GAME_STATE ;goto state.
	JMP CLEAR_SPRITES ;clear sprites then RTS.
TARGETS_REMAINING:
	LDA COUNTDOWN_TO_ENABLE_TARGETS ;is a timer?
	BEQ RTS_20
	DEC COUNTDOWN_TO_ENABLE_TARGETS
RTS_20:
	RTS 
HANDLE_TARGET_STATE_PIGEONS:
	LDA OBJ_ZP_STATE ;target states.
	JSR GOTO_TABLE_PAST_JSR
	.LOW RTS_3 ;uninit'd state.
	.HIGH RTS_3
	.LOW TARGET_STATE_1_INIT_BASE
	.HIGH TARGET_STATE_1_INIT_BASE
	.LOW TARGET_STATE_2_INIT_SPECIFIC_INFO
	.HIGH TARGET_STATE_2_INIT_SPECIFIC_INFO
	.LOW TARGET_STATE_3_MOVE
	.HIGH TARGET_STATE_3_MOVE
	.LOW TARGET_STATE_4_HIT_EXPLOSION_SETUP
	.HIGH TARGET_STATE_4_HIT_EXPLOSION_SETUP
	.LOW TARGET_STATE_5_EXPLOSION_ANIMATION
	.HIGH TARGET_STATE_5_EXPLOSION_ANIMATION
	.LOW RTS_3
	.HIGH RTS_3
	.LOW RTS_3
	.HIGH RTS_3
	.LOW TARGET_STATE_8_REMOVE_OBJ_0
	.HIGH TARGET_STATE_8_REMOVE_OBJ_0
TARGET_STATE_1_INIT_BASE:
	LDX #$4F
LOOP_INIT_DATA:
	LDA INIT_PIGEON_DATA,X
	STA OBJ_ZP_COPY,X
	DEX 
	BPL LOOP_INIT_DATA
	LDA #$01
	STA PIGEON_FLAG_NEEDS_CLEARED? ;set something to true.
	RTS 
TARGET_STATE_2_INIT_SPECIFIC_INFO:
	LDA COUNTDOWN_TO_ENABLE_TARGETS
	BNE RTS_21 ;not ready to enable.
	LDA #$01
	STA ZAP_SHOT_ENABLED ;enable shots.
	JSR RNG_ADVANCE ;get random number.
	AND #$3F ;get %0011 1111
	TAY 
	INY 
	STY COUNTDOWN_TO_ENABLE_TARGETS ;store countdown to enable.
	JSR RNG_ADVANCE ;get new random number.
	AND #$0F ;range
	CMP UNK_$9C_INDEX
	BNE NO_MATCH_9C ;not equal.
	CLC 
	ADC #$01 ;add 1
	AND #$0F ;range
NO_MATCH_9C:
	STA UNK_$9C_INDEX ;store back index value.
	ASL A ;index * 2
	STA TMP_0C ;store value.
	ASL A ;index * 4
	CLC 
	ADC TMP_0C ;add to original, effectively 6x original index value.
	TAX  ;index to X.
	LDA PIGEON_DATA_PTR/DATA,X ;*X because 6 data bytes. Data as labeled.
	STA OBJ_ZP_EXTRA_PTR/DATA
	LDA PIGEON_DATA_PTR_INDEX,X
	STA OBJ_ZP_PTR_INDEX
	LDA PIGEON_DATA_4A_UNK,X
	STA OBJ_ZP_INDEX_4A_UNK
	LDA PIGEON_ANIM_TIMER_DATA,X
	STA OBJ_ZP_ANIM_TIMER
	LDA PIGEON_DATA_MISC_INDEX?,X
	STA OBJ_ZP_MISC_INDEX?
	LDA PIGEON_DATA_FLYAWAY_COUNTDOWN,X
	STA OBJ_ZP_COPY_FLYAWAY_COUNTDOWN
	INC GAME_TARGETS_SHOWN? ;targets_shown++
	LDA GAME_TARGETS_SHOWN?
	STA OBJ_ZP_TARGET_NUMBER+1 ;store target this is.
	DEC #_TARGETS_REMAINING
	LDA #$FF
	STA OBJ_ZP_$47_PIGEON_UNK
	JSR SND_SET_F2_#$20 ;Set rising sound?
	LDA #$05
	STA OBJ_COPY_PIGEON_SOUND_COUNTDOWN ;Unk why value. Sprite related?
	INC OBJ_ZP_STATE ;next state.
RTS_21:
	RTS  ;leave.
TARGET_STATE_3_MOVE:
	LDA OBJ_COPY_PIGEON_SOUND_COUNTDOWN ;get counter.
	BEQ COUNTER_EQ_0
	DEC OBJ_COPY_PIGEON_SOUND_COUNTDOWN ;if !0, decrease.
	BNE COUNTER_EQ_0 ;if still not 0, don't play sound.
	JSR SND_SET_F0_#$20 ;sets sound unk
COUNTER_EQ_0:
	LDA OBJ_ZP_COPY_FLYAWAY_COUNTDOWN
	BMI NEGATIVE_BIT_SET
	LDA OBJ_ZP_INDEX_UNK ;get value.
	LSR A ;/2
	LSR A ;/4
	CMP #$07 ;is ?? 7
	BCC LESS_THAN_7 ;<
NEGATIVE_BIT_SET:
	LDA #$07 ;max?
LESS_THAN_7:
	CMP OBJ_ZP_$47_PIGEON_UNK
	BEQ IS_EQ ;A = $47
	STA OBJ_ZP_$47_PIGEON_UNK ;not eq, save.
	CLC 
	ADC LEVEL_TIED_VAR? ;adc with wtf this is.
	TAX  ;is now index.
	LDA PIGEON_DATA_DIFFICULTY,X
	STA OBJ_ZP_DUCK_DIFF
IS_EQ:
	JSR GET_DUCK_DIFF_FROM_GROUP ;get difficulty data, aka speed per frame.
DIFFICULTY_LOOP:
	PHA  ;save difficulty.
	JSR PIGEON_OBJ_MOVE
	PLA  ;difficulty.
	SEC 
	SBC #$01 ;-1 diff loop.
	BNE DIFFICULTY_LOOP ;if not matched difficulty, do more.
	LDA OBJ_ZP_COPY+30
	BMI STATE_8 ;remove obj if bit 7 set.
	LDA OBJ_ZP_INDEX_UNK
	CMP #$30
	BCS STATE_8 ;state 8 if >=30
	JSR PIGEON_X/Y_SOMEHOW
	LDA OBJ_ZP_Y_COORD ;get Y coord.
	SEC 
	SBC #$40 ;minus 40...
	STA OBJ_ZP_Y_COORD ;store back.
	LDA OBJ_ZP_INDEX_UNK
	LSR A ;/2
	TAX  ;to index.
	LDA PIGEON_FRAME_DATA,X ;get data.
	STA OBJ_ZP_FRAME ;store to frame.
	STX TMP_0C ;store index to tmp.
	SEC 
	SBC #$18
	STA OBJ_ZP_COPY_PIGEON_FRAME_INDEX?
	LDX LEVEL ;get level.
	LDA #$00
	CPX #$12
	BCC SWITCH_DONE ;if level < 12, A=0
	LDA #$03
	CPX #$23
	BCC SWITCH_DONE ;if level < 23, A=3
	LDA #$06 ;default.
SWITCH_DONE:
	CLC 
	ADC TMP_0C ;add with frame data.
	TAX  ;to index.
	LDA OBJ_DATA_PIGEON_UNK,X
	STA OBJ_ZP_COPY_PIGEON_UNK
	JSR PIGEON_CLEAR_OBJ_SPRITES+MOVE_START? ;clear sprites? something to do with sprites.
	JMP OBJ_TO_SCREEN_ROUTINE ;move new to screen.
STATE_8:
	LDA #$08
	STA OBJ_ZP_STATE
	RTS 
TARGET_STATE_4_HIT_EXPLOSION_SETUP:
	LDX OBJ_ZP_TARGET_NUMBER+1 ;get target index.
	LDA #$01
	STA DUCKS_HIT_ARRAY-1,X ;mark hit.
	STA UPDATE_TARGETS_HIT ;update graphics bottom of screen.
	LDA OBJ_ZP_COPY_PIGEON_FRAME_INDEX? ;get index.
	ASL A
	ASL A ;mul * 4
	TAX  ;make index.
	LDY #$00 ;reset store index.
LOOP_MOVE_DATA:
	LDA PIGEON_HIT_TIMER,X
	STA OBJ_ZP_PARTICLE_TIMER_1,Y ;wrong addr mode smh. store data.
	INX  ;next index for both.
	INY 
	CPY #$04
	BNE LOOP_MOVE_DATA
	LDA #$00
	STA OBJ_ZP_ADD'L_STATE ;clear state.
	LDX #$00 ;reset index of JSR's below.
LOOP_COORD_STUFF:
	LDA OBJ_ZP_Y_COORD ;get y coord.
	JSR PARTICLE_MOD_Y_COORD
	LDA OBJ_ZP_X_COORD ;x coord.
	JSR PARTICLE_MOD_X_COORD
	INX 
	INX  ;X+=2
	CPX #$20 ;final.
	BNE LOOP_COORD_STUFF ;loop 16 times.
	JSR ADD_TO_SCORE_PIGEON ;add to score.
	LDX OBJ_SPR_INDEX_START
	JSR OBJ_SPRITE_OFF_SCREEN ;take off screen.
	INC OBJ_ZP_STATE ;next state.
	RTS 
TARGET_STATE_5_EXPLOSION_ANIMATION:
	JSR PIGEON_CLEAR_OBJ_SPRITES+MOVE_START? ;clear the sprites, reassign location.
	JSR PROCESS_PARTICLES_ ;process particles.
	LDA OBJ_SPR_INDEX_START
	STA SPRITE_INDEX_VAL ;reset index writing.
	LDY OBJ_ZP_PARTICLE_TIMER_1 ;get timer?
	INY  ;next
	BEQ ANIM_FINISHED ;if FF originally, end.
	LDX #$00 ;index into obj+48
	LDY #$0C ;6 loops. this - above = 0xC/2 loops.
	LDA OBJ_ZP_DISABLE_PARTICLES_GROUP_1 ;removes obj when set.
	JSR PIGEON_UPDATE_PARTICLES ;update sprites.
ANIM_FINISHED:
	LDY OBJ_ZP_PARTICLE_TIMER_2 ;get timer.
	INY  ;next value.
	BEQ ANIM_FINISHED_2? ;if not finished.
	LDX #$10 ;index into obj+48. why not 0C?
	LDY #$20 ;8 loops. this - above = 0x10/2 loops.
	LDA OBJ_ZP_DISABLE_PARTICLES_GROUP_2
	JSR PIGEON_UPDATE_PARTICLES ;sprites again
ANIM_FINISHED_2?:
	LDA OBJ_ZP_ADD'L_STATE ;additional state value?
	CMP #$02 ;play sound on state.
	BNE CLEAR_PARTICLE_DISABLE ;go around shot sound.
	JSR SND_SET_F0_#$04 ;set poof sound when shot?
CLEAR_PARTICLE_DISABLE:
	LDA #$00 ;clear
	STA OBJ_ZP_DISABLE_PARTICLES_GROUP_1 ;don't hide.
	STA OBJ_ZP_DISABLE_PARTICLES_GROUP_2
	RTS  ;leave
TARGET_STATE_8_REMOVE_OBJ_0:
	LDA #$00 ;no hit, disable.
	STA OBJ_ZP_STATE
	LDX OBJ_SPR_INDEX_START ;get where spr index starts.
	JMP OBJ_SPRITE_OFF_SCREEN ;move off screen. abuse RTS.
PIGEON_UPDATE_PARTICLES:
	STA TMP_0D ;if set, remove sprites.
	STY TMP_0C ;save spr index.
	LDY SPRITE_INDEX_VAL ;get index for sprites.
LOOP_DISP:
	LDA TMP_0D ;passed flag.
	BNE DON'T_CHANGE_SPRITES ;remove all if set.
	LDA OBJ_ZP_PARTICLES_Y_BASE,X ;get obj data...
	BNE UPDATE_SPRITES ;not 0, goto.
DON'T_CHANGE_SPRITES:
	INX  ;next x index. obj_36 removes?
	JMP NEXT_OBJ_DATA_CHECK_LOOP
UPDATE_SPRITES:
	STA $0200,Y ;obj to Y coord.
	INY  ;next sprite index.
	LDA PIGEON_TILE+ATTR_INDEX,X ;get sprite.
	STA $0200,Y ;store
	INY 
	INX  ;next obj data
	LDA PIGEON_TILE+ATTR_INDEX,X ;get attr data
	STA $0200,Y ;store attr
	INY 
	LDA OBJ_ZP_PARTICLES_Y_BASE,X ;get obj data
	STA $0200,Y ;store to X
	INY 
NEXT_OBJ_DATA_CHECK_LOOP:
	INX  ;next index.
	CPX TMP_0C ;compare index now to final.
	BNE LOOP_DISP ;display more
	STY SPRITE_INDEX_VAL ;save y index, not sure why.
	TYA  ;Y->
	TAX  ;X
	JMP OBJ_SPRITE_OFF_SCREEN ;remove extras.
PIGEON_CLEAR_OBJ_SPRITES+MOVE_START?:
	LDA PIGEON_FLAG_NEEDS_CLEARED?
	BEQ RTS_22 ;RTS if 0
	LDA #$00
	STA PIGEON_FLAG_NEEDS_CLEARED? ;clear
	LDX OBJ_SPR_INDEX_START ;get obj index start
	JSR OBJ_SPRITE_OFF_SCREEN ;clear sprite.
	LDA #$50
	STA OBJ_SPR_INDEX_START ;modify start index.
	LDA #$9F
	STA OBJ_SPR_INDEX_FINAL ;modify final index. not sure why either trgt?
RTS_22:
	RTS 
GET_DUCK_DIFF_FROM_GROUP:
	LDX OBJ_ZP_DUCK_DIFF
	LDA OBJ_DUCK_DIFF_VALS_GRP,X ;from difficulty.
	PHA  ;save value.
	INX  ;next index.
	TXA 
	AND #$03 ;get %0000 00**
	BNE GROUP_NO_SPILL
	DEX  ;loop group difficult values.
	DEX 
	DEX 
	DEX 
GROUP_NO_SPILL:
	STX OBJ_ZP_DUCK_DIFF ;store next arr value.
	PLA  ;pull value saved from array.
	RTS  ;return it.
PIGEON_X/Y_SOMEHOW:
	LDA OBJ_ZP_TIMER_FALLING? ;terribly complicated way to handle this shit.
	SEC 
	SBC #$00 ;set carry, sub 0...no purpose?
	TAY  ;A>Y
	LDA OBJ_ZP_COPY+30 ;get data
	SBC #$10 ;subtract #$10
	TAX  ;OBJ+30-10->X
	LDA #$3B ;unk why value
	JSR UNK_ROUTINE
	STY TMP_INDIR_JMP_L ;Y to
	STX TMP_INDIR_JMP_H ;X to
	LDA OBJ_ZP_TIMER_FALLING? ;get value again
	SEC 
	SBC #$00 ;yet again, no purpose?
	TAY  ;put to Y again.
	LDA OBJ_ZP_COPY+30 ;get value again.
	SBC #$10 ;subtract #$10 again
	TAX  ;put to X
	LDA #$E7 ;different seed/value.
	JSR UNK_ROUTINE ;do routing again.
	STY TMP_12 ;store to temps.
	STX TMP_13
	LDA OBJ_ZP_DATA_DIRECTION ;get direction.
	SEC 
	SBC #$00 ;idfk why they keep doing this shit.
	TAY  ;direction to Y
	LDA OBJ_ZP_INDEX_UNK ;get whatever index.
	SBC #$18 ;subtract with #$18. zero iirc?
	TAX  ;put to X.
	LDA #$7F ;see different again,
	JSR UNK_ROUTINE ;do routing.
	CLC  ;clear for add.
	TYA  ;Y to A
	ADC #$4F ;add with this.
	TAY  ;back to Y.
	TXA  ;X to A.
	ADC #$23 ;add this.
	TAX  ;back to X.
	TYA  ;Y to A
	SEC 
	SBC TMP_INDIR_JMP_L ;subtract with initial values.
	STA UNK_$93 ;store result.
	TXA  ;X to A.
	SBC TMP_INDIR_JMP_H ;subtract with initial values.
	CMP #$50 ;compare to set carry?
	ROR A ;bring carry in?
	STA UNK_$94 ;store here.
	ROR UNK_$93 ;store here.
	LDY $91 ;load these two.
	LDX $92
	LDA #$6C ;seed
	JSR UNK_ROUTINE ;do routine.
	CLC 
	TYA  ;Y to A.
	ADC TMP_12 ;add with this.
	TAY  ;to Y
	TXA  ;X to A
	ADC TMP_13 ;add with this.
	TAX  ;back to X.
	JSR UNK_ROUTINE_2 ;do this routine now.
	SBC #$00 ;this makes sense, can be clear or not.
	EOR #$7F ;invert bottom bits.
	STA OBJ_ZP_Y_COORD ;store to obj Y coord.
	LDA OBJ_ZP_PTR_INDEX ;get index.
	SEC 
	SBC #$00 ;subtract nothing, yet again.
	TAY  ;save to Y
	LDA OBJ_ZP_EXTRA_PTR/DATA ;get this data.
	SBC #$09 ;subtract #$09
	TAX  ;put to X.
	JSR UNK_ROUTINE_2 ;do this again.
	EOR #$80 ;invert bit.
	STA OBJ_ZP_X_COORD ;store at X coord.
	RTS 
PIGEON_OBJ_MOVE:
	LDA #$0F
LOOP_DO_MORE:
	SEC 
	SBC #$05 ;sub 5
	TAX  ;to X
	LDY #$00 ;index reset.
	LDA OBJ_ZP_PTR_L_UNK,X ;get ptr data.
	BPL IS_POSITIVE_1 ;is not negative.
	DEY  ;Y--
IS_POSITIVE_1:
	CLC 
	ADC OBJ_ZP_PTR_H_UNK,X ;Add with +1+X
	STA OBJ_ZP_PTR_H_UNK,X ;store back.
	STA TMP_INDIR_JMP_H ;store for ???
	TYA  ;A from Y
	LDY #$00 ;reset Y
	ADC OBJ_ZP_ANIM_TIMER,X ;add with +2+X
	STA OBJ_ZP_ANIM_TIMER,X ;store back.
	BPL IS_POSITIVE_2
	DEY  ;Y--
IS_POSITIVE_2:
	ASL TMP_INDIR_JMP_H ;double.
	ADC OBJ_ZP_PTR_INDEX,X ;add with +3+X
	STA OBJ_ZP_PTR_INDEX,X ;store back.
	TYA  ;A from Y
	ADC OBJ_ZP_EXTRA_PTR/DATA,X ;add with +4+X
	STA OBJ_ZP_EXTRA_PTR/DATA,X ;store back.
	TXA  ;get loop.
	BNE LOOP_DO_MORE
	RTS  ;leave.
UNK_ROUTINE:
	STY TMP_$10 ;add value 95
	STX TMP_$11 ;add value 96
	STA UNK_$95 ;bits to add?
	LDA #$00
	STA UNK_$96 ;clear these.
	STA UNK_$97
	LDX #$08 ;loop count?
LOOP_UNK:
	ROR UNK_$95
	BCC 95_BIT_CLEAR ;bit was clear.
	CLC  ;clear for add.
	LDA UNK_$96
	ADC TMP_$10 ;add with this.
	STA UNK_$96 ;store back.
	LDA UNK_$97 ;load this.
	ADC TMP_$11 ;add
	STA UNK_$97 ;store.
95_BIT_CLEAR:
	ASL A ;shift bit out?
	ROR UNK_$97 ;rotate right, bringing in bit.
	ROR UNK_$96 ;ror, bringing bit again.
	DEX  ;next loop.
	BNE LOOP_UNK ;see if loop done.
	LDY UNK_$96 ;return X and Y final values.
	LDX UNK_$97
	RTS 
UNK_ROUTINE_2:
	STY UNK_$96 ;store x
	STX UNK_$97 ;store y
	LDA #$00
	STA UNK_$95 ;clear
	LDX #$07 ;8 loops.
	CLC 
	LDA UNK_$96 ;why not TYA?
	ADC UNK_$93 ;add with whatever this is.
	TAY  ;put to Y
	LDA UNK_$97 ;get val
	ADC UNK_$94 ;add with this.
LOOP_UNK2:
	BCC NO_OVERFLOW
	STY UNK_$96 ;if overflow, store this.
	STA UNK_$97 ;store this.
NO_OVERFLOW:
	ROL UNK_$95 ;double, bit.
	ROL UNK_$96 ;double, bit.
	ROL UNK_$97 ;double, bit.
	SEC  ;set carry for sub
	LDA UNK_$96 ;get val
	SBC UNK_$93 ;subtract with this.
	TAY  ;put to Y
	LDA UNK_$97 ;get value
	SBC UNK_$94 ;subtract with this.
	DEX  ;loop count.
	BPL LOOP_UNK2 ;if not underflow, 8 loops, repeat.
	BCS LOAD_RTS ;if no underflow, load?
	DEX  ;FE now instead of just loading?
LOAD_RTS:
	LDA UNK_$95 ;load this...
	RTS  ;return.
PROCESS_PARTICLES_:
	INC OBJ_ZP_ADD'L_STATE ;next state always...
	LDY OBJ_ZP_PARTICLE_TIMER_1 ;get timer.
	CPY #$FF ;compare to end. BAD CODE. Could LDY/INC/BEQ/STY
	BEQ PIGEON_1_TIMER_FINISHED_FF
	INC OBJ_ZP_PARTICLE_TIMER_1 ;inc if not FF.
	LDA PIGEON_DATA_UNK,Y ;get data.
	STA TMP_0C ;pigeon data from table.
	STA TMP_0F ;again
	CMP #$AA
	BEQ END_PARTICLE_1 ;ends particle.
	CMP #$BB
	BEQ DISABLE_GROUP_1 ;disable particle display.
	LDA OBJ_ZP_ADD'L_STATE ;get state? basically timer?
	CMP OBJ_ZP_COPY+33_VAL_EN_PARTICLE_2
	BEQ SETUP_PARTICLE_2_TIMER_OR_SOMETHING ;if equal, enable particle 2 timer.
RE-ENTER_FROM_SETUP_PARTICLE_2_TIMER:
	LDX #$00 ;reset counter/index?
LOOP_PARTICLES_1:
	STX TMP_0D ;clear temp.
	LDA PIGEON_DATA_UNK_2,X ;get data.
	STA TMP_$0E ;store to tmp. used in table JSR'd to.
	TXA  ;counter to A.
	ASL A ;double.
	TAX  ;put back.
	LDA OBJ_ZP_PARTICLES_Y_BASE,X ;load data.
	BEQ DATA_IS_0 ;if 0, goto.
	LDA OBJ_ZP_COPY_PARTICLES_X_BASE,X
	BEQ DATA_IS_0 ;if 0, goto.
	JSR PROCESS_PIGEON_SUBTABLE
DATA_IS_0:
	LDX TMP_0D ;get data.
	INX  ;next particle index.
	CPX #$06 ;up to 6 particles here.
	BNE LOOP_PARTICLES_1 ;not done.
PIGEON_1_TIMER_FINISHED_FF:
	LDY OBJ_ZP_PARTICLE_TIMER_2 ;get data
	CPY #$FF
	BEQ END_PARTICLE_FINAL
	INC OBJ_ZP_PARTICLE_TIMER_2 ;inc if not.
	LDA PIGEON_DATA_UNK_0,Y ;get data
	STA TMP_0C ;store.
	CMP #$AA
	BEQ END_PARTICLE_2_TIMER
	CMP #$BB
	BEQ DISABLE_GROUP_2
	LDA PIGEON_DATA_UNK_1,Y
	STA TMP_0F ;store
RE-ENTER_???_2:
	LDX #$00 ;reset index.
LOOP_PARTICLES_2:
	STX TMP_0D ;save index/counter
	LDA PIGEON_DATA_UNK_3,X ;get data
	STA TMP_$0E ;store to tmp. used in jsr to table.
	TXA 
	ASL A ;counter to a, double/index value.
	CLC 
	ADC #$10 ;add 10, too. not sure why.
	TAX  ;put back to index.
	LDA OBJ_ZP_PARTICLES_Y_BASE,X
	BEQ END_LOOP?
	LDA OBJ_ZP_COPY_PARTICLES_X_BASE,X
	BEQ END_LOOP?
	JSR PROCESS_PIGEON_SUBTABLE
END_LOOP?:
	LDX TMP_0D ;load X.
	INX 
	CPX #$08 ;loop 8 times.
	BNE LOOP_PARTICLES_2
	RTS  ;leave when done.
END_PARTICLE_1:
	LDA #$FF
	STA OBJ_ZP_PARTICLE_TIMER_1 ;set
	JMP PIGEON_1_TIMER_FINISHED_FF
DISABLE_GROUP_1:
	LDA #$01
	STA OBJ_ZP_DISABLE_PARTICLES_GROUP_1 ;disable particles.
	LDA #$00
	STA TMP_0C
	STA TMP_0F ;clear. TODO: Why
	JMP RE-ENTER_FROM_SETUP_PARTICLE_2_TIMER
SETUP_PARTICLE_2_TIMER_OR_SOMETHING:
	LDA OBJ_ZP_COPY_SETS_UP_PARTICLE_TIMER_2
	STA OBJ_ZP_PARTICLE_TIMER_2 ;set up 2nd timer with var.
	JMP RE-ENTER_FROM_SETUP_PARTICLE_2_TIMER
END_PARTICLE_2_TIMER:
	LDA #$FF
	STA OBJ_ZP_PARTICLE_TIMER_2 ;end particle animation.
	JMP END_PARTICLE_FINAL
DISABLE_GROUP_2:
	LDA #$01
	STA OBJ_ZP_DISABLE_PARTICLES_GROUP_2 ;set to 1
	LDA #$00
	STA TMP_0C
	STA TMP_0F ;clear temps.
	JMP RE-ENTER_???_2
END_PARTICLE_FINAL:
	LDA OBJ_ZP_PARTICLE_TIMER_1 ;get value.
	CMP #$FF
	BNE RTS_23 ;if not FF, leave.
	LDA OBJ_ZP_PARTICLE_TIMER_2
	CMP #$FF
	BNE RTS_23 ;if not FF, leave.
	JSR POINTS_DISPLAY_ADD ;display points added after particles done.
	LDA #$08 ;remove.
	STA OBJ_ZP_STATE ;set state to remove debris.
RTS_23:
	RTS  ;leave.
PROCESS_PIGEON_SUBTABLE:
	LDA OBJ_ZP_ADD'L_STATE ;last table. pigeons something.
	AND #$03 ;bottom 3 bits.
	STA SPRITE_UPDATE_BASE ;index of working on?
	LDA TMP_$0E
	JSR GOTO_TABLE_PAST_JSR ;moves the particles.
	.LOW RTS_3
	.HIGH RTS_3
	.LOW PARTICLE_MOVE_+X,-Y_F>X,C>Y
	.HIGH PARTICLE_MOVE_+X,-Y_F>X,C>Y
	.LOW PARTICLE_MOVE_+X,-Y,C>XY_DEPENDENT
	.HIGH PARTICLE_MOVE_+X,-Y,C>XY_DEPENDENT
	.LOW PARTICLE_MOVE_+X,-Y_F>Y,C>X
	.HIGH PARTICLE_MOVE_+X,-Y_F>Y,C>X
	.LOW PARTICLE_MOVE_+X_C>X
	.HIGH PARTICLE_MOVE_+X_C>X
	.LOW PARTICLE_MOVE_+X,+Y_C>X,F>Y
	.HIGH PARTICLE_MOVE_+X,+Y_C>X,F>Y
	.LOW PARTICLE_MOVE_+Y,+X_?>Y,C>X_DEPENDENT
	.HIGH PARTICLE_MOVE_+Y,+X_?>Y,C>X_DEPENDENT
	.LOW PARTICLE_MOVE_+X,+Y_F>X,C>Y
	.HIGH PARTICLE_MOVE_+X,+Y_F>X,C>Y
	.LOW RTS_3
	.HIGH RTS_3
	.LOW PARTICLE_MOVE_-X,+Y_F>X,C>Y
	.HIGH PARTICLE_MOVE_-X,+Y_F>X,C>Y
	.LOW PARTICLE_MOVE_-X,+Y_?>Y,C>X
	.HIGH PARTICLE_MOVE_-X,+Y_?>Y,C>X
	.LOW PARTICLE_MOVE_-X,+Y_C>X,F>Y
	.HIGH PARTICLE_MOVE_-X,+Y_C>X,F>Y
	.LOW PARTICLE_MOVE_-X_C>X
	.HIGH PARTICLE_MOVE_-X_C>X
	.LOW PARTICLE_MOVE_-X,-Y_C>X,F>Y
	.HIGH PARTICLE_MOVE_-X,-Y_C>X,F>Y
	.LOW PARTICLE_MOVE_-X,-Y_?>Y,C>X_DEPENDENT
	.HIGH PARTICLE_MOVE_-X,-Y_?>Y,C>X_DEPENDENT
	.LOW PARTICLE_MOVE_-X,-Y_F>X,C>Y
	.HIGH PARTICLE_MOVE_-X,-Y_F>X,C>Y
PARTICLE_MOVE_+X,-Y_F>X,C>Y:
	LDA TMP_0F
	JSR PARTICLE_MOD_X_COORD
PARTICLE_MOVE_-Y_C>Y:
	LDA TMP_0C
	JSR TWO_COMPLIMENT_A_REGISTER ;invert
	JMP PARTICLE_MOD_Y_COORD ;abuse RTS.
PARTICLE_MOVE_+X,-Y,C>XY_DEPENDENT:
	LDA SPRITE_UPDATE_BASE
	BEQ PARTICLE_MOVE_-Y_C>Y ;if eq, only -Y.
	JSR PARTICLE_MOVE_-Y_C>Y ;otherwise, JSR.
	JMP PARTICLE_MOVE_+X_C>X
PARTICLE_MOVE_+X,-Y_F>Y,C>X:
	LDA TMP_0F
	JSR TWO_COMPLIMENT_A_REGISTER
	JSR PARTICLE_MOD_Y_COORD
PARTICLE_MOVE_+X_C>X:
	LDA TMP_0C
	JMP PARTICLE_MOD_X_COORD
PARTICLE_MOVE_+X,+Y_C>X,F>Y:
	JSR PARTICLE_MOVE_+X_C>X
PARTICLE_MOVE_+Y_F>Y:
	LDA TMP_0F
	JMP PARTICLE_MOD_Y_COORD
PARTICLE_MOVE_+Y,+X_?>Y,C>X_DEPENDENT:
	LDA SPRITE_UPDATE_BASE
	BEQ PARTICLE_MOVE_+Y_F>Y ;if base 0, do only.
	JSR PARTICLE_MOVE_+Y,C>Y
	JMP PARTICLE_MOVE_+X_C>X
PARTICLE_MOVE_+X,+Y_F>X,C>Y:
	LDA TMP_0F
	JSR PARTICLE_MOD_X_COORD
PARTICLE_MOVE_+Y,C>Y:
	LDA TMP_0C
	JMP PARTICLE_MOD_Y_COORD
PARTICLE_MOVE_-X,+Y_F>X,C>Y:
	LDA TMP_0F
	JSR TWO_COMPLIMENT_A_REGISTER
	JSR PARTICLE_MOD_X_COORD
	JMP PARTICLE_MOVE_+Y,C>Y
PARTICLE_MOVE_-X,+Y_?>Y,C>X:
	LDA SPRITE_UPDATE_BASE
	BEQ PARTICLE_MOVE_+Y_F>Y
	LDA TMP_0C
	JSR PARTICLE_MOD_Y_COORD
PARTICLE_MOVE_-X_C>X:
	LDA TMP_0C
	JSR TWO_COMPLIMENT_A_REGISTER
	JMP PARTICLE_MOD_X_COORD
PARTICLE_MOVE_-X,+Y_C>X,F>Y:
	LDA TMP_0F
	JSR PARTICLE_MOD_Y_COORD
	JMP PARTICLE_MOVE_-X_C>X
PARTICLE_MOVE_-X,-Y_C>X,F>Y:
	JSR PARTICLE_MOVE_-X_C>X
PARTICLE_MOVE_-Y_F>Y:
	LDA TMP_0F
	JSR TWO_COMPLIMENT_A_REGISTER
	JMP PARTICLE_MOD_Y_COORD
PARTICLE_MOVE_-X,-Y_?>Y,C>X_DEPENDENT:
	LDA SPRITE_UPDATE_BASE
	BEQ PARTICLE_MOVE_-Y_F>Y
	JSR PARTICLE_MOVE_-X_C>X
	JMP PARTICLE_MOVE_-Y_C>Y
PARTICLE_MOVE_-X,-Y_F>X,C>Y:
	LDA TMP_0F
	JSR TWO_COMPLIMENT_A_REGISTER
	JSR PARTICLE_MOD_X_COORD
	JMP PARTICLE_MOVE_-Y_C>Y
PARTICLE_MOD_Y_COORD:
	CLC  ;not sure for existence of this subroutine.
	ADC OBJ_ZP_PARTICLES_Y_BASE,X ;add with this+X
	CMP #$07
	BCC CLEAR_A ;<7, store 0.
	CMP #$C7
	BCC STORE_A ;<C7, store val.
CLEAR_A:
	LDA #$00 ;reset to 0.
STORE_A:
	STA OBJ_ZP_PARTICLES_Y_BASE,X ;store.
	RTS 
PARTICLE_MOD_X_COORD:
	CLC  ;not sure for existence of this subroutine.
	ADC OBJ_ZP_COPY_PARTICLES_X_BASE,X ;add with.
	CMP #$07
	BCC CLEAR_A_0 ;<7, store 0.
	CMP #$F8
	BCC STORE_A_0 ;<F8, store val.
CLEAR_A_0:
	LDA #$00 ;reset to 0
STORE_A_0:
	STA OBJ_ZP_COPY_PARTICLES_X_BASE,X ;store.
	RTS 
ANIMATION_FILES:
	.LOW ANIM_FRAME_FILE_PTR_00 ;Animation file ptrs. Ptrs to ptr arrays. DAC5
	.HIGH ANIM_FRAME_FILE_PTR_00
	.LOW ANIM_FRAME_FILE_PTR_01
	.HIGH ANIM_FRAME_FILE_PTR_01
	.LOW ANIM_FRAME_FILE_PTR_02
	.HIGH ANIM_FRAME_FILE_PTR_02
	.LOW ANIM_FRAME_FILE_PTR_03
	.HIGH ANIM_FRAME_FILE_PTR_03
	.LOW ANIM_FRAME_FILE_PTR_04
	.HIGH ANIM_FRAME_FILE_PTR_04
	.LOW ANIM_FRAME_FILE_PTR_05
	.HIGH ANIM_FRAME_FILE_PTR_05
	.LOW ANIM_FRAME_FILE_PTR_06
	.HIGH ANIM_FRAME_FILE_PTR_06
	.LOW ANIM_FRAME_FILE_PTR_07
	.HIGH ANIM_FRAME_FILE_PTR_07
	.LOW ANIM_FRAME_FILE_PTR_08
	.HIGH ANIM_FRAME_FILE_PTR_08
	.LOW ANIM_FRAME_FILE_PTR_09
	.HIGH ANIM_FRAME_FILE_PTR_09
	.LOW ANIM_FRAME_FILE_PTR_0A
	.HIGH ANIM_FRAME_FILE_PTR_0A
	.LOW ANIM_FRAME_FILE_PTR_0B
	.HIGH ANIM_FRAME_FILE_PTR_0B
	.LOW ANIM_FRAME_FILE_PTR_0C ;Dog 1st file.
	.HIGH ANIM_FRAME_FILE_PTR_0C
	.LOW ANIM_FRAME_FILE_PTR_0D
	.HIGH ANIM_FRAME_FILE_PTR_0D
	.LOW ANIM_FRAME_FILE_PTR_0E
	.HIGH ANIM_FRAME_FILE_PTR_0E
	.LOW ANIM_FRAME_FILE_PTR_0F
	.HIGH ANIM_FRAME_FILE_PTR_0F
	.LOW ANIM_FRAME_FILE_PTR_10
	.HIGH ANIM_FRAME_FILE_PTR_10
	.LOW ANIM_FRAME_FILE_PTR_11
	.HIGH ANIM_FRAME_FILE_PTR_11
	.LOW ANIM_FRAME_FILE_PTR_12
	.HIGH ANIM_FRAME_FILE_PTR_12
	.LOW ANIM_FRAME_FILE_PTR_13_0
	.HIGH ANIM_FRAME_FILE_PTR_13_0
	.LOW ANIM_FRAME_FILE_PTR_14_0
	.HIGH ANIM_FRAME_FILE_PTR_14_0
	.LOW ANIM_FRAME_FILE_PTR_15
	.HIGH ANIM_FRAME_FILE_PTR_15
	.LOW ANIM_FRAME_FILE_PTR_16
	.HIGH ANIM_FRAME_FILE_PTR_16
	.LOW ANIM_FRAME_FILE_PTR_17
	.HIGH ANIM_FRAME_FILE_PTR_17
	.LOW ANIM_FRAME_FILE_PTR_18
	.HIGH ANIM_FRAME_FILE_PTR_18
	.LOW ANIM_FRAME_FILE_PTR_19
	.HIGH ANIM_FRAME_FILE_PTR_19
	.LOW ANIM_FRAME_FILE_PTR_1A
	.HIGH ANIM_FRAME_FILE_PTR_1A
	.LOW ANIM_FRAME_FILE_PTR_1B
	.HIGH ANIM_FRAME_FILE_PTR_1B
	.LOW ANIM_FRAME_FILE_PTR_1C
	.HIGH ANIM_FRAME_FILE_PTR_1C
	.LOW ANIM_FRAME_FILE_PTR_1D
	.HIGH ANIM_FRAME_FILE_PTR_1D
	.LOW ANIM_FRAME_FILE_PTR_1E
	.HIGH ANIM_FRAME_FILE_PTR_1E
	.LOW ANIM_FRAME_FILE_PTR_1F
	.HIGH ANIM_FRAME_FILE_PTR_1F
	.LOW ANIM_FRAME_FILE_PTR_20
	.HIGH ANIM_FRAME_FILE_PTR_20
	.LOW ANIM_FRAME_FILE_PTR_21
	.HIGH ANIM_FRAME_FILE_PTR_21
	.LOW ANIM_FRAME_FILE_PTR_22
	.HIGH ANIM_FRAME_FILE_PTR_22
	.LOW ANIM_FRAME_FILE_PTR_23
	.HIGH ANIM_FRAME_FILE_PTR_23
	.LOW ANIM_FRAME_FILE_PTR_24
	.HIGH ANIM_FRAME_FILE_PTR_24
ANIM_FRAME_FILE_PTR_00:
	.HIGH FRAME_0_DATA_00
	.LOW FRAME_0_DATA_00
	.HIGH FRAME_13_DATA_01
	.LOW FRAME_13_DATA_01
	.db #$00 ;Terminator for files.
ANIM_FRAME_FILE_PTR_01:
	.HIGH FRAME_1_DATA_00
	.LOW FRAME_1_DATA_00
	.HIGH FRAME_13_DATA_01
	.LOW FRAME_13_DATA_01
	.HIGH FRAME_2_DATA_02
	.LOW FRAME_2_DATA_02
	.HIGH FRAME_1_DATA_03
	.LOW FRAME_1_DATA_03
	.db #$00
ANIM_FRAME_FILE_PTR_02:
	.HIGH FRAME_2_DATA_00
	.LOW FRAME_2_DATA_00
	.HIGH FRAME_13_DATA_01
	.LOW FRAME_13_DATA_01
	.HIGH FRAME_2_DATA_02
	.LOW FRAME_2_DATA_02
	.HIGH FRAME_2_DATA_03
	.LOW FRAME_2_DATA_03
	.db #$00
ANIM_FRAME_FILE_PTR_03:
	.HIGH FRAME_3_DATA_00
	.LOW FRAME_3_DATA_00
	.HIGH FRAME_14_DATA_05
	.LOW FRAME_14_DATA_05
	.HIGH FRAME_3_DATA_02
	.LOW FRAME_3_DATA_02
	.HIGH FRAME_3_DATA_03
	.LOW FRAME_3_DATA_03
	.db #$00
ANIM_FRAME_FILE_PTR_04:
	.HIGH FRAME_4_DATA_00
	.LOW FRAME_4_DATA_00
	.HIGH FRAME_14_DATA_05
	.LOW FRAME_14_DATA_05
	.HIGH FRAME_4_DATA_02
	.LOW FRAME_4_DATA_02
	.HIGH FRAME_4_DATA_03
	.LOW FRAME_4_DATA_03
	.db #$00
ANIM_FRAME_FILE_PTR_05:
	.HIGH FRAME_5_DATA_00
	.LOW FRAME_5_DATA_00
	.HIGH FRAME_14_DATA_05
	.LOW FRAME_14_DATA_05
	.HIGH FRAME_5_DATA_02
	.LOW FRAME_5_DATA_02
	.db #$04 ;flag?
	.db #$F0 ;or bad?
	.db #$00
ANIM_FRAME_FILE_PTR_06:
	.HIGH FRAME_6_DATA_00
	.LOW FRAME_6_DATA_00
	.HIGH FRAME_13_DATA_01
	.LOW FRAME_13_DATA_01
	.HIGH FRAME_8_DATA_06
	.LOW FRAME_8_DATA_06
	.HIGH FRAME_6_DATA_03
	.LOW FRAME_6_DATA_03
	.db #$00
ANIM_FRAME_FILE_PTR_07:
	.HIGH FRAME_7_DATA_00
	.LOW FRAME_7_DATA_00
	.HIGH FRAME_8_DATA_01
	.LOW FRAME_8_DATA_01
	.HIGH FRAME_8_DATA_02
	.LOW FRAME_8_DATA_02
	.HIGH FRAME_7_DATA_03
	.LOW FRAME_7_DATA_03
	.HIGH FRAME_8_DATA_04
	.LOW FRAME_8_DATA_04
	.HIGH FRAME_7_DATA_05
	.LOW FRAME_7_DATA_05
	.HIGH FRAME_7_DATA_06
	.LOW FRAME_7_DATA_06
	.HIGH FRAME_7_DATA_07
	.LOW FRAME_7_DATA_07
	.db #$00
ANIM_FRAME_FILE_PTR_08:
	.HIGH FRAME_8_DATA_00
	.LOW FRAME_8_DATA_00
	.HIGH FRAME_8_DATA_01
	.LOW FRAME_8_DATA_01
	.HIGH FRAME_8_DATA_02
	.LOW FRAME_8_DATA_02
	.HIGH FRAME_17_DATA_09
	.LOW FRAME_17_DATA_09
	.HIGH FRAME_8_DATA_04
	.LOW FRAME_8_DATA_04
	.HIGH FRAME_8_DATA_05
	.LOW FRAME_8_DATA_05
	.HIGH FRAME_8_DATA_06
	.LOW FRAME_8_DATA_06
	.HIGH FRAME_8_DATA_07
	.LOW FRAME_8_DATA_07
	.db #$00
ANIM_FRAME_FILE_PTR_0A:
	.HIGH FRAME_A_DATA_00
	.LOW FRAME_A_DATA_00
	.HIGH FRAME_A_DATA_01
	.LOW FRAME_A_DATA_01
	.HIGH FRAME_A_DATA_02
	.LOW FRAME_A_DATA_02
	.HIGH FRAME_A_DATA_03
	.LOW FRAME_A_DATA_03
	.HIGH FRAME_A_DATA_04
	.LOW FRAME_A_DATA_04
	.db #$08
	.db #$04
	.db #$00
ANIM_FRAME_FILE_PTR_0B:
	.HIGH FRAME_B_DATA_00
	.LOW FRAME_B_DATA_00
	.HIGH FRAME_B_DATA_01
	.LOW FRAME_B_DATA_01
	.HIGH FRAME_B_DATA_02
	.LOW FRAME_B_DATA_02
	.HIGH FRAME_B_DATA_03
	.LOW FRAME_B_DATA_03
	.HIGH FRAME_B_DATA_04
	.LOW FRAME_B_DATA_04
	.db #$08
	.db #$F4
	.db #$00
ANIM_FRAME_FILE_PTR_09:
	.HIGH FRAME_9_DATA_00
	.LOW FRAME_9_DATA_00
	.HIGH FRAME_13_DATA_01
	.LOW FRAME_13_DATA_01
	.HIGH FRAME_9_DATA_02
	.LOW FRAME_9_DATA_02
	.db #$08
	.db #$FA
	.db #$00
ANIM_FRAME_FILE_PTR_0C:
	.HIGH FRAME_F_DATA_00 ;Dog first file.
	.LOW FRAME_F_DATA_00
	.HIGH FRAME_10_DATA_01 ;this might be wrong?
	.LOW FRAME_10_DATA_01
	.HIGH FRAME_10_DATA_02
	.LOW FRAME_10_DATA_02
	.HIGH FRAME_11_DATA_05
	.LOW FRAME_11_DATA_05
	.HIGH FRAME_10_DATA_04
	.LOW FRAME_10_DATA_04
	.HIGH FRAME_10_DATA_05
	.LOW FRAME_10_DATA_05
	.db #$00
ANIM_FRAME_FILE_PTR_0D:
	.HIGH FRAME_F_DATA_00
	.LOW FRAME_F_DATA_00
	.HIGH FRAME_10_DATA_01
	.LOW FRAME_10_DATA_01
	.HIGH FRAME_0D_DATA_02
	.LOW FRAME_0D_DATA_02
	.HIGH FRAME_11_DATA_05
	.LOW FRAME_11_DATA_05
	.HIGH FRAME_F_DATA_04
	.LOW FRAME_F_DATA_04
	.HIGH FRAME_11_DATA_07
	.LOW FRAME_11_DATA_07
	.db #$00
ANIM_FRAME_FILE_PTR_0E:
	.HIGH FRAME_F_DATA_00
	.LOW FRAME_F_DATA_00
	.HIGH FRAME_10_DATA_01
	.LOW FRAME_10_DATA_01
	.HIGH FRAME_E_DATA_02
	.LOW FRAME_E_DATA_02
	.HIGH FRAME_11_DATA_05
	.LOW FRAME_11_DATA_05
	.HIGH FRAME_10_DATA_04
	.LOW FRAME_10_DATA_04
	.HIGH FRAME_10_DATA_05
	.LOW FRAME_10_DATA_05
	.db #$00
ANIM_FRAME_FILE_PTR_0F:
	.HIGH FRAME_F_DATA_00
	.LOW FRAME_F_DATA_00
	.HIGH FRAME_10_DATA_01
	.LOW FRAME_10_DATA_01
	.HIGH FRAME_F_DATA_02
	.LOW FRAME_F_DATA_02
	.HIGH FRAME_11_DATA_05
	.LOW FRAME_11_DATA_05
	.HIGH FRAME_F_DATA_04
	.LOW FRAME_F_DATA_04
	.HIGH FRAME_11_DATA_07
	.LOW FRAME_11_DATA_07
	.db #$00
ANIM_FRAME_FILE_PTR_10:
	.HIGH FRAME_10_DATA_00
	.LOW FRAME_10_DATA_00
	.HIGH FRAME_10_DATA_01
	.LOW FRAME_10_DATA_01
	.HIGH FRAME_10_DATA_02
	.LOW FRAME_10_DATA_02
	.HIGH FRAME_11_DATA_05
	.LOW FRAME_11_DATA_05
	.HIGH FRAME_10_DATA_04
	.LOW FRAME_10_DATA_04
	.HIGH FRAME_10_DATA_05
	.LOW FRAME_10_DATA_05
	.db #$00
ANIM_FRAME_FILE_PTR_16:
	.HIGH FRAME_16_DATA_00
	.LOW FRAME_16_DATA_00
	.HIGH FRAME_14_DATA_05
	.LOW FRAME_14_DATA_05
	.HIGH FRAME_16_DATA_02
	.LOW FRAME_16_DATA_02
	.db #$10
	.db #$F8
	.HIGH FRAME_16_DATA_04
	.LOW FRAME_16_DATA_04
	.HIGH FRAME_14_DATA_01
	.LOW FRAME_14_DATA_01
	.HIGH FRAME_16_DATA_06
	.LOW FRAME_16_DATA_06
	.HIGH FRAME_17_DATA_07
	.LOW FRAME_17_DATA_07
	.HIGH FRAME_16_DATA_08
	.LOW FRAME_16_DATA_08
	.HIGH FRAME_17_DATA_09
	.LOW FRAME_17_DATA_09
	.db #$00
ANIM_FRAME_FILE_PTR_17:
	.HIGH FRAME_17_DATA_00
	.LOW FRAME_17_DATA_00
	.HIGH FRAME_14_DATA_05
	.LOW FRAME_14_DATA_05
	.HIGH FRAME_17_DATA_02
	.LOW FRAME_17_DATA_02
	.db #$10
	.db #$F8
	.HIGH FRAME_17_DATA_04
	.LOW FRAME_17_DATA_04
	.HIGH FRAME_14_DATA_01
	.LOW FRAME_14_DATA_01
	.HIGH FRAME_17_DATA_06
	.LOW FRAME_17_DATA_06
	.HIGH FRAME_17_DATA_07
	.LOW FRAME_17_DATA_07
	.HIGH FRAME_17_DATA_08
	.LOW FRAME_17_DATA_08
	.HIGH FRAME_17_DATA_09
	.LOW FRAME_17_DATA_09
	.db #$00
ANIM_FRAME_FILE_PTR_12:
	.HIGH FRAME_12_DATA_00
	.LOW FRAME_12_DATA_00
	.HIGH FRAME_11_DATA_01
	.LOW FRAME_11_DATA_01
	.HIGH FRAME_12_DATA_02
	.LOW FRAME_12_DATA_02
	.HIGH FRAME_12_DATA_03
	.LOW FRAME_12_DATA_03
	.HIGH FRAME_12_DATA_04
	.LOW FRAME_12_DATA_04
	.HIGH FRAME_13_DATA_01
	.LOW FRAME_13_DATA_01
	.db #$00
ANIM_FRAME_FILE_PTR_13_0:
	.HIGH FRAME_13_DATA_00
	.LOW FRAME_13_DATA_00
	.HIGH FRAME_13_DATA_01
	.LOW FRAME_13_DATA_01
	.db #$00
ANIM_FRAME_FILE_PTR_14_0:
	.HIGH FRAME_14_DATA_00
	.LOW FRAME_14_DATA_00
	.HIGH FRAME_14_DATA_01
	.LOW FRAME_14_DATA_01
	.HIGH FRAME_14_DATA_02
	.LOW FRAME_14_DATA_02
	.db #$03
	.db #$F0
	.HIGH FRAME_14_DATA_04
	.LOW FRAME_14_DATA_04
	.HIGH FRAME_14_DATA_05
	.LOW FRAME_14_DATA_05
	.HIGH FRAME_15_DATA_08
	.LOW FRAME_15_DATA_08
	.db #$10
	.db #$F8
	.HIGH FRAME_15_DATA_02
	.LOW FRAME_15_DATA_02
	.HIGH FRAME_15_DATA_03
	.LOW FRAME_15_DATA_03
	.HIGH FRAME_14_DATA_0A
	.LOW FRAME_14_DATA_0A
	.db #$04
	.db #$18
	.db #$00
ANIM_FRAME_FILE_PTR_15:
	.HIGH FRAME_15_DATA_00
	.LOW FRAME_15_DATA_00
	.HIGH FRAME_15_DATA_01
	.LOW FRAME_15_DATA_01
	.HIGH FRAME_15_DATA_02
	.LOW FRAME_15_DATA_02
	.HIGH FRAME_15_DATA_03
	.LOW FRAME_15_DATA_03
	.HIGH FRAME_15_DATA_04
	.LOW FRAME_15_DATA_04
	.db #$04
	.db #$E0
	.HIGH FRAME_15_DATA_06
	.LOW FRAME_15_DATA_06
	.db #$04
	.db #$18
	.HIGH FRAME_15_DATA_08
	.LOW FRAME_15_DATA_08
	.db #$10
	.db #$F8
	.db #$00
ANIM_FRAME_FILE_PTR_11:
	.HIGH FRAME_11_DATA_00
	.LOW FRAME_11_DATA_00
	.HIGH FRAME_11_DATA_01
	.LOW FRAME_11_DATA_01
	.HIGH FRAME_11_DATA_02
	.LOW FRAME_11_DATA_02
	.db #$00
	.db #$00
	.HIGH FRAME_11_DATA_04
	.LOW FRAME_11_DATA_04
	.HIGH FRAME_11_DATA_05
	.LOW FRAME_11_DATA_05
	.HIGH FRAME_11_DATA_06
	.LOW FRAME_11_DATA_06
	.HIGH FRAME_11_DATA_07
	.LOW FRAME_11_DATA_07
	.db #$00
ANIM_FRAME_FILE_PTR_18:
	.HIGH FRAME_18_DATA_00
	.LOW FRAME_18_DATA_00
	.HIGH FRAME_18_DATA_01
	.LOW FRAME_18_DATA_01
	.db #$00
ANIM_FRAME_FILE_PTR_19:
	.HIGH ANIM_FRAME_FILE_PTR_01_0
	.LOW ANIM_FRAME_FILE_PTR_01_0
	.HIGH FRAME_19_DATA_01
	.LOW FRAME_19_DATA_01
	.HIGH FRAME_1B_DATA_02
	.LOW FRAME_1B_DATA_02
	.HIGH FRAME_19_DATA_03
	.LOW FRAME_19_DATA_03
	.HIGH FRAME_1A_DATA_04
	.LOW FRAME_1A_DATA_04
	.HIGH FRAME_19_DATA_05
	.LOW FRAME_19_DATA_05
	.HIGH FRAME_1A_DATA_06
	.LOW FRAME_1A_DATA_06
	.HIGH FRAME_19_DATA_07
	.LOW FRAME_19_DATA_07
	.db #$00
ANIM_FRAME_FILE_PTR_1A:
	.HIGH ANIM_FRAME_FILE_PTR_01_0
	.LOW ANIM_FRAME_FILE_PTR_01_0
	.HIGH FRAME_1C_DATA_01
	.LOW FRAME_1C_DATA_01
	.HIGH FRAME_1B_DATA_02
	.LOW FRAME_1B_DATA_02
	.HIGH FRAME_1C_DATA_05
	.LOW FRAME_1C_DATA_05
	.HIGH FRAME_1A_DATA_04
	.LOW FRAME_1A_DATA_04
	.HIGH FRAME_1A_DATA_05
	.LOW FRAME_1A_DATA_05
	.HIGH FRAME_1A_DATA_06
	.LOW FRAME_1A_DATA_06
	.HIGH FRAME_1A_DATA_07
	.LOW FRAME_1A_DATA_07
	.db #$00
ANIM_FRAME_FILE_PTR_1B:
	.HIGH ANIM_FRAME_FILE_PTR_01_0
	.LOW ANIM_FRAME_FILE_PTR_01_0
	.HIGH FRAME_24_DATA_01
	.LOW FRAME_24_DATA_01
	.HIGH FRAME_1B_DATA_02
	.LOW FRAME_1B_DATA_02
	.HIGH FRAME_1D_DATA_03
	.LOW FRAME_1D_DATA_03
	.db #$00
ANIM_FRAME_FILE_PTR_1C:
	.HIGH FRAME_1E_DATA_00
	.LOW FRAME_1E_DATA_00
	.HIGH FRAME_1C_DATA_01
	.LOW FRAME_1C_DATA_01
	.HIGH FRAME_1E_DATA_00
	.LOW FRAME_1E_DATA_00
	.HIGH FRAME_1E_DATA_01
	.LOW FRAME_1E_DATA_01
	.HIGH FRAME_1E_DATA_02
	.LOW FRAME_1E_DATA_02
	.HIGH FRAME_1C_DATA_05
	.LOW FRAME_1C_DATA_05
	.db #$00
ANIM_FRAME_FILE_PTR_1D:
	.HIGH FRAME_1E_DATA_00
	.LOW FRAME_1E_DATA_00
	.HIGH FRAME_24_DATA_01
	.LOW FRAME_24_DATA_01
	.HIGH FRAME_1E_DATA_02
	.LOW FRAME_1E_DATA_02
	.HIGH FRAME_1D_DATA_03
	.LOW FRAME_1D_DATA_03
	.db #$00
ANIM_FRAME_FILE_PTR_1E:
	.HIGH FRAME_1E_DATA_00
	.LOW FRAME_1E_DATA_00
	.HIGH FRAME_1E_DATA_01
	.LOW FRAME_1E_DATA_01
	.HIGH FRAME_1E_DATA_02
	.LOW FRAME_1E_DATA_02
	.HIGH FRAME_1E_DATA_03
	.LOW FRAME_1E_DATA_03
	.db #$00
ANIM_FRAME_FILE_PTR_1F:
	.HIGH FRAME_1F_DATA_00
	.LOW FRAME_1F_DATA_00
	.HIGH FRAME_23_DATA_01
	.LOW FRAME_23_DATA_01
	.db #$00
ANIM_FRAME_FILE_PTR_20:
	.HIGH FRAME_21_DATA_00
	.LOW FRAME_21_DATA_00
	.HIGH FRAME_23_DATA_01
	.LOW FRAME_23_DATA_01
	.HIGH FRAME_21_DATA_00
	.LOW FRAME_21_DATA_00
	.HIGH FRAME_20_DATA_03
	.LOW FRAME_20_DATA_03
	.db #$00
ANIM_FRAME_FILE_PTR_21:
	.HIGH FRAME_21_DATA_00
	.LOW FRAME_21_DATA_00
	.HIGH FRAME_23_DATA_01
	.LOW FRAME_23_DATA_01
	.db #$00
ANIM_FRAME_FILE_PTR_22:
	.HIGH FRAME_23_DATA_00
	.LOW FRAME_23_DATA_00
	.HIGH FRAME_23_DATA_01
	.LOW FRAME_23_DATA_01
	.HIGH FRAME_23_DATA_00
	.LOW FRAME_23_DATA_00
	.HIGH FRAME_22_DATA_03
	.LOW FRAME_22_DATA_03
	.db #$00
ANIM_FRAME_FILE_PTR_23:
	.HIGH FRAME_23_DATA_00
	.LOW FRAME_23_DATA_00
	.HIGH FRAME_23_DATA_01
	.LOW FRAME_23_DATA_01
	.db #$00
ANIM_FRAME_FILE_PTR_24:
	.HIGH FRAME_24_DATA_00
	.LOW FRAME_24_DATA_00
	.HIGH FRAME_24_DATA_01
	.LOW FRAME_24_DATA_01
	.db #$00
SPR_X/Y_OFFSETS_ARRAY:
	.db #$00 ;Group 0. Format [OffX,OffY]
	.db #$00
	.db #$08
	.db #$00
	.db #$10
	.db #$00
	.db #$18
	.db #$00
	.db #$00
	.db #$08
	.db #$08
	.db #$08
	.db #$10
	.db #$08
	.db #$18
	.db #$08 ;Group 1.
	.db #$00
	.db #$00
	.db #$00
	.db #$08
	.db #$00
	.db #$10
	.db #$00
	.db #$18
	.db #$08
	.db #$00
	.db #$08
	.db #$08
	.db #$08
	.db #$10
	.db #$08
	.db #$18
	.db #$10
	.db #$00
	.db #$10
	.db #$08
	.db #$10
	.db #$10
	.db #$10
	.db #$18
	.db #$18
	.db #$00
	.db #$18
	.db #$08
	.db #$18
	.db #$10
	.db #$18
	.db #$18
	.db #$08
	.db #$20
	.db #$10
	.db #$20
	.db #$18
	.db #$20
	.db #$18
	.db #$20
	.db #$00 ;Group 3
	.db #$00
	.db #$08
	.db #$00
	.db #$10
	.db #$00
	.db #$00
	.db #$08
	.db #$08
	.db #$08
	.db #$10
	.db #$08
	.db #$00 ;Group 4, default if not given.
	.db #$00
	.db #$08
	.db #$00
	.db #$00
	.db #$18
	.db #$08
	.db #$18
FRAME_0_DATA_00:
	.db #$01
	.db #$FD
	.db #$00
	.db #$00
	.db #$01
	.db #$02
	.db #$FD
	.db #$01
	.db #$03
	.db #$FD
	.db #$00
	.db #$04
	.db #$05
	.db #$06
	.db #$07
	.db #$08
	.db #$09
	.db #$0A
	.db #$FE
	.db #$FD
	.db #$01
	.db #$0B
	.db #$0C
	.db #$FF
FRAME_1_DATA_00:
	.db #$01
	.db #$FD
	.db #$00
	.db #$FE
	.db #$FE
	.db #$0D
	.db #$FE
	.db #$FD
	.db #$00
	.db #$0F
	.db #$10
	.db #$11
	.db #$FE
	.db #$12
	.db #$13
	.db #$14
	.db #$15
	.db #$FD
	.db #$01
	.db #$16
	.db #$17
	.db #$FF
FRAME_2_DATA_00:
	.db #$01
	.db #$FD
	.db #$00
	.db #$FE
	.db #$FE
	.db #$18
	.db #$FE
	.db #$FD
	.db #$00
	.db #$1A
	.db #$1B
	.db #$1C
	.db #$FE
	.db #$1D
	.db #$1E
	.db #$1F
	.db #$FE
	.db #$FD
	.db #$01
	.db #$20
	.db #$21
	.db #$FD
	.db #$00
	.db #$22
	.db #$FF
FRAME_3_DATA_00:
	.db #$00
	.db #$FD
	.db #$00
	.db #$25
	.db #$26
	.db #$27
	.db #$FD
	.db #$01
	.db #$28
	.db #$FD
	.db #$40
	.db #$25
	.db #$26
	.db #$27
	.db #$FD
	.db #$41
	.db #$28
	.db #$FF
FRAME_3_DATA_02:
	.db #$03
	.db #$FD
	.db #$00
	.db #$23
	.db #$24
	.db #$FD
	.db #$40
	.db #$23
	.db #$24
	.db #$FF
FRAME_4_DATA_00:
	.db #$00
	.db #$FD
	.db #$00
	.db #$2A
	.db #$2B
	.db #$2C
	.db #$FD
	.db #$01
	.db #$2D
	.db #$FD
	.db #$40
	.db #$2A
	.db #$2B
	.db #$2C
	.db #$FD
	.db #$41
	.db #$2D
	.db #$FF
FRAME_4_DATA_02:
	.db #$03
	.db #$FD
	.db #$00
	.db #$29
	.db #$FE
	.db #$FD
	.db #$40
	.db #$29
	.db #$FF
FRAME_5_DATA_00:
	.db #$00
	.db #$FD
	.db #$00
	.db #$2F
	.db #$30
	.db #$31
	.db #$FD
	.db #$01
	.db #$32
	.db #$FD
	.db #$40
	.db #$2F
	.db #$30
	.db #$31
	.db #$FD
	.db #$41
	.db #$32
	.db #$FF
FRAME_5_DATA_02:
	.db #$03
	.db #$FD
	.db #$00
	.db #$2E
	.db #$FE
	.db #$FD
	.db #$40
	.db #$2E
	.db #$FF
FRAME_9_DATA_00:
	.db #$01
	.db #$FD
	.db #$00
	.db #$33
	.db #$34
	.db #$35
	.db #$FD
	.db #$01
	.db #$36
	.db #$FD
	.db #$00
	.db #$37
	.db #$38
	.db #$39
	.db #$FD
	.db #$01
	.db #$3A
	.db #$FD
	.db #$00
	.db #$FE
	.db #$3B
	.db #$3C
	.db #$3D
	.db #$FF
FRAME_9_DATA_02:
	.db #$01
	.db #$FD
	.db #$01
	.db #$3E
	.db #$3F
	.db #$FF
FRAME_6_DATA_00:
	.db #$01
	.db #$FD
	.db #$00
	.db #$FE
	.db #$40
	.db #$41
	.db #$FE
	.db #$FE
	.db #$42
	.db #$43
	.db #$44
	.db #$45
	.db #$46
	.db #$47
	.db #$48
	.db #$FE
	.db #$FD
	.db #$01
	.db #$49
	.db #$FF
FRAME_8_DATA_06:
	.db #$00
	.db #$FD
	.db #$01
	.db #$4A
	.db #$FF
FRAME_7_DATA_06:
	.db #$00
	.db #$FD
	.db #$01
	.db #$F6
	.db #$FF
FRAME_2_DATA_02:
	.db #$00
	.db #$FD
	.db #$01
	.db #$03
	.db #$FF
FRAME_7_DATA_00:
	.db #$02
	.db #$FD
	.db #$01
	.db #$9F
	.db #$A0
	.db #$A1
	.db #$A2
	.db #$A3
	.db #$FF
FRAME_8_DATA_02:
	.db #$00
	.db #$FD
	.db #$01
	.db #$45
	.db #$FF
FRAME_8_DATA_04:
	.db #$00
	.db #$FD
	.db #$00
	.db #$44
	.db #$48
	.db #$FF
FRAME_8_DATA_00:
	.db #$02
	.db #$FD
	.db #$01
	.db #$A4
	.db #$A5
	.db #$A6
	.db #$A7
	.db #$A8
	.db #$A9
	.db #$FF
FRAME_A_DATA_00:
	.db #$00
	.db #$FD
	.db #$01
	.db #$AB
	.db #$AC
	.db #$FE
	.db #$FE
	.db #$0E
	.db #$19
	.db #$AA
	.db #$FD
	.db #$80
	.db #$E5
	.db #$FF
FRAME_A_DATA_02:
	.db #$00
	.db #$FD
	.db #$81
	.db #$EA
	.db #$FF
FRAME_A_DATA_04:
	.db #$00
	.db #$FD
	.db #$81
	.db #$E9
	.db #$FF
FRAME_B_DATA_00:
	.db #$00
	.db #$FD
	.db #$41
	.db #$0E
	.db #$19
	.db #$AA
	.db #$FD
	.db #$C0
	.db #$E5
	.db #$FD
	.db #$41
	.db #$AB
	.db #$AC
	.db #$FF
FRAME_B_DATA_02:
	.db #$00
	.db #$FD
	.db #$C1
	.db #$EA
	.db #$FF
FRAME_B_DATA_04:
	.db #$00
	.db #$FD
	.db #$C1
	.db #$E9
	.db #$FF
FRAME_10_DATA_02:
	.db #$01
	.db #$FD
	.db #$03
	.db #$52
	.db #$53
	.db #$54
	.db #$FE
	.db #$55
	.db #$56
	.db #$56
	.db #$57
	.db #$5A
	.db #$5B
	.db #$5C
	.db #$5D
	.db #$61
	.db #$62
	.db #$63
	.db #$64
	.db #$58
	.db #$5E
	.db #$65
	.db #$FF
FRAME_0D_DATA_02:
	.db #$01
	.db #$FD
	.db #$03
	.db #$52
	.db #$6A
	.db #$54
	.db #$FE
	.db #$55
	.db #$6B
	.db #$56
	.db #$57
	.db #$6C
	.db #$6D
	.db #$6E
	.db #$6F
	.db #$70
	.db #$71
	.db #$72
	.db #$73
	.db #$58
	.db #$5E
	.db #$74
	.db #$FF
FRAME_E_DATA_02:
	.db #$01
	.db #$FD
	.db #$03
	.db #$75
	.db #$53
	.db #$54
	.db #$FE
	.db #$76
	.db #$56
	.db #$56
	.db #$57
	.db #$77
	.db #$78
	.db #$79
	.db #$7A
	.db #$7B
	.db #$7C
	.db #$7D
	.db #$7E
	.db #$58
	.db #$5E
	.db #$7F
	.db #$FF
FRAME_F_DATA_02:
	.db #$01
	.db #$FD
	.db #$03
	.db #$52
	.db #$6A
	.db #$54
	.db #$FE
	.db #$76
	.db #$6B
	.db #$56
	.db #$57
	.db #$80
	.db #$81
	.db #$82
	.db #$83
	.db #$85
	.db #$86
	.db #$87
	.db #$88
	.db #$58
	.db #$84
	.db #$89
	.db #$FF
FRAME_F_DATA_00:
	.db #$02 ;Obj index.
	.db #$FD
	.db #$02
	.db #$59
	.db #$5F
	.db #$66
	.db #$FE
	.db #$60
	.db #$67
	.db #$FF
FRAME_10_DATA_00:
	.db #$02
	.db #$FD
	.db #$02
	.db #$4B
	.db #$4C
	.db #$4D
	.db #$4E
	.db #$4F
	.db #$50
	.db #$FF
FRAME_16_DATA_00:
	.db #$00
	.db #$FD
	.db #$02
	.db #$CD
	.db #$CE
	.db #$CF
	.db #$FD
	.db #$03
	.db #$D0
	.db #$FD
	.db #$42
	.db #$CD
	.db #$CE
	.db #$FD
	.db #$02
	.db #$D2
	.db #$FD
	.db #$03
	.db #$D3
	.db #$FF
FRAME_16_DATA_02:
	.db #$01
	.db #$FD
	.db #$03
	.db #$D1
	.db #$FD
	.db #$43
	.db #$D1
	.db #$FF
FRAME_16_DATA_04:
	.db #$03
	.db #$FD
	.db #$02
	.db #$C9
	.db #$CA
	.db #$FF
FRAME_16_DATA_06:
	.db #$00
	.db #$FD
	.db #$02
	.db #$D4
	.db #$FF
FRAME_16_DATA_08:
	.db #$03
	.db #$FD
	.db #$03
	.db #$CB
	.db #$CC
	.db #$D5
	.db #$D6
	.db #$FF
FRAME_17_DATA_00:
	.db #$00
	.db #$FD
	.db #$02
	.db #$D7
	.db #$D8
	.db #$D9
	.db #$FD
	.db #$03
	.db #$D0
	.db #$FD
	.db #$42
	.db #$D7
	.db #$D8
	.db #$FD
	.db #$02
	.db #$DA
	.db #$FD
	.db #$03
	.db #$D3
	.db #$FF
FRAME_17_DATA_02:
	.db #$01
	.db #$FD
	.db #$03
	.db #$D1
	.db #$FD
	.db #$43
	.db #$D1
	.db #$FF
FRAME_17_DATA_04:
	.db #$03
	.db #$FD
	.db #$02
	.db #$C9
	.db #$CA
	.db #$FF
FRAME_17_DATA_06:
	.db #$00
	.db #$FD
	.db #$02
	.db #$D4
	.db #$FF
FRAME_17_DATA_08:
	.db #$03
	.db #$FD
	.db #$03
	.db #$CB
	.db #$CC
	.db #$D5
	.db #$D6
	.db #$FF
FRAME_12_DATA_00:
	.db #$02
	.db #$FD
	.db #$03
	.db #$B3
	.db #$B4
	.db #$FE
	.db #$B9
	.db #$BA
	.db #$FF
FRAME_12_DATA_02:
	.db #$00
	.db #$FD
	.db #$02
	.db #$BF
	.db #$FF
FRAME_12_DATA_04:
	.db #$01
	.db #$FD
	.db #$03
	.db #$FE
	.db #$AF
	.db #$B5
	.db #$FD
	.db #$02
	.db #$BB
	.db #$FD
	.db #$03
	.db #$FE
	.db #$B0
	.db #$B6
	.db #$BC
	.db #$AD
	.db #$B1
	.db #$B7
	.db #$BD
	.db #$AE
	.db #$B2
	.db #$B8
	.db #$BE
	.db #$C0
	.db #$FF
FRAME_13_DATA_00:
	.db #$01
	.db #$FD
	.db #$03
	.db #$FE
	.db #$FE
	.db #$C1
	.db #$C2
	.db #$C3
	.db #$C4
	.db #$C5
	.db #$C6
	.db #$AD
	.db #$B1
	.db #$B7
	.db #$C7
	.db #$AE
	.db #$B2
	.db #$B8
	.db #$BE
	.db #$FE
	.db #$C8
	.db #$FF
FRAME_14_DATA_00:
	.db #$00
	.db #$FD
	.db #$02
	.db #$C9
	.db #$CA
	.db #$FF
FRAME_14_DATA_02:
	.db #$00
	.db #$FD
	.db #$03
	.db #$DB
	.db #$DC
	.db #$FF
FRAME_14_DATA_04:
	.db #$00
	.db #$FD
	.db #$02
	.db #$DD
	.db #$DE
	.db #$FD
	.db #$03
	.db #$DF
	.db #$E0
	.db #$FF
FRAME_15_DATA_08:
	.db #$01
	.db #$FD
	.db #$03
	.db #$D1
	.db #$FD
	.db #$43
	.db #$D1
	.db #$FF
FRAME_15_DATA_02:
	.db #$01
	.db #$FD
	.db #$42
	.db #$DD
	.db #$FD
	.db #$02
	.db #$D4
	.db #$FD
	.db #$00
	.db #$E5
	.db #$FD
	.db #$01
	.db #$E9
	.db #$FD
	.db #$42
	.db #$DE
	.db #$FD
	.db #$03
	.db #$E2
	.db #$E6
	.db #$FE
	.db #$E1
	.db #$E3
	.db #$FD
	.db #$01
	.db #$E7
	.db #$FE
	.db #$FD
	.db #$43
	.db #$E0
	.db #$FD
	.db #$01
	.db #$E4
	.db #$E8
	.db #$FF
FRAME_14_DATA_0A:
	.db #$00
	.db #$FD
	.db #$01
	.db #$EA
	.db #$FF
FRAME_15_DATA_00:
	.db #$01
	.db #$FD
	.db #$41
	.db #$E9
	.db #$FD
	.db #$40
	.db #$E5
	.db #$FD
	.db #$42
	.db #$D4
	.db #$FD
	.db #$02
	.db #$DD
	.db #$FE
	.db #$FD
	.db #$43
	.db #$E6
	.db #$E2
	.db #$FD
	.db #$02
	.db #$DE
	.db #$FE
	.db #$FD
	.db #$41
	.db #$E7
	.db #$FD
	.db #$43
	.db #$E3
	.db #$E1
	.db #$FE
	.db #$FD
	.db #$41
	.db #$E8
	.db #$E4
	.db #$FD
	.db #$03
	.db #$E0
	.db #$FF
FRAME_15_DATA_04:
	.db #$00
	.db #$FD
	.db #$41
	.db #$EA
	.db #$FF
FRAME_15_DATA_06:
	.db #$00
	.db #$FD
	.db #$01
	.db #$EA
	.db #$FF
FRAME_11_DATA_00:
	.db #$01
	.db #$FD
	.db #$03
	.db #$8A
	.db #$8B
	.db #$FE
	.db #$FE
	.db #$8C
	.db #$FD
	.db #$02
	.db #$8D
	.db #$8E
	.db #$FE
	.db #$8F
	.db #$90
	.db #$91
	.db #$92
	.db #$93
	.db #$94
	.db #$95
	.db #$96
	.db #$FF
FRAME_11_DATA_02:
	.db #$01
	.db #$FD
	.db #$03
	.db #$97
	.db #$FD
	.db #$02
	.db #$98
	.db #$FD
	.db #$03
	.db #$99
	.db #$FE
	.db #$9A
	.db #$9B
	.db #$9C
	.db #$FF
FRAME_11_DATA_04:
	.db #$01
	.db #$FD
	.db #$03
	.db #$52
	.db #$53
	.db #$54
	.db #$FE
	.db #$55
	.db #$56
	.db #$56
	.db #$FE
	.db #$5A
	.db #$5B
	.db #$5C
	.db #$FE
	.db #$61
	.db #$62
	.db #$63
	.db #$FF
FRAME_10_DATA_04:
	.db #$01
	.db #$FD
	.db #$03
	.db #$51
	.db #$FF
FRAME_F_DATA_04:
	.db #$02
	.db #$FD
	.db #$03
	.db #$68
	.db #$69
	.db #$FF
FRAME_11_DATA_06:
	.db #$00
	.db #$FD
	.db #$03
	.db #$9D
	.db #$9E
	.db #$FF
FRAME_18_DATA_00:
	.db #$01
	.db #$FD
FRAME_11_DATA_01:
	.db #$00
	.db #$F2
	.db #$F3
	.db #$FD
	.db #$40
	.db #$F2
	.db #$FE
	.db #$FD
	.db #$00
	.db #$F4
	.db #$F5
	.db #$FD
	.db #$40
	.db #$F4
	.db #$FF
ANIM_FRAME_FILE_PTR_01_0:
	.db #$00
	.db #$FD
	.db #$00
	.db #$EB
	.db #$FF
FRAME_1B_DATA_02:
	.db #$00
	.db #$FD
	.db #$40
	.db #$EB
	.db #$FF
FRAME_1A_DATA_04:
	.db #$00
	.db #$FD
	.db #$00
	.db #$F3
	.db #$FF
FRAME_1A_DATA_06:
	.db #$00
	.db #$FD
	.db #$00
	.db #$F5
	.db #$FF
FRAME_1E_DATA_00:
	.db #$01
	.db #$FD
	.db #$00
	.db #$EC
	.db #$FF
FRAME_1E_DATA_02:
	.db #$01
	.db #$FD
	.db #$40
	.db #$EC
	.db #$FF
FRAME_1F_DATA_00:
	.db #$01
	.db #$FD
	.db #$00
	.db #$EF
	.db #$FF
FRAME_21_DATA_00:
	.db #$00
	.db #$FD
	.db #$00
	.db #$F0
	.db #$FF
FRAME_23_DATA_00:
	.db #$00
	.db #$FD
	.db #$00
	.db #$F1
	.db #$FF
FRAME_24_DATA_00:
	.db #$01
	.db #$FD
	.db #$00
	.db #$ED
	.db #$EE
	.db #$FF
DUCK_HUNT_PPU_FILE:
	.db #$23
	.db #$00
	.db #$60
	.db #$50
	.db #$23
	.db #$20
	.db #$60
	.db #$50
	.db #$23
	.db #$40
	.db #$60
	.db #$50
	.db #$23
	.db #$60
	.db #$60
	.db #$50
	.db #$23
	.db #$80
	.db #$60
	.db #$50
	.db #$23
	.db #$A0
	.db #$60
	.db #$50
	.db #$22
	.db #$40
	.db #$20
	.db #$3D
	.db #$3E
	.db #$3F
	.db #$40
	.db #$56
	.db #$57
	.db #$D1
	.db #$D2
	.db #$3A
	.db #$3B
	.db #$3C
	.db #$3D
	.db #$3E
	.db #$3F
	.db #$40
	.db #$39
	.db #$3A
	.db #$3B
	.db #$3C
	.db #$3D
	.db #$3E
	.db #$3F
	.db #$40
	.db #$D2
	.db #$30
	.db #$31
	.db #$32
	.db #$33
	.db #$39
	.db #$3A
	.db #$3B
	.db #$3C
	.db #$22
	.db #$60
	.db #$20
	.db #$95
	.db #$96
	.db #$97
	.db #$98
	.db #$58
	.db #$59
	.db #$5A
	.db #$5B
	.db #$92
	.db #$93
	.db #$94
	.db #$95
	.db #$96
	.db #$97
	.db #$98
	.db #$91
	.db #$92
	.db #$93
	.db #$94
	.db #$95
	.db #$96
	.db #$97
	.db #$98
	.db #$5B
	.db #$34
	.db #$35
	.db #$36
	.db #$37
	.db #$91
	.db #$92
	.db #$93
	.db #$94
	.db #$22
	.db #$80
	.db #$20
	.db #$46
	.db #$45
	.db #$48
	.db #$46
	.db #$46
	.db #$45
	.db #$46
	.db #$48
	.db #$42
	.db #$43
	.db #$44
	.db #$46
	.db #$45
	.db #$48
	.db #$46
	.db #$41
	.db #$42
	.db #$43
	.db #$44
	.db #$46
	.db #$45
	.db #$48
	.db #$46
	.db #$48
	.db #$38
	.db #$45
	.db #$46
	.db #$46
	.db #$41
	.db #$42
	.db #$43
	.db #$44
	.db #$22
	.db #$A0
	.db #$60
	.db #$46
	.db #$22
	.db #$A4
	.db #$01
	.db #$48
	.db #$22
	.db #$A8
	.db #$01
	.db #$47
	.db #$22
	.db #$AA
	.db #$01
	.db #$48
	.db #$22
	.db #$B0
	.db #$01
	.db #$47
	.db #$22
	.db #$B2
	.db #$01
	.db #$48
	.db #$22
	.db #$BA
	.db #$01
	.db #$48
	.db #$22
	.db #$C0
	.db #$20
	.db #$4C
	.db #$4D
	.db #$4E
	.db #$4F
	.db #$49
	.db #$4A
	.db #$4B
	.db #$49
	.db #$4C
	.db #$4D
	.db #$4E
	.db #$4F
	.db #$4D
	.db #$4E
FRAME_11_DATA_07:
	.db #$4F
	.db #$49
	.db #$4A
	.db #$4B
	.db #$49
	.db #$4C
	.db #$4D
	.db #$4E
	.db #$4F
	.db #$49
	.db #$49
	.db #$4A
	.db #$4B
	.db #$49
	.db #$4C
	.db #$4D
	.db #$4E
	.db #$4F
	.db #$22
	.db #$E0
	.db #$20
	.db #$52
	.db #$50
	.db #$53
	.db #$50
	.db #$50
	.db #$51
	.db #$50
	.db #$50
	.db #$52
	.db #$50
	.db #$53
	.db #$50
	.db #$50
	.db #$53
	.db #$50
	.db #$50
	.db #$51
	.db #$50
	.db #$50
	.db #$52
	.db #$50
	.db #$53
	.db #$50
	.db #$50
	.db #$50
	.db #$51
	.db #$50
	.db #$50
	.db #$52
	.db #$50
	.db #$53
	.db #$50
	.db #$23
	.db #$00
	.db #$01
	.db #$52
	.db #$23
	.db #$02
	.db #$02
	.db #$54
	.db #$52
	.db #$23
	.db #$0A
	.db #$02
	.db #$54
	.db #$52
	.db #$23
	.db #$0D
	.db #$02
	.db #$54
	.db #$52
	.db #$23
	.db #$0F
	.db #$02
	.db #$54
	.db #$52
	.db #$23
	.db #$15
	.db #$02
	.db #$54
	.db #$52
	.db #$23
	.db #$1E
	.db #$02
	.db #$54
	.db #$52
	.db #$21
	.db #$F9
	.db #$03
	.db #$28
	.db #$29
	.db #$2A
	.db #$22
	.db #$19
	.db #$03
	.db #$2B
	.db #$46
	.db #$2C
	.db #$22
	.db #$38
	.db #$04
	.db #$2D
	.db #$2E
	.db #$46
	.db #$2F
	.db #$20
	.db #$81
	.db #$04
	.db #$5C
	.db #$5D
	.db #$5E
	.db #$5F
	.db #$20
	.db #$A1
	.db #$05
	.db #$60
	.db #$61
	.db #$46
	.db #$62
	.db #$63
	.db #$20
	.db #$C1
	.db #$05
	.db #$64
	.db #$65
	.db #$66
	.db #$67
	.db #$68
	.db #$20
	.db #$E3
	.db #$05
	.db #$69
	.db #$74
	.db #$75
	.db #$76
	.db #$6A
	.db #$21
	.db #$03
	.db #$05
	.db #$6B
	.db #$6C
	.db #$7C
	.db #$6D
	.db #$6E
	.db #$21
	.db #$23
	.db #$05
	.db #$6F
	.db #$70
	.db #$71
	.db #$72
	.db #$73
	.db #$21
	.db #$40
	.db #$07
	.db #$74
	.db #$75
	.db #$76
	.db #$77
	.db #$78
	.db #$79
	.db #$7A
	.db #$21
	.db #$60
	.db #$09
	.db #$7B
	.db #$7C
	.db #$7D
	.db #$7E
	.db #$7F
	.db #$80
	.db #$5D
	.db #$5E
	.db #$5F
	.db #$21
	.db #$81
	.db #$09
	.db #$81
	.db #$82
	.db #$83
	.db #$84
	.db #$60
	.db #$61
	.db #$46
	.db #$62
	.db #$63
	.db #$21
	.db #$A3
	.db #$07
	.db #$85
	.db #$86
	.db #$64
	.db #$87
	.db #$88
	.db #$67
	.db #$68
	.db #$21
	.db #$C3
	.db #$04
	.db #$89
	.db #$8A
	.db #$8B
	.db #$8C
	.db #$21
	.db #$E4
	.db #$02
	.db #$8D
	.db #$8E
	.db #$22
	.db #$04
	.db #$02
	.db #$8F
	.db #$90
	.db #$22
	.db #$24
	.db #$02
	.db #$8F
	.db #$55
	.db #$23
	.db #$03
	.db #$02
	.db #$1B
	.db #$27
	.db #$23
	.db #$23
	.db #$5B
	.db #$E3
	.db #$23
	.db #$22
	.db #$06
	.db #$E2
	.db #$E3
	.db #$E3
	.db #$E3
	.db #$E4
	.db #$E2
	.db #$23
	.db #$36
	.db #$02
	.db #$E4
	.db #$E2
	.db #$23
	.db #$3E
	.db #$01
	.db #$E4
	.db #$23
	.db #$48
	.db #$56
	.db #$B7
	.db #$23
	.db #$42
	.db #$06
	.db #$E5
	.db #$D9
	.db #$D9
	.db #$D9
	.db #$E7
	.db #$E5
	.db #$23
	.db #$4C
	.db #$4A
	.db #$D6
	.db #$23
	.db #$56
	.db #$02
	.db #$E7
	.db #$E5
	.db #$23
	.db #$5E
	.db #$01
	.db #$E7
	.db #$23
	.db #$58
	.db #$46
	.db #$00
	.db #$23
	.db #$68
	.db #$56
	.db #$B7
	.db #$23
	.db #$62
	.db #$06
	.db #$E5
	.db #$DA
	.db #$DB
	.db #$DC
	.db #$E7
	.db #$E5
	.db #$23
	.db #$76
	.db #$02
	.db #$E7
	.db #$E5
	.db #$23
	.db #$7E
	.db #$01
	.db #$E7
	.db #$23
	.db #$79
	.db #$05
	.db #$1C
	.db #$0C
	.db #$18
	.db #$1B
	.db #$0E
	.db #$23
	.db #$83
	.db #$5B
	.db #$E9
	.db #$23
	.db #$82
	.db #$01
	.db #$E8
	.db #$23
	.db #$86
	.db #$02
	.db #$EA
	.db #$E8
	.db #$23
	.db #$96
	.db #$02
	.db #$EA
	.db #$E8
	.db #$23
	.db #$9E
	.db #$01
	.db #$EA
	.db #$23
	.db #$C0
	.db #$60
	.db #$00
	.db #$23
	.db #$CA
	.db #$04
	.db #$CC
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$23
	.db #$D2
	.db #$04
	.db #$CC
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$23
	.db #$E0
	.db #$48
	.db #$50
	.db #$23
	.db #$E1
	.db #$01
	.db #$40
	.db #$23
	.db #$E8
	.db #$48
	.db #$A5
	.db #$23
	.db #$F0
	.db #$08
	.db #$AA
	.db #$AA
	.db #$AA
	.db #$FA
	.db #$FA
	.db #$BA
	.db #$FA
	.db #$BA
	.db #$23
	.db #$F8
	.db #$48
	.db #$0A
	.db #$23
	.db #$48
	.db #$03
	.db #$11
	.db #$12
	.db #$1D
	.db #$00
	.db #$22
	.db #$20
	.db #$60
	.db #$B6
	.db #$22
	.db #$40
	.db #$60
	.db #$B5
	.db #$22
	.db #$60
	.db #$60
	.db #$B5
	.db #$22
	.db #$80
	.db #$60
	.db #$B5
	.db #$22
	.db #$A0
	.db #$60
	.db #$B5
	.db #$22
	.db #$C0
	.db #$60
	.db #$B5
	.db #$22
	.db #$E0
	.db #$60
	.db #$B5
	.db #$23
	.db #$00
	.db #$60
	.db #$B5
	.db #$21
	.db #$85
	.db #$05
	.db #$AC
	.db #$AD
	.db #$AE
	.db #$C1
	.db #$C2
	.db #$21
	.db #$A4
	.db #$07
	.db #$AF
	.db #$B0
	.db #$B5
	.db #$B5
	.db #$C3
	.db #$C4
	.db #$C5
	.db #$21
	.db #$B0
	.db #$04
	.db #$EC
	.db #$B4
	.db #$B8
	.db #$B9
	.db #$21
	.db #$C2
	.db #$0B
	.db #$B1
	.db #$B2
	.db #$B5
	.db #$B5
	.db #$B5
	.db #$B5
	.db #$B5
	.db #$C6
	.db #$C7
	.db #$C8
	.db #$C9
	.db #$21
	.db #$CE
	.db #$0F
	.db #$CA
	.db #$B4
	.db #$B5
	.db #$B5
	.db #$B5
	.db #$ED
	.db #$BA
	.db #$BB
	.db #$BC
	.db #$B3
	.db #$EB
	.db #$B0
	.db #$BE
	.db #$BB
	.db #$BF
	.db #$21
	.db #$E2
	.db #$59
	.db #$B5
	.db #$21
	.db #$E0
	.db #$02
	.db #$B3
	.db #$B4
	.db #$21
	.db #$EB
	.db #$04
	.db #$CB
	.db #$C4
	.db #$CC
	.db #$CD
	.db #$21
	.db #$F5
	.db #$01
	.db #$BD
	.db #$21
	.db #$FB
	.db #$05
	.db #$BD
	.db #$CB
	.db #$C4
	.db #$C8
	.db #$BB
	.db #$22
	.db #$00
	.db #$5D
	.db #$B5
	.db #$22
	.db #$0D
	.db #$03
	.db #$CE
	.db #$CF
	.db #$D0
	.db #$22
	.db #$1D
	.db #$03
	.db #$C3
	.db #$C0
	.db #$C0
	.db #$22
	.db #$60
	.db #$06
	.db #$99
	.db #$9A
	.db #$9B
	.db #$9C
	.db #$99
	.db #$9A
	.db #$22
	.db #$80
	.db #$06
	.db #$9D
	.db #$9E
	.db #$9F
	.db #$A0
	.db #$9D
	.db #$9E
	.db #$22
	.db #$A0
	.db #$06
	.db #$A1
	.db #$A2
	.db #$A3
	.db #$A4
	.db #$A1
	.db #$A2
	.db #$22
	.db #$C0
	.db #$06
	.db #$A5
	.db #$A6
	.db #$A5
	.db #$A7
	.db #$A5
	.db #$A6
	.db #$22
	.db #$47
	.db #$84
	.db #$9B
	.db #$9F
	.db #$A3
	.db #$A5
	.db #$22
	.db #$48
	.db #$84
	.db #$9C
	.db #$A0
	.db #$A4
	.db #$A6
	.db #$22
	.db #$4A
	.db #$02
	.db #$A8
	.db #$A9
	.db #$22
	.db #$6A
	.db #$02
	.db #$AA
	.db #$AB
	.db #$22
	.db #$58
	.db #$05
	.db #$A8
	.db #$A9
	.db #$A8
	.db #$A8
	.db #$A8
	.db #$22
	.db #$77
	.db #$06
	.db #$A8
	.db #$AA
	.db #$AB
	.db #$AA
	.db #$AA
	.db #$AA
	.db #$22
	.db #$74
	.db #$82
	.db #$A9
	.db #$AB
	.db #$22
	.db #$97
	.db #$01
	.db #$AA
	.db #$22
	.db #$BA
	.db #$04
	.db #$99
	.db #$9A
	.db #$9B
	.db #$9C
	.db #$22
	.db #$DA
	.db #$04
	.db #$9D
	.db #$9E
	.db #$9F
	.db #$A0
	.db #$22
	.db #$FA
	.db #$04
	.db #$A1
	.db #$A2
	.db #$A3
	.db #$A4
	.db #$23
	.db #$20
	.db #$60
	.db #$C0
	.db #$23
	.db #$40
	.db #$60
	.db #$C0
	.db #$23
	.db #$60
	.db #$60
	.db #$C0
	.db #$23
	.db #$80
	.db #$60
	.db #$C0
	.db #$23
	.db #$A0
	.db #$60
	.db #$C0
	.db #$23
	.db #$00
	.db #$60
	.db #$DD
	.db #$23
	.db #$08
	.db #$50
	.db #$DF
	.db #$23
	.db #$07
	.db #$01
	.db #$DE
	.db #$23
	.db #$18
	.db #$01
	.db #$E0
	.db #$23
	.db #$28
	.db #$56
	.db #$E3
	.db #$23
	.db #$48
	.db #$56
	.db #$B7
	.db #$23
	.db #$68
	.db #$56
	.db #$B7
	.db #$23
	.db #$88
	.db #$56
	.db #$E9
	.db #$23
	.db #$58
	.db #$46
	.db #$00
	.db #$23
	.db #$22
	.db #$06
	.db #$E2
	.db #$E3
	.db #$E3
	.db #$E3
	.db #$E4
	.db #$E2
	.db #$23
	.db #$42
	.db #$06
	.db #$E5
	.db #$D9
	.db #$D9
	.db #$D9
	.db #$E7
	.db #$E5
	.db #$23
	.db #$62
	.db #$06
	.db #$E5
	.db #$DA
	.db #$DB
	.db #$DC
	.db #$E7
	.db #$E5
	.db #$23
	.db #$82
	.db #$06
	.db #$E8
	.db #$E9
	.db #$E9
	.db #$E9
	.db #$EA
	.db #$E8
	.db #$23
	.db #$4C
	.db #$4A
	.db #$D4
	.db #$23
	.db #$03
	.db #$02
	.db #$1B
	.db #$27
	.db #$23
	.db #$36
	.db #$84
	.db #$E4
	.db #$E7
	.db #$E7
	.db #$EA
	.db #$23
	.db #$37
	.db #$84
	.db #$E2
	.db #$E5
	.db #$E5
	.db #$E8
	.db #$23
	.db #$3E
	.db #$84
	.db #$E4
	.db #$E7
	.db #$E7
	.db #$EA
	.db #$23
	.db #$79
	.db #$05
	.db #$1C
	.db #$0C
	.db #$18
	.db #$1B
	.db #$0E
	.db #$23
	.db #$C0
	.db #$60
	.db #$00
	.db #$23
	.db #$C8
	.db #$50
	.db #$FF
	.db #$23
	.db #$E0
	.db #$48
	.db #$50
	.db #$23
	.db #$E8
	.db #$48
	.db #$55
	.db #$23
	.db #$F0
	.db #$08
	.db #$AA
	.db #$AA
	.db #$AA
	.db #$FA
	.db #$FA
	.db #$BA
	.db #$FA
	.db #$BA
	.db #$23
	.db #$F8
	.db #$48
	.db #$0A
	.db #$23
	.db #$48
	.db #$03
	.db #$11
	.db #$12
	.db #$1D
	.db #$00
PPU_FILE_DUCKHUNT_SCREEN:
	.db #$20
	.db #$64
	.db #$53
	.db #$B7
	.db #$20
	.db #$84
	.db #$53
	.db #$B7
	.db #$20
	.db #$A4
	.db #$53
	.db #$B7
	.db #$20
	.db #$C4
	.db #$53
	.db #$B7
	.db #$20
	.db #$E4
	.db #$53
	.db #$B7
	.db #$20
	.db #$86
	.db #$82
	.db #$F5
	.db #$F4
	.db #$20
	.db #$67
	.db #$85
	.db #$F0
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$F1
	.db #$20
	.db #$68
	.db #$C5
	.db #$24
	.db #$20
	.db #$6B
	.db #$83
	.db #$24
	.db #$24
	.db #$F4
	.db #$20
	.db #$E9
	.db #$04
	.db #$F3
	.db #$B7
	.db #$B7
	.db #$F1
	.db #$20
	.db #$6D
	.db #$C5
	.db #$24
	.db #$20
	.db #$6E
	.db #$04
	.db #$F2
	.db #$B7
	.db #$B7
	.db #$F0
	.db #$20
	.db #$EE
	.db #$04
	.db #$F3
	.db #$B7
	.db #$B7
	.db #$F1
	.db #$20
	.db #$90
	.db #$02
	.db #$F5
	.db #$F6
	.db #$20
	.db #$B0
	.db #$02
	.db #$F4
	.db #$F7
	.db #$20
	.db #$72
	.db #$C5
	.db #$24
	.db #$20
	.db #$75
	.db #$85
	.db #$24
	.db #$F8
	.db #$B7
	.db #$F9
	.db #$24
	.db #$20
	.db #$96
	.db #$82
	.db #$F1
	.db #$F0
	.db #$21
	.db #$24
	.db #$58
	.db #$FB
	.db #$21
	.db #$49
	.db #$53
	.db #$B7
	.db #$21
	.db #$69
	.db #$52
	.db #$B7
	.db #$21
	.db #$89
	.db #$52
	.db #$B7
	.db #$21
	.db #$A9
	.db #$52
	.db #$B7
	.db #$21
	.db #$C9
	.db #$52
	.db #$B7
	.db #$21
	.db #$4B
	.db #$85
	.db #$24
	.db #$FA
	.db #$B7
	.db #$24
	.db #$24
	.db #$21
	.db #$4D
	.db #$C5
	.db #$24
	.db #$21
	.db #$CE
	.db #$04
	.db #$F3
	.db #$B7
	.db #$B7
	.db #$F1
	.db #$21
	.db #$50
	.db #$83
	.db #$24
	.db #$24
	.db #$F4
	.db #$21
	.db #$52
	.db #$C5
	.db #$24
	.db #$21
	.db #$55
	.db #$85
	.db #$24
	.db #$F0
	.db #$B7
	.db #$F9
	.db #$24
	.db #$21
	.db #$57
	.db #$C5
	.db #$24
	.db #$21
	.db #$78
	.db #$C4
	.db #$24
	.db #$21
	.db #$7B
	.db #$C4
	.db #$24
	.db #$22
	.db #$28
	.db #$0F
	.db #$10
	.db #$0A
	.db #$16
	.db #$0E
	.db #$24
	.db #$0A
	.db #$24
	.db #$24
	.db #$24
	.db #$01
	.db #$24
	.db #$0D
	.db #$1E
	.db #$0C
	.db #$14
	.db #$22
	.db #$68
	.db #$10
	.db #$10
	.db #$0A
	.db #$16
	.db #$0E
	.db #$24
	.db #$0B
	.db #$24
	.db #$24
	.db #$24
	.db #$02
	.db #$24
	.db #$0D
	.db #$1E
	.db #$0C
	.db #$14
	.db #$1C
	.db #$22
	.db #$A8
	.db #$16
	.db #$10
	.db #$0A
	.db #$16
	.db #$0E
	.db #$24
	.db #$0C
	.db #$24
	.db #$24
	.db #$24
	.db #$0C
	.db #$15
	.db #$0A
	.db #$22
	.db #$24
	.db #$1C
	.db #$11
	.db #$18
	.db #$18
	.db #$1D
	.db #$12
	.db #$17
	.db #$10
	.db #$23
	.db #$07
	.db #$0B
	.db #$1D
	.db #$18
	.db #$19
	.db #$24
	.db #$1C
	.db #$0C
	.db #$18
	.db #$1B
	.db #$0E
	.db #$24
	.db #$27
	.db #$23
	.db #$45
	.db #$16
	.db #$25
	.db #$01
	.db #$09
	.db #$08
	.db #$04
	.db #$24
	.db #$17
	.db #$12
	.db #$17
	.db #$1D
	.db #$0E
	.db #$17
	.db #$0D
	.db #$18
	.db #$24
	.db #$0C
	.db #$18
	.db #$EE
	.db #$15
	.db #$1D
	.db #$0D
	.db #$EF
	.db #$23
	.db #$C0
	.db #$60
	.db #$00 ;END OF DUCK GAME SCREEN DATA.
	.db #$23
	.db #$E0
	.db #$42
	.db #$55
	.db #$23
	.db #$E2
	.db #$46
	.db #$FF
	.db #$23
	.db #$EA
	.db #$46
	.db #$FF
	.db #$23
	.db #$F0
	.db #$48
	.db #$5A
	.db #$23
	.db #$F8
	.db #$48
	.db #$00
	.db #$23
	.db #$E1
	.db #$01
	.db #$55
	.db #$23
	.db #$E9
	.db #$01
	.db #$55
	.db #$00
PALLETE_PTR_L:
	.LOW PALLETTE_PTR_00
PALLETE_PTR_H:
	.HIGH PALLETTE_PTR_00
	.LOW PALLETTE_PTR_01
	.HIGH PALLETTE_PTR_01
	.LOW PALLETTE_PTR_02
	.HIGH PALLETTE_PTR_02
	.LOW PALLETTE_PTR_03
	.HIGH PALLETTE_PTR_03
	.LOW PALLETTE_PTR_04
	.HIGH PALLETTE_PTR_04
	.LOW PALLETTE_PTR_05
	.HIGH PALLETTE_PTR_05
	.LOW PALLETTE_PTR_06
	.HIGH PALLETTE_PTR_06
PALLETTE_PTR_00:
	.db #$3F ;3F00 addr
	.db #$00
	.db #$10 ;16 bytes, half pallet.
	.db #$0F
	.db #$2C
	.db #$27
	.db #$0F
	.db #$0F
	.db #$0F
	.db #$30
	.db #$30
	.db #$0F
	.db #$0F
	.db #$2A
	.db #$2A
	.db #$0F
	.db #$0F
	.db #$27
	.db #$27
	.db #$3F
	.db #$10
	.db #$50 ;3F10, 10 bytes, single block.
	.db #$0F
	.db #$00
PALLETTE_PTR_01:
	.db #$3F ;3F00 addr
	.db #$00
	.db #$20 ;whole pallet, 32 bytes.
	.db #$21
	.db #$07
	.db #$29
	.db #$0A
	.db #$21
	.db #$30
	.db #$29
	.db #$0A
	.db #$21
	.db #$0F
	.db #$29
	.db #$18
	.db #$21
	.db #$0F
	.db #$30
	.db #$16
	.db #$21
	.db #$30
	.db #$0A
	.db #$0F
	.db #$21
	.db #$30
	.db #$26
	.db #$0F
	.db #$21
	.db #$30
	.db #$17
	.db #$0F
	.db #$21
	.db #$07
	.db #$17
	.db #$0F
	.db #$00
PALLETTE_PTR_02:
	.db #$3F ;addr 3f00
	.db #$00
	.db #$20 ;32 bytes, whole pallet.
	.db #$2C
	.db #$29
	.db #$19
	.db #$09
	.db #$2C
	.db #$07
	.db #$29
	.db #$1A
	.db #$2C
	.db #$0F
	.db #$29
	.db #$10
	.db #$2C
	.db #$0F
	.db #$30
	.db #$16
	.db #$2C
	.db #$30
	.db #$0F
	.db #$0F
	.db #$2C
	.db #$30
	.db #$16
	.db #$07
	.db #$2C
	.db #$30
	.db #$17
	.db #$0F
	.db #$2C
	.db #$07
	.db #$17
	.db #$0F
	.db #$00
PALLETTE_PTR_03:
	.db #$3F ;ADDR 3F00, fired screen?
	.db #$00
	.db #$60 ;clear whole pallet, 32 bytes of 0F
	.db #$0F
	.db #$3F ;3F03 addr
	.db #$03
	.db #$01
	.db #$30
	.db #$00
PALLETTE_PTR_04:
	.db #$3F ;3F00 addr, all black bg, sprites white.
	.db #$00
	.db #$60 ;clear whole pallet, 32 bytes of 0F.
	.db #$0F
	.db #$3F ;3F11 addr
	.db #$11 ;3F11, 3 bytes of white.
	.db #$03
	.db #$30
	.db #$30
	.db #$30
	.db #$00
PALLETTE_PTR_06:
	.db #$3F ;3F10 ADDR
	.db #$10
	.db #$10 ;16 bytes
	.db #$21
	.db #$30
	.db #$0A
	.db #$0F
	.db #$21
	.db #$30
	.db #$26
	.db #$0F
	.db #$21
	.db #$30
	.db #$17
	.db #$0F
	.db #$21
	.db #$07
	.db #$17
	.db #$0F
PALLETTE_PTR_05:
	.db #$3F ;3F00 Addr
	.db #$00
	.db #$10 ;16 bytes
	.db #$21
	.db #$07
	.db #$29
	.db #$0A
	.db #$21
	.db #$30
	.db #$29
	.db #$0A
	.db #$21
	.db #$0F
	.db #$29
	.db #$18
	.db #$21
	.db #$0F
	.db #$30
	.db #$16
	.db #$00
BONUS_ADDR_HIGH:
	.db #$23
BONUS_ADDR_LOW:
	.db #$58
	.db #$06
	.db #$00
DEFAULT_HIGH_SCORES:
	.db #$00 ;goes to 0x5F0
	.db #$01
	.db #$20
	.db #$00
	.db #$00
	.db #$01
	.db #$20
	.db #$00
	.db #$00
	.db #$01
	.db #$20
	.db #$00
TARGET_INIT_DATA_PIGEON/DUCK:
	.db #$01 ;target type, ZP $30
	.db #$01 ;target state, ZP $31
	.db #$A8 ;Y coord. ZP $32
	.db #$80 ;X coord.
	.db #$00 ;ZP $34
	.db #$00
	.db #$00 ;ZP $36, OBJ_INDEX_START
	.db #$3F ;OBJ_INDEX_FINAL
	.db #$01 ;ZP $38
	.db #$00
	.db #$03 ;ZP $3A
	.db #$00
	.db #$00 ;ZP $3C
	.db #$00
	.db #$00 ;ZP $3E
	.db #$00
	.db #$00 ;ZP $40
	.db #$00
	.db #$00 ;ZP $42
	.db #$00
	.db #$00 ;ZP $44
	.db #$00
	.db #$00 ;ZP $46
	.db #$00
	.db #$00 ;CP $48
	.db #$00
	.db #$00 ;ZP $4A
	.db #$03
	.db #$00 ;ZP $4C
	.db #$00
	.db #$00 ;ZP $4E
	.db #$00
OBJ_DATA_UNK_HIGH:
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_00 ;not sure what any of this is rn.
OBJ_DATA_UNK_LOW:
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_00
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_01
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_01
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_02
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_02
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_03
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_03
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_04
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_04
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_05
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_05
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_06
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_06
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_07
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_07
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_08
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_08
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_09
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_09
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_0A
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_0A
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_0B
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_0B
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_0C
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_0C
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_0D
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_0D
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_0E
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_0E
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_0F
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_0F
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_10
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_10
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_11
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_11
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_12
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_12
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_13
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_13
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_14
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_14
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_15
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_15
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_16
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_16
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_17
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_17
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_18
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_18
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_19
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_19
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_1A
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_1A
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_1B
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_1B
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_1C
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_1C
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_1D
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_1D
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_1E
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_1E
	.LOW UNK_OBJ_DATA_OBJ_STATE_2_1F
	.HIGH UNK_OBJ_DATA_OBJ_STATE_2_1F
UNK_OBJ_DATA_264B:
	.db #$00
	.db #$03
	.db #$10
	.db #$17
	.db #$24
	.db #$27
	.db #$34
	.db #$3B
	.db #$48
	.db #$4B
	.db #$58
	.db #$5F
	.db #$6C
	.db #$6F
	.db #$7C
	.db #$83
	.db #$90
	.db #$95
	.db #$98
	.db #$9B
	.db #$9E
	.db #$A1
UNK_TARGET_DATA:
	.db #$FF
	.db #$00
	.db #$AA
	.db #$FF
	.db #$01
	.db #$FF
	.db #$00
	.db #$FF
	.db #$00
	.db #$FF
	.db #$01
	.db #$FF
	.db #$00
	.db #$00
	.db #$00
	.db #$AA
	.db #$FF
	.db #$01
	.db #$FF
	.db #$01
	.db #$00
	.db #$00
	.db #$AA
	.db #$00
	.db #$01
	.db #$FF
	.db #$01
	.db #$00
	.db #$01
	.db #$FF
	.db #$01
	.db #$00
	.db #$01
	.db #$00
	.db #$00
	.db #$AA
	.db #$00
	.db #$01
	.db #$AA
	.db #$00
	.db #$01
	.db #$01
	.db #$01
	.db #$00
	.db #$01
	.db #$01
	.db #$01
	.db #$00
	.db #$01
	.db #$00
	.db #$00
	.db #$AA
	.db #$01
	.db #$01
	.db #$01
	.db #$01
	.db #$00
	.db #$00
	.db #$AA
	.db #$01
	.db #$01
	.db #$01
	.db #$00
	.db #$01
	.db #$00
	.db #$01
	.db #$01
	.db #$01
	.db #$00
	.db #$00
	.db #$00
	.db #$AA
	.db #$01
	.db #$00
	.db #$AA
	.db #$01
	.db #$FF
	.db #$01
	.db #$00
	.db #$01
	.db #$00
	.db #$01
	.db #$FF
	.db #$01
	.db #$00
	.db #$00
	.db #$00
	.db #$AA
	.db #$01
	.db #$FF
	.db #$01
	.db #$FF
	.db #$00
	.db #$00
	.db #$AA
	.db #$00
	.db #$FF
	.db #$01
	.db #$FF
	.db #$00
	.db #$FF
	.db #$01
	.db #$FF
	.db #$00
	.db #$FF
	.db #$00
	.db #$00
	.db #$AA
	.db #$00
	.db #$FF
	.db #$AA
	.db #$00
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$00
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$00
	.db #$FF
	.db #$00
	.db #$00
	.db #$AA
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$00
	.db #$00
	.db #$AA
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$00
	.db #$FF
	.db #$00
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$00
	.db #$00
	.db #$00
	.db #$AA
	.db #$02
	.db #$01
	.db #$02
	.db #$FF
	.db #$AA
	.db #$FF
	.db #$FE
	.db #$AA
	.db #$FE
	.db #$FF
	.db #$AA
	.db #$FE
	.db #$00
	.db #$AA
	.db #$FE
	.db #$01
	.db #$AA
	.db #$FF
	.db #$02
	.db #$AA
	.db #$02
	.db #$00
	.db #$02
	.db #$01
	.db #$04
	.db #$02
	.db #$FE
	.db #$02
	.db #$03
	.db #$02
	.db #$04
	.db #$04
	.db #$05
	.db #$FE
	.db #$14
	.db #$09
	.db #$FF
	.db #$06
	.db #$01
TARGET_0_STATE_6_SCRIPT:
	.db #$04
	.db #$0A
	.db #$04
	.db #$0B
	.db #$FE
	.db #$02
	.db #$06
	.db #$02
	.db #$07
	.db #$04
	.db #$08
	.db #$FE
TARGET_3_STATE_INIT?:
	.db #$21
	.db #$30
	.db #$0A
	.db #$0F
	.db #$21
	.db #$30
	.db #$26
	.db #$0F
	.db #$21
	.db #$30
	.db #$14
	.db #$02
	.db #$21
	.db #$30
	.db #$26
	.db #$02
	.db #$21
	.db #$30
	.db #$0F
	.db #$05
	.db #$21
	.db #$30
	.db #$26
	.db #$05
DIFFICULTY_2ND_TARGET:
	.db #$04 ;format [BLACK,BLUE,RED][10]
	.db #$08
	.db #$0C
	.db #$08
	.db #$0C
	.db #$10
	.db #$08
	.db #$0C
	.db #$10
	.db #$0C
	.db #$10
	.db #$14
	.db #$10
	.db #$14
	.db #$18
	.db #$10
	.db #$14
	.db #$18
	.db #$14
	.db #$18
	.db #$1C
	.db #$14
	.db #$1C
	.db #$1C
	.db #$18
	.db #$1C
	.db #$1C
	.db #$1C
	.db #$1C
	.db #$20
LEVEL_DATA_UNK:
	.db #$10 ;difficulty?
	.db #$14
	.db #$14
	.db #$18
	.db #$18
	.db #$1C
	.db #$1C
	.db #$20
	.db #$20
	.db #$24
	.db #$24
	.db #$28
DUCK_DATA_COMBO:
	.db #$00 ;format [trgt 2, trgt 1]
	.db #$01 ;first level range is up to 3, meaning can't get 2 (red) target.
	.db #$10
	.db #$11
	.db #$12 ;only at index 4 can you get red ducks.
	.db #$20
	.db #$21
	.db #$22 ;and up to 0x7 is all combos of ducks available.
TARGET_3_DATA:
	.db #$01 ;type?
	.db #$01 ;state?
	.db #$AC ;Y coord.
	.db #$18 ;X coord.
	.db #$00
	.db #$00
	.db #$00
	.db #$BF ;not sure.
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$60
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00 ;end of target 3 data.
OBJ3_ANIMATION_SCRIPT_STATE_2:
	.db #$06 ;speed to change frames in the file. E78E
	.db #$0C ;file to play.
	.db #$06 ;speed
	.db #$0D ;file
	.db #$06 ;speed
	.db #$0E ;file
	.db #$06 ;speed
	.db #$0F ;file
	.db #$FE ;flag special. in code. index to 0. repeat animation
	.db #$00
OBJ3_ANIMATION_SCRIPT_STATE_4:
	.db #$08
	.db #$0C
	.db #$08
	.db #$10
	.db #$08
	.db #$0C
	.db #$08
	.db #$10
	.db #$08
	.db #$0C
	.db #$08
	.db #$10
	.db #$FF
	.db #$02
	.db #$01
OBJ3_ANIMATION_SCRIPT_STATE_6:
	.db #$10 ;Dog state 6 animation script.
	.db #$11
	.db #$FF
	.db #$08
	.db #$01
OBJ3_ANIMATION_SCRIPT_STATE_8:
	.db #$90
	.db #$03
	.db #$12
	.db #$83
	.db #$01
	.db #$12
	.db #$83
	.db #$01
	.db #$12
	.db #$83
	.db #$01
	.db #$12
	.db #$83
	.db #$01
	.db #$12
	.db #$82
	.db #$01
	.db #$12
	.db #$82
	.db #$01
	.db #$12
	.db #$82
	.db #$01
	.db #$12
	.db #$82
	.db #$01
	.db #$12
	.db #$81
	.db #$01
	.db #$12
	.db #$82
	.db #$01
	.db #$12
	.db #$81
	.db #$01
	.db #$12
	.db #$81
	.db #$01
	.db #$12
	.db #$81
	.db #$01
	.db #$12
	.db #$81
	.db #$01
	.db #$12
	.db #$81
	.db #$01
	.db #$12
	.db #$81
	.db #$01
	.db #$12
	.db #$84
	.db #$01
	.db #$13
	.db #$00
	.db #$01
	.db #$13
	.db #$81
	.db #$01
	.db #$13
	.db #$00
	.db #$01
	.db #$13
	.db #$81
	.db #$01
	.db #$13
	.db #$00
	.db #$01
	.db #$13
	.db #$00
	.db #$01
	.db #$13
	.db #$00
	.db #$01
	.db #$13
	.db #$81
	.db #$01
	.db #$13
	.db #$FD
	.db #$00
	.db #$01
	.db #$13
	.db #$00
	.db #$01
	.db #$13
	.db #$00
	.db #$01
	.db #$13
	.db #$00
	.db #$01
	.db #$13
	.db #$01
	.db #$01
	.db #$13
	.db #$00
	.db #$01
	.db #$13
	.db #$01
	.db #$01
	.db #$13
	.db #$00
	.db #$01
	.db #$13
	.db #$01
	.db #$01
	.db #$13
	.db #$01
	.db #$01
	.db #$13
	.db #$01
	.db #$01
	.db #$13
	.db #$02
	.db #$01
	.db #$13
	.db #$02
	.db #$01
	.db #$13
	.db #$02
	.db #$01
	.db #$13
	.db #$03
	.db #$01
	.db #$13
	.db #$03
	.db #$01
	.db #$13
	.db #$04
	.db #$00
	.db #$13
	.db #$04
	.db #$00
	.db #$13
	.db #$05
	.db #$00
	.db #$13
	.db #$05
	.db #$00
	.db #$13
	.db #$05
	.db #$00
	.db #$13
	.db #$05
	.db #$00
	.db #$13
	.db #$05
	.db #$00
	.db #$13
	.db #$05
	.db #$00
	.db #$13
	.db #$FF
	.db #$0E
	.db #$00
OBJ3_ANIMATION_SCRIPT_STATE_A:
	.db #$04
	.db #$81
	.db #$16
	.db #$04
	.db #$81
	.db #$17
	.db #$04
	.db #$81
	.db #$16
	.db #$04
	.db #$81
	.db #$17
	.db #$04
	.db #$81
	.db #$16
	.db #$04
	.db #$81
	.db #$17
	.db #$04
	.db #$81
	.db #$16
	.db #$04
	.db #$81
	.db #$17
	.db #$04
	.db #$81
	.db #$16
	.db #$04
	.db #$81
	.db #$17
	.db #$04
	.db #$80
	.db #$16
	.db #$04
	.db #$80
	.db #$17
	.db #$04
	.db #$80
	.db #$16
	.db #$04
	.db #$80
	.db #$17
	.db #$04
	.db #$80
	.db #$16
	.db #$04
	.db #$80
	.db #$17
	.db #$04
	.db #$80
	.db #$16
	.db #$04
	.db #$80
	.db #$17
	.db #$04
	.db #$02
	.db #$16
	.db #$04
	.db #$02
	.db #$17
	.db #$04
	.db #$02
	.db #$16
	.db #$04
	.db #$02
	.db #$17
	.db #$04
	.db #$02
	.db #$16
	.db #$04
	.db #$02
	.db #$17
	.db #$04
	.db #$02
	.db #$16
	.db #$FF
	.db #$0F
	.db #$20
OBJ3_ANIMATION_SCRIPT_STATE_C_2:
	.db #$14
	.db #$82
	.db #$14
	.db #$10
	.db #$00
	.db #$14
	.db #$14
	.db #$02
	.db #$14
	.db #$14
	.db #$02
	.db #$14
	.db #$FF
	.db #$0F
	.db #$20
OBJ3_ANIMATION_SCRIPT_STATE_C_2_0:
	.db #$14
	.db #$82
	.db #$15
	.db #$10
	.db #$00
	.db #$15
	.db #$14
	.db #$02
	.db #$15
	.db #$14
	.db #$02
	.db #$15
	.db #$FF
	.db #$0F
	.db #$20
OBJ3_ANIMATION_SCRIPT_STATE_10:
	.db #$04
	.db #$81
	.db #$16
	.db #$04
	.db #$81
	.db #$17
	.db #$04
	.db #$81
	.db #$16
	.db #$04
	.db #$81
	.db #$17
	.db #$04
	.db #$81
	.db #$16
	.db #$04
	.db #$81
	.db #$17
	.db #$04
	.db #$81
	.db #$16
	.db #$04
	.db #$81
	.db #$17
	.db #$04
	.db #$81
	.db #$16
	.db #$04
	.db #$81
	.db #$17
	.db #$04
	.db #$80
	.db #$16
	.db #$04
	.db #$80
	.db #$17
	.db #$04
	.db #$80
	.db #$16
	.db #$FC
INIT_PIGEON_DATA:
	.db #$01
	.db #$02
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$4F
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$01
FRAME_10_DATA_05:
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$02
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$F9
	.db #$FE
	.db #$FB
	.db #$FE
	.db #$FF
ANIM_FRAME_FILE_PTR_02_0:
	.db #$FE
	.db #$FF
	.db #$FA
	.db #$FB
	.db #$FA
	.db #$F9
	.db #$FA
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$FA
	.db #$FD
	.db #$FB
	.db #$FD
	.db #$FB
	.db #$FD
	.db #$FC
	.db #$FD
	.db #$FC
	.db #$FB
	.db #$FB
	.db #$FB
	.db #$FB
	.db #$FB
	.db #$FA
	.db #$FB
PIGEON_FRAME_DATA:
	.db #$18
	.db #$18
	.db #$19
	.db #$1A
	.db #$1A
	.db #$1B
	.db #$1C
	.db #$1D
	.db #$1E
	.db #$1E
	.db #$1F
	.db #$1F
	.db #$20
	.db #$20
	.db #$21
	.db #$21
	.db #$22
	.db #$22
	.db #$22
	.db #$22
	.db #$23
	.db #$23
	.db #$23
	.db #$23
	.db #$23
	.db #$23
OBJ_DATA_PIGEON_UNK:
	.db #$00
	.db #$00
	.db #$00
	.db #$01
	.db #$01
	.db #$01
	.db #$02
	.db #$02
	.db #$02
	.db #$02
	.db #$03
	.db #$03
	.db #$03
	.db #$03
	.db #$04
	.db #$04
	.db #$04
	.db #$04
	.db #$04
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
PIGEON_DATA_PTR/DATA:
	.db #$00
PIGEON_DATA_PTR_INDEX:
	.db #$00
PIGEON_DATA_4A_UNK:
	.db #$C0
PIGEON_ANIM_TIMER_DATA:
	.db #$15
PIGEON_DATA_MISC_INDEX?:
	.db #$1E
PIGEON_DATA_FLYAWAY_COUNTDOWN:
	.db #$2C
	.db #$01
	.db #$00
	.db #$C0
	.db #$0A
	.db #$1E
	.db #$30
	.db #$03
	.db #$00
	.db #$D0
	.db #$10
	.db #$1E
	.db #$25
	.db #$04
	.db #$00
	.db #$C0
	.db #$00
	.db #$1C
	.db #$30
	.db #$06
	.db #$00
	.db #$C0
	.db #$0F
	.db #$1C
	.db #$30
	.db #$08
	.db #$00
	.db #$C0
	.db #$F6
	.db #$1C
	.db #$30
	.db #$09
	.db #$00
	.db #$C0
	.db #$0C
	.db #$1C
	.db #$30
	.db #$0A
	.db #$00
	.db #$C0
	.db #$F4
	.db #$1C
	.db #$30
	.db #$0C
	.db #$00
	.db #$C0
	.db #$F4
	.db #$1E
	.db #$2D
	.db #$0E
	.db #$00
	.db #$C0
	.db #$08
	.db #$1C
	.db #$30
	.db #$0A
	.db #$00
	.db #$C0
	.db #$00
	.db #$1D
	.db #$30
	.db #$11
	.db #$00
	.db #$B8
	.db #$EE
	.db #$20
	.db #$33
	.db #$13
	.db #$00
	.db #$C8
	.db #$F0
	.db #$1C
	.db #$2A
	.db #$04
	.db #$80
	.db #$C8
	.db #$F7
	.db #$1C
	.db #$2D
	.db #$0A
	.db #$80
	.db #$C8
	.db #$0B
	.db #$1C
	.db #$2D
	.db #$0F
	.db #$80
	.db #$C6
	.db #$F3
	.db #$21
	.db #$26
PIGEON_DATA_DIFFICULTY:
	.db #$14
	.db #$14
	.db #$10
	.db #$10
	.db #$10
	.db #$08
	.db #$04
	.db #$00
	.db #$18
	.db #$14
	.db #$14
	.db #$10
	.db #$0C
	.db #$08
	.db #$04
	.db #$00
	.db #$1C
	.db #$18
	.db #$18
	.db #$14
	.db #$10
	.db #$0C
	.db #$08
	.db #$04
	.db #$20
	.db #$1C
	.db #$18
	.db #$14
	.db #$10
	.db #$0C
	.db #$08
	.db #$04
	.db #$24
	.db #$20
	.db #$1C
	.db #$18
	.db #$14
	.db #$0C
	.db #$08
	.db #$04
	.db #$28
	.db #$24
	.db #$20
	.db #$1C
	.db #$14
	.db #$10
	.db #$0C
	.db #$08
	.db #$2C
	.db #$28
	.db #$24
	.db #$20
	.db #$18
	.db #$10
	.db #$0C
	.db #$08
OBJ_DUCK_DIFF_VALS_GRP:
	.db #$01 ;FMT: [SPEED_B*4]
	.db #$01
	.db #$01
	.db #$01
	.db #$02
	.db #$01
	.db #$01
	.db #$01
	.db #$02
	.db #$01
	.db #$02
	.db #$01
	.db #$02
	.db #$02
	.db #$02
	.db #$01
	.db #$02
	.db #$02
	.db #$02
	.db #$02
	.db #$03
	.db #$02
	.db #$03
	.db #$02
	.db #$03
	.db #$03
	.db #$03
	.db #$03
	.db #$04
	.db #$03
	.db #$04
	.db #$03
	.db #$04
	.db #$04
	.db #$04
	.db #$04
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$06
	.db #$06
	.db #$06
	.db #$06
	.db #$07
	.db #$07
	.db #$07
	.db #$07
PIGEON_TILE+ATTR_INDEX:
	.db #$ED ;format: [TILE,ATTR]
	.db #$40
	.db #$ED
	.db #$40
	.db #$ED
	.db #$C0
	.db #$ED
	.db #$80
	.db #$ED
	.db #$00
	.db #$ED
	.db #$00
	.db #$ED
	.db #$00
	.db #$ED
	.db #$00
	.db #$EE
	.db #$40
	.db #$EE
	.db #$40
	.db #$EE
	.db #$40
	.db #$EE
	.db #$40
	.db #$EE
	.db #$00
	.db #$EE
	.db #$00
	.db #$EE
	.db #$00
	.db #$EE
	.db #$00
PIGEON_DATA_UNK:
	.db #$06
	.db #$05
	.db #$04
	.db #$03
	.db #$03
	.db #$02
	.db #$03
	.db #$03
	.db #$02
	.db #$02
	.db #$02
	.db #$02
	.db #$02
	.db #$01
	.db #$01
	.db #$02
	.db #$01
	.db #$01
	.db #$01
	.db #$01
	.db #$01
	.db #$01
	.db #$01
	.db #$00
	.db #$01
	.db #$01
	.db #$01
	.db #$01
	.db #$00
	.db #$01
	.db #$01
	.db #$01
	.db #$00
	.db #$01
	.db #$01
	.db #$00
	.db #$01
	.db #$00
	.db #$01
	.db #$00
	.db #$BB
	.db #$01
	.db #$00
	.db #$01
	.db #$00
	.db #$BB
	.db #$01
	.db #$00
	.db #$01
	.db #$00
	.db #$BB
	.db #$01
	.db #$00
	.db #$01
	.db #$BB
	.db #$00
	.db #$01
	.db #$BB
	.db #$00
	.db #$00
	.db #$BB
	.db #$00
	.db #$AA
PIGEON_DATA_UNK_0:
	.db #$02
	.db #$02
	.db #$01
	.db #$02
	.db #$02
	.db #$01
	.db #$01
	.db #$01
	.db #$01
	.db #$01
	.db #$00
	.db #$01
	.db #$00
	.db #$01
	.db #$00
	.db #$01
	.db #$00
	.db #$01
	.db #$BB
	.db #$00
	.db #$00
	.db #$01
	.db #$BB
	.db #$00
	.db #$00
	.db #$01
	.db #$BB
	.db #$00
	.db #$00
	.db #$BB
	.db #$01
	.db #$00
	.db #$00
	.db #$BB
	.db #$01
	.db #$00
	.db #$BB
	.db #$00
	.db #$00
	.db #$BB
	.db #$BB
	.db #$BB
	.db #$BB
	.db #$BB
	.db #$BB
	.db #$BB
	.db #$BB
	.db #$BB
	.db #$BB
	.db #$BB
	.db #$AA
PIGEON_DATA_UNK_1:
	.db #$01
	.db #$01
	.db #$00
	.db #$01
	.db #$01
	.db #$01
	.db #$00
	.db #$01
	.db #$00
	.db #$01
	.db #$00
	.db #$00
	.db #$01
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$01
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$01
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$01
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
PIGEON_HIT_TIMER:
	.db #$00
	.db #$06
	.db #$00
	.db #$FF
	.db #$02
	.db #$05
	.db #$02
	.db #$FF
	.db #$08
	.db #$04
	.db #$06
	.db #$FF
	.db #$0E
	.db #$04
	.db #$07
	.db #$FF
	.db #$12
	.db #$05
	.db #$08
	.db #$FF
	.db #$14
	.db #$04
	.db #$0A
	.db #$FF
	.db #$FF
	.db #$00
	.db #$00
	.db #$02
	.db #$FF
	.db #$00
	.db #$00
	.db #$04
	.db #$FF
	.db #$00
	.db #$00
	.db #$06
	.db #$FF
	.db #$00
	.db #$00
	.db #$0A
	.db #$FF
	.db #$00
	.db #$00
	.db #$10
	.db #$FF
	.db #$00
	.db #$00
	.db #$14
PIGEON_DATA_UNK_2:
	.db #$02
	.db #$04
	.db #$06
	.db #$0A
	.db #$0C
	.db #$0E
PIGEON_DATA_UNK_3:
	.db #$01
	.db #$03
	.db #$05
	.db #$07
	.db #$09
	.db #$0B
	.db #$0D
	.db #$0F
SPRITE_X_Y_OFFSETS_LOW:
	.LOW SPRITE_X_Y_OFFSETS_00
SPRITE_X_Y_OFFSETS_HIGH:
	.HIGH SPRITE_X_Y_OFFSETS_00
	.LOW SPRITE_X_Y_OFFSETS_01
	.HIGH SPRITE_X_Y_OFFSETS_01
	.LOW SPRITE_X_Y_OFFSETS_02
	.HIGH SPRITE_X_Y_OFFSETS_02
	.LOW SPRITE_X_Y_OFFSETS_03
	.HIGH SPRITE_X_Y_OFFSETS_03
	.LOW SPRITE_X_Y_OFFSETS_04
	.HIGH SPRITE_X_Y_OFFSETS_04
	.LOW SPRITE_X_Y_OFFSETS_05
	.HIGH SPRITE_X_Y_OFFSETS_05
	.LOW SPRITE_X_Y_OFFSETS_08
	.HIGH SPRITE_X_Y_OFFSETS_08
	.LOW SPRITE_X_Y_OFFSETS_08
	.HIGH SPRITE_X_Y_OFFSETS_08
	.LOW SPRITE_X_Y_OFFSETS_08
	.HIGH SPRITE_X_Y_OFFSETS_08
	.LOW SPRITE_X_Y_OFFSETS_09
	.HIGH SPRITE_X_Y_OFFSETS_09
	.LOW SPRITE_X_Y_OFFSETS_0A
	.HIGH SPRITE_X_Y_OFFSETS_0A
	.LOW SPRITE_X_Y_OFFSETS_0B
	.HIGH SPRITE_X_Y_OFFSETS_0B
	.LOW SPRITE_X_Y_OFFSETS_0C
	.HIGH SPRITE_X_Y_OFFSETS_0C
SPRITE_X_Y_OFFSETS_00:
	.db #$F4 ;X coord.
	.db #$F4 ;Y coord.
	.db #$F4
	.db #$FC
	.db #$F4
	.db #$04
	.db #$FC
	.db #$F4
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$04
	.db #$04
	.db #$F4
	.db #$04
	.db #$FC
	.db #$04
	.db #$04
	.db #$AA ;End of file.
SPRITE_X_Y_OFFSETS_01:
	.db #$F7
	.db #$F5
	.db #$F7
	.db #$FD
	.db #$F7
	.db #$03
	.db #$FF
	.db #$F5
	.db #$FF
	.db #$FD
	.db #$FF
	.db #$03
	.db #$01
	.db #$F5
	.db #$01
	.db #$FD
	.db #$01
	.db #$03
	.db #$AA
SPRITE_X_Y_OFFSETS_02:
	.db #$F9
	.db #$F7
	.db #$F9
	.db #$FF
	.db #$F9
	.db #$01
	.db #$FF
	.db #$F7
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$01
	.db #$AA
SPRITE_X_Y_OFFSETS_03:
	.db #$FA
	.db #$F8
	.db #$FA
	.db #$00
	.db #$FE
	.db #$F8
	.db #$FE
	.db #$00
	.db #$AA
SPRITE_X_Y_OFFSETS_04:
	.db #$FA
	.db #$FA
	.db #$FA
	.db #$FE
	.db #$FE
	.db #$FA
	.db #$FE
	.db #$FE
	.db #$AA
SPRITE_X_Y_OFFSETS_05:
	.db #$FC
	.db #$FC
	.db #$AA
SPRITE_X_Y_OFFSETS_08:
	.db #$FC
	.db #$FC
	.db #$AA
SPRITE_X_Y_OFFSETS_09:
	.db #$F0
	.db #$F0
	.db #$F0
	.db #$F8
	.db #$F0
	.db #$00
	.db #$F0
	.db #$08
	.db #$F8
	.db #$F0
	.db #$F8
	.db #$F8
	.db #$F8
	.db #$00
	.db #$F8
	.db #$08
	.db #$00
	.db #$F0
	.db #$00
	.db #$F8
	.db #$00
	.db #$00
	.db #$00
	.db #$08
	.db #$08
	.db #$F0
	.db #$08
	.db #$F8
	.db #$08
	.db #$00
	.db #$08
	.db #$08
	.db #$AA
SPRITE_X_Y_OFFSETS_0A:
	.db #$F4
	.db #$F5
	.db #$F4
	.db #$FD
	.db #$F4
	.db #$03
	.db #$FC
	.db #$F5
	.db #$FC
	.db #$FD
	.db #$FC
	.db #$03
	.db #$04
	.db #$F5
	.db #$04
	.db #$FD
	.db #$04
	.db #$03
	.db #$AA
SPRITE_X_Y_OFFSETS_0B:
	.db #$F5
	.db #$F7
	.db #$F5
	.db #$FF
	.db #$F5
	.db #$01
	.db #$FD
	.db #$F7
	.db #$FD
	.db #$FF
	.db #$FD
	.db #$01
	.db #$03
	.db #$F7
	.db #$03
	.db #$FF
	.db #$03
	.db #$01
	.db #$AA
SPRITE_X_Y_OFFSETS_0C:
	.db #$F6
	.db #$F8
	.db #$F6
	.db #$00
	.db #$FE
	.db #$F8
	.db #$FE
	.db #$00
	.db #$02
	.db #$F8
	.db #$02
	.db #$00
	.db #$AA
BONUS_SCORES_HIGH:
	.db #$01
	.db #$01
	.db #$02
	.db #$03
BONUS_SCORES_LOW:
	.db #$00
	.db #$50
	.db #$00
	.db #$00
TBL_DUCK_INDEXES:
	.db #$00 ;FMT: [BLK_VAL,BLUE_VAL/DISK_VAL,RED_VAL]
	.db #$02
	.db #$03
	.db #$01
	.db #$04
	.db #$06
	.db #$02
	.db #$05
	.db #$07
TBL_DUCK_SCORES:
	.db #$05 ;Points per target from above. ##00
	.db #$08
	.db #$10
	.db #$15
	.db #$16
	.db #$20
	.db #$24
	.db #$30
HITS_REQUIRED_FOR_LEVEL:
	.db #$06 ;Value
	.db #$06
	.db #$06
	.db #$06
	.db #$06
	.db #$06
	.db #$06
	.db #$06
	.db #$06
	.db #$06
	.db #$07
	.db #$07
	.db #$08
	.db #$08
	.db #$09
	.db #$09
	.db #$09
	.db #$09
	.db #$09
	.db #$0A
	.db #$FF ;EOF mark.
LEVEL_DATA_UNK_0:
	.db #$00
	.db #$08
	.db #$10
	.db #$18
	.db #$18
	.db #$20
	.db #$20
	.db #$28
TIMER_9D_STUFF?:
	.db #$28 ;Not sure yet.
	.db #$01
	.db #$80
	.db #$00
	.db #$00
	.db #$AA ;rests index to 0.
	.db #$01
	.db #$40
	.db #$02
	.db #$10
	.db #$03
	.db #$08
	.db #$02
	.db #$10
	.db #$03
	.db #$08
	.db #$02
	.db #$10
	.db #$03
	.db #$08
	.db #$02
	.db #$10
	.db #$03
	.db #$08
	.db #$00
MESSAGES_LOW:
	.db #$00 ;PART OF ABOVE 
MESSAGES_HIGH:
	.db #$AA ;PART OF 9D STUFF.
	.LOW MESSAGE_ROUND ;actual first index. 0 does different in this code.
	.HIGH MESSAGE_ROUND
	.LOW MESSAGE_UNK
	.HIGH MESSAGE_UNK
	.LOW MESSAGE_UNK_0
	.HIGH MESSAGE_UNK_0
	.LOW MESSAGE_GOOD
	.HIGH MESSAGE_GOOD
	.LOW MESSAGE_PERFECT
	.HIGH MESSAGE_PERFECT
	.LOW MESSAGE_FLYAWAY
	.HIGH MESSAGE_FLYAWAY
	.LOW MESSAGE_PAUSE
	.HIGH MESSAGE_PAUSE
	.LOW MESSAGE_GAME_OVER
	.HIGH MESSAGE_GAME_OVER
MESSAGE_ROUND:
	.db #$CD
	.db #$24
	.db #$57
	.db #$FF
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$1A
	.db #$D8
	.db #$1B ;text here.
	.db #$18
	.db #$1E
	.db #$17
	.db #$0D
	.db #$21
	.db #$D8
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$21
	.db #$D8
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$21
	.db #$23
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FD
MESSAGE_UNK:
	.db #$EE
	.db #$10
	.db #$35
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$10
	.db #$18
	.db #$FE
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
MESSAGE_UNK_0:
	.db #$EF
	.db #$04
	.db #$23
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
MESSAGE_GOOD:
	.db #$CD
	.db #$24
	.db #$57
	.db #$FF
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$1A
	.db #$D8
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$21
	.db #$D8
	.db #$10 ;text here.
	.db #$18
	.db #$18
	.db #$0D
	.db #$FE
	.db #$21
	.db #$D8
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$21
	.db #$23
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FD
MESSAGE_PERFECT:
	.db #$CC
	.db #$33
	.db #$5A
	.db #$FF
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$1A
	.db #$D8
	.db #$19 ;text here.
	.db #$0E
	.db #$1B
	.db #$0F
	.db #$0E
	.db #$0C
	.db #$1D
	.db #$FE
	.db #$21
	.db #$D8
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$21
	.db #$D8
	.db #$B7
	.db #$B7 ;text here, technically.
	.db #$B7 ;overwritten for bonus.
	.db #$00
	.db #$00
	.db #$00
	.db #$B7
	.db #$B7
	.db #$21
	.db #$23
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FD
MESSAGE_FLYAWAY:
	.db #$EC
	.db #$1F
	.db #$3A
	.db #$FF
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$1A
	.db #$D8
	.db #$0F ;text here.
	.db #$15
	.db #$22
	.db #$B7
	.db #$0A
	.db #$20
	.db #$0A
	.db #$22
	.db #$21
	.db #$23
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FD
MESSAGE_PAUSE:
	.db #$CC
	.db #$33
	.db #$5A
	.db #$24
	.db #$FF
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$1A
	.db #$24
	.db #$24
	.db #$24
	.db #$D8
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$21
	.db #$24
	.db #$24
	.db #$24
	.db #$D8
	.db #$19 ;text here.
	.db #$0A
	.db #$1E
	.db #$1C
	.db #$0E
	.db #$21
	.db #$24
	.db #$24
	.db #$24
	.db #$D8
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$21
	.db #$24
	.db #$24
	.db #$24
	.db #$23
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FD
	.db #$24
	.db #$24
MESSAGE_GAME_OVER:
	.db #$AB
	.db #$38
	.db #$5B
	.db #$FF
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$13
	.db #$1A
	.db #$D8
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$21
	.db #$D8
	.db #$10 ;text here.
	.db #$0A
	.db #$16
	.db #$0E
	.db #$B7
	.db #$18
	.db #$1F
	.db #$0E
	.db #$1B
	.db #$21
	.db #$D8
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$B7
	.db #$21
	.db #$23
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FC
	.db #$FD
UNK_OBJ_DATA_OBJ_STATE_2_00:
	.db #$9C
	.db #$18
	.db #$14
	.db #$10
	.db #$01
	.db #$10
	.db #$02
	.db #$20
	.db #$03
	.db #$08
	.db #$02
	.db #$08
	.db #$01
	.db #$18
	.db #$00
	.db #$10
	.db #$0E
	.db #$08
	.db #$0D
	.db #$20
	.db #$0C
	.db #$08
	.db #$0D
	.db #$08
	.db #$0C
	.db #$B0
	.db #$0B
	.db #$80
	.db #$03
	.db #$40
	.db #$02
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_01:
	.db #$88
	.db #$10
	.db #$12
	.db #$28
	.db #$0F
	.db #$08
	.db #$00
	.db #$10
	.db #$01
	.db #$08
	.db #$02
	.db #$48
	.db #$03
	.db #$20
	.db #$04
	.db #$70
	.db #$0C
	.db #$30
	.db #$0D
	.db #$30
	.db #$0E
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_02:
	.db #$90
	.db #$20
	.db #$12
	.db #$60
	.db #$0D
	.db #$90
	.db #$03
	.db #$78
	.db #$02
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_03:
	.db #$78
	.db #$20
	.db #$13
	.db #$40
	.db #$0F
	.db #$10
	.db #$0E
	.db #$20
	.db #$0D
	.db #$18
	.db #$0B
	.db #$20
	.db #$0A
	.db #$50
	.db #$06
	.db #$28
	.db #$04
	.db #$38
	.db #$03
	.db #$78
	.db #$02
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_04:
	.db #$80
	.db #$10
	.db #$12
	.db #$20
	.db #$0D
	.db #$08
	.db #$0E
	.db #$08
	.db #$0F
	.db #$20
	.db #$03
	.db #$10
	.db #$02
	.db #$08
	.db #$0E
	.db #$20
	.db #$0D
	.db #$08
	.db #$0E
	.db #$08
	.db #$0F
	.db #$08
	.db #$01
	.db #$08
	.db #$03
	.db #$30
	.db #$04
	.db #$40
FRAME_14_DATA_01:
	.db #$05
	.db #$80
	.db #$0B
	.db #$30
	.db #$0E
	.db #$60
	.db #$0F
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_05:
	.db #$B8
	.db #$08
	.db #$14
	.db #$10
	.db #$04
	.db #$08
	.db #$03
	.db #$08
	.db #$02
	.db #$08
	.db #$01
	.db #$08
	.db #$00
	.db #$08
FRAME_2_DATA_03:
	.db #$0E
	.db #$08
	.db #$0D
	.db #$08
	.db #$0C
	.db #$50
	.db #$0B
	.db #$60
	.db #$0C
	.db #$10
	.db #$0D
	.db #$40
	.db #$02
	.db #$70
	.db #$01
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_06:
	.db #$70
	.db #$18
	.db #$12
	.db #$40
	.db #$0D
	.db #$10
	.db #$0F
	.db #$10
	.db #$02
	.db #$30
	.db #$04
	.db #$20
	.db #$05
	.db #$40
	.db #$03
	.db #$20
	.db #$04
	.db #$20
	.db #$03
	.db #$18
	.db #$02
	.db #$20
	.db #$01
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_07:
	.db #$B0
	.db #$10
	.db #$14
	.db #$28
	.db #$02
	.db #$18
	.db #$01
	.db #$30
	.db #$00
	.db #$10
	.db #$0F
	.db #$50
	.db #$0B
	.db #$60
	.db #$0C
	.db #$20
	.db #$0B
	.db #$70
	.db #$04
	.db #$80
	.db #$05
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_08:
	.db #$5A
	.db #$08
	.db #$13
	.db #$10
	.db #$02
	.db #$20
	.db #$0D
	.db #$10
	.db #$03
	.db #$10
	.db #$04
	.db #$10
	.db #$03
	.db #$58
	.db #$0D
	.db #$28
	.db #$03
	.db #$48
	.db #$04
	.db #$10
	.db #$03
	.db #$48
	.db #$0D
	.db #$80
	.db #$03
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_09:
	.db #$46
	.db #$20
	.db #$12
	.db #$20
	.db #$0E
	.db #$38
	.db #$04
	.db #$18
	.db #$02
	.db #$10
	.db #$04
	.db #$20
	.db #$06
	.db #$08
	.db #$05
	.db #$18
	.db #$04
	.db #$18
	.db #$02
	.db #$40
	.db #$01
	.db #$40
	.db #$00
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_0A:
	.db #$D0
	.db #$2A
	.db #$14
	.db #$30
	.db #$0C
	.db #$20
	.db #$0B
	.db #$20
	.db #$0C
	.db #$38
	.db #$0B
	.db #$48
	.db #$0C
	.db #$40
	.db #$02
	.db #$30
	.db #$0C
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_0B:
	.db #$70
	.db #$10
	.db #$12
	.db #$10
	.db #$0D
	.db #$20
	.db #$0E
	.db #$10
	.db #$0F
	.db #$10
	.db #$00
	.db #$30
	.db #$02
	.db #$10
	.db #$04
	.db #$10
	.db #$05
	.db #$60
	.db #$05
	.db #$20
	.db #$0B
	.db #$40
	.db #$0C
	.db #$08
	.db #$0D
	.db #$70
	.db #$03
	.db #$30
	.db #$02
	.db #$18
	.db #$00
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_0C:
	.db #$C0
	.db #$18
	.db #$12
	.db #$10
	.db #$0D
	.db #$40
	.db #$0B
	.db #$38
	.db #$0D
	.db #$08
	.db #$0B
	.db #$08
	.db #$0C
	.db #$10
	.db #$0D
	.db #$70
	.db #$03
	.db #$40
	.db #$02
	.db #$40
	.db #$01
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_0D:
	.db #$90
	.db #$18
	.db #$14
	.db #$20
	.db #$02
	.db #$28
	.db #$0D
	.db #$20
	.db #$0B
	.db #$20
	.db #$0B
	.db #$08
	.db #$0C
	.db #$10
	.db #$0D
	.db #$20
	.db #$03
	.db #$20
	.db #$05
	.db #$20
	.db #$04
	.db #$10
	.db #$02
	.db #$10
	.db #$03
	.db #$70
	.db #$0D
	.db #$40
	.db #$04
	.db #$50
	.db #$03
	.db #$20
	.db #$02
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_0E:
	.db #$58
	.db #$1C
	.db #$14
	.db #$24
	.db #$02
	.db #$08
	.db #$00
	.db #$48
	.db #$0C
	.db #$38
	.db #$0E
	.db #$50
	.db #$07
	.db #$30
	.db #$05
	.db #$30
	.db #$04
	.db #$28
	.db #$0D
	.db #$20
FRAME_1_DATA_03:
	.db #$02
	.db #$80
	.db #$01
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_0F:
	.db #$50
	.db #$20
	.db #$12
	.db #$20
	.db #$0D
	.db #$40
	.db #$03
	.db #$30
	.db #$0C
	.db #$40
	.db #$03
	.db #$30
	.db #$04
	.db #$38
	.db #$05
	.db #$08
	.db #$0B
	.db #$28
	.db #$0C
	.db #$08
	.db #$0D
	.db #$40
	.db #$03
	.db #$4A
	.db #$04
	.db #$FF
	.db #$08
	.db #$00
UNK_OBJ_DATA_OBJ_STATE_2_10:
	.db #$40
	.db #$E0
	.db #$01
UNK_OBJ_DATA_OBJ_STATE_2_11:
	.db #$80
	.db #$E0
	.db #$02
UNK_OBJ_DATA_OBJ_STATE_2_12:
	.db #$D0
	.db #$E0
	.db #$0E
UNK_OBJ_DATA_OBJ_STATE_2_13:
	.db #$38
	.db #$E0
	.db #$01
UNK_OBJ_DATA_OBJ_STATE_2_14:
	.db #$A0
	.db #$E0
	.db #$0D
UNK_OBJ_DATA_OBJ_STATE_2_15:
	.db #$30
	.db #$E0
	.db #$03
UNK_OBJ_DATA_OBJ_STATE_2_16:
	.db #$B0
	.db #$E0
	.db #$0E
UNK_OBJ_DATA_OBJ_STATE_2_17:
	.db #$90
	.db #$E0
	.db #$0F
UNK_OBJ_DATA_OBJ_STATE_2_18:
	.db #$40
	.db #$E0
	.db #$03
UNK_OBJ_DATA_OBJ_STATE_2_19:
	.db #$80
	.db #$E0
	.db #$03
UNK_OBJ_DATA_OBJ_STATE_2_1A:
	.db #$C8
	.db #$E0
	.db #$0E
UNK_OBJ_DATA_OBJ_STATE_2_1B:
	.db #$50
	.db #$E0
	.db #$0F
UNK_OBJ_DATA_OBJ_STATE_2_1C:
	.db #$B8
	.db #$E0
	.db #$0D
UNK_OBJ_DATA_OBJ_STATE_2_1D:
	.db #$20
	.db #$E0
	.db #$03
UNK_OBJ_DATA_OBJ_STATE_2_1E:
	.db #$48
	.db #$E0
	.db #$01
UNK_OBJ_DATA_OBJ_STATE_2_1F:
	.db #$B8
	.db #$E0
	.db #$0F
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
FRAME_15_DATA_03:
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
FRAME_17_DATA_07:
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
FRAME_12_DATA_03:
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
FRAME_12_DATA_01:
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
FRAME_15_DATA_01:
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
FRAME_11_DATA_05:
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
FRAME_13_DATA_01:
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
FRAME_A_DATA_01:
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
FRAME_14_DATA_05:
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
FRAME_B_DATA_01:
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
ANIM_FRAME_FILE_PTR_15_0:
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
ANIM_FRAME_FILE_PTR_03_0:
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
SOUND_DATA_TIMERS_HIGH:
	.db #$07
SND_TIMERS_LOW_DATA:
	.db #$F0
	.db #$00
	.db #$00
	.db #$00
	.db #$D4
	.db #$00
	.db #$C8
	.db #$00
	.db #$BD
	.db #$00
	.db #$B2
	.db #$00
	.db #$A8
	.db #$00
	.db #$9F
	.db #$00
	.db #$96
	.db #$00
	.db #$8D
	.db #$00
	.db #$85
	.db #$00
	.db #$7E
	.db #$00
	.db #$70
	.db #$01
	.db #$AB
	.db #$01
	.db #$93
	.db #$01
	.db #$7C
	.db #$01
	.db #$67
	.db #$01
	.db #$52
	.db #$01
	.db #$3F
	.db #$01
	.db #$2D
	.db #$01
	.db #$1C
	.db #$01
	.db #$0C
	.db #$00
	.db #$FD
	.db #$00
	.db #$EE
	.db #$00
	.db #$E1
	.db #$03
	.db #$57
	.db #$02
	.db #$F9
	.db #$02
	.db #$CF
	.db #$02
	.db #$A6
	.db #$02
	.db #$80
	.db #$02
	.db #$5C
	.db #$02
	.db #$3A
	.db #$02
	.db #$1A
	.db #$01
	.db #$FC
	.db #$01
	.db #$DF
	.db #$01
	.db #$C4
	.db #$00
	.db #$69
	.db #$00
	.db #$63
	.db #$00
	.db #$53
	.db #$00
	.db #$4A
SND_DATA_DC[]:
	.db #$03
	.db #$06
	.db #$0C
	.db #$18
	.db #$30
	.db #$12
	.db #$24
	.db #$04
	.db #$08
	.db #$10
	.db #$20
	.db #$40
	.db #$18
	.db #$30
SND_WRITE_@XY_TO_SQ1:
	LDA #$00 ;Setup $4000, SQ1
	BEQ SND_SETUP_RTN
SND_WRITE_@XY_TO_TRI:
	LDA #$08 ;Setup $4008, TRI
	BNE SND_SETUP_RTN
SND_WRITE_@XY_TO_NOISE:
	LDA #$0C ;Setup $400C, NOISE
	BNE SND_SETUP_RTN
SND_WRITE_@XY_TO_SQ2:
	LDA #$04 ;Setup $4004, SQ2
SND_SETUP_RTN:
	STA SND_PTR_REG_WRITE ;low byte
	LDA #$40
	STA SND_PTR_REG_WRITE+1 ;high byte
	STX SND_PTR_REG_WRITE_DATA ;low
	STY SND_PTR_REG_WRITE_DATA+1 ;high
	LDY #$00
LOOP_4_BYTES:
	LDA (SND_PTR_REG_WRITE_DATA),Y ;Get data.
	STA (SND_PTR_REG_WRITE),Y ;Write to reg.
	INY  ;++
	TYA  ;Put to A?
	CMP #$04 ;Compare to #$04
	BNE LOOP_4_BYTES ;Not done, need to write 4 bytes.
	RTS  ;Leave
SOUND_SETUP_E5,F8-FF,D0-D3,D8-DB:
	STA SND_E6_LOADED? ;Store..
	LDA L_3846,Y ;Get value...
	TAY  ;Replace index with it.
	LDA L_3846,Y ;Get value.
	STA SND_E5 ;Store
	LDA L_3847,Y ;Val..
	STA SND_F8 ;Store.
	LDA L_3848,Y ;Val
	STA SND_F9 ;Store
	LDA L_3849,Y ;Val
	STA SND_PTR_FA_UNK ;Store
	LDA L_384A,Y ;Val
	STA SND_FB ;Store
	LDA L_384B,Y ;Val
	STA SND_FC_IND? ;Store
	LDA L_384C,Y ;Val
	STA SNF_FD ;Store
	LDA L_384D,Y ;Val
	STA SND_FE ;Store
	LDA L_384E,Y ;Val
	STA SND_FF ;Store
	LDA #$01 ;Enable?
	STA SND_D8
	STA SND_D9
	STA SND_DA
	STA SND_DB
	LDA #$00 ;Not finished?
	STA SND_PLAY_F3
	STA SND_D0
	STA SND_D1
	STA SND_D2
	STA SND_D3
	STA APU_DMC_LOAD ;Sets output level to 0.
	RTS 
DISABLE_SQ1+2.SWEEP_X>$E9,Y>$EA:
	LDA #$7F
	STA APU_PULSE1_SWEEP
	STA APU_PULSE2_SWEEP
	STX SND_SQ1.DUTY ;Set.
	STY SND_SQ2.DUTY
	RTS  ;RTS
SND_DATA_TRI:
	.db #$13
	.db #$7F
	.db #$3E
	.db #$F0
SND_TRI_DOG_LAUGH_DATA:
	.db #$4F ;DOGS LAUGH?
	.db #$53
	.db #$58
	.db #$5E
	.db #$63
	.db #$69
	.db #$70
	.db #$76
	.db #$7E
	.db #$85
	.db #$8D
	.db #$90
	.db #$92
	.db #$93
L_33EF:
	.db #$92
	.db #$D5
	.db #$40
	.db #$C0
SND_SQR_DATA:
	.db #$B2
	.db #$DF
	.db #$FF
	.db #$80
SND_NOISE_INDIRECT_DAT:
	.db #$02
	.db #$7F
	.db #$0F
	.db #$08
	.db #$00
	.db #$7F
	.db #$03
	.db #$08
	.db #$FF
SND_DATA_NOISE_COUNTER:
	.db #$10
SOUND_DATA_NOISE_PERIOD:
	.db #$00
SOUND_DATA_NOISE_LENGTH:
	.db #$18
	.db #$10
FRAME_A_DATA_03:
	.db #$01
	.db #$18
	.db #$00
	.db #$01
	.db #$88
	.db #$06
	.db #$02
	.db #$40
	.db #$05
	.db #$02
	.db #$C0
SOUND_PTR_CODE+OTHER:
	LDA SND_F9
	BEQ UPDATE_FB
	DEC SND_D8 ;F9 tied with D8. Counter, looks like.
	BNE UPDATE_FB
	LDX #$00 ;For sub.
	LDA #$23
	STA SND_PTR_RUN_CODE_0612 ;Setup.
	LDA #$2E
	STA SND_PTR_RUN_CODE_0610 ;Setup.
	LDY SND_D0 ;Get index
	INC SND_D0 ;Update to next.
	LDA (SND_F8),Y ;Get data at ptr.
	BEQ DATA_WAS_NULL
	JMP SOUND_UPDATE_E0/D4/D0,X_AND_JMP_0610/0612 ;Not null, do this.
	TYA  ;Pointed to by SND_PTR_RUN_CODE
	BPL Y_WAS_POSITIVE
	JSR SOUND_A+E5_TO_DC,X ;Write DC,X from A+E5
	LDY SND_D0 ;Get index
	INC SND_D0 ;Next
	LDA (SND_F8),Y ;Get data.
Y_WAS_POSITIVE:
	JSR SQ1_TIMER_WRITE
	BNE TIMER_WAS_WRITTEN_IN_JSR ;Tests if timer was written because BEQ RTS's from it.
	LDY #$10 ;Gets store to SQ1.DUTY, constant volume.
	BNE STORE_SQ1.DUTY
DATA_WAS_NULL:
	LDA #$00 ;Clear data.
	JMP SOUND_HALT/WRITE ;Do
TIMER_WAS_WRITTEN_IN_JSR:
	LDY SND_SQ1.DUTY ;Load duty from E9 if timer wrote.
STORE_SQ1.DUTY:
	STY APU_PULSE1_DUTY ;Store to duty.
	LDA SND_DC ;Move this.
	STA SND_D8
UPDATE_FB:
	LDA SND_FB
	BEQ FB_NO_UPDATE ;No update
	DEC SND_D9 ;Dec timer
	BNE FB_NO_UPDATE
	LDX #$01 ;Init X for sub
	LDY SND_D1 ;Get index
	INC SND_D1 ;Next
	LDA (SND_PTR_FA_UNK),Y ;Get data
	BPL DATA_IS_POSITIVE
	JSR SOUND_A+E5_TO_DC,X ;Do this if not.
	LDY SND_D1 ;Get index
	INC SND_D1 ;Next
	LDA (SND_PTR_FA_UNK),Y ;Get data
DATA_IS_POSITIVE:
	JSR SQ2_TIMER_WRITE ;Write SQ2
	BNE SQ2_TIMER_WAS_WRITTEN
	LDY #$10 ;Constant volume if not written.
	BNE WRITE_SQ2.DUTY ;Always taken
SQ2_TIMER_WAS_WRITTEN:
	LDY SND_SQ2.DUTY ;To move.
WRITE_SQ2.DUTY:
	STY APU_PULSE2_DUTY ;Store duty
	LDA UNK_DD ;Move
	STA SND_D9
FB_NO_UPDATE:
	LDA SNF_FD
	BEQ SND_FD_NO_UPDATE ;Nope.
	DEC SND_DA
	BNE SND_FD_NO_UPDATE ;Not yet
	LDX #$02 ;For sub
	LDA #$9B
	STA SND_PTR_RUN_CODE_0610 ;Move ptr, still not sure purpose.
	LDA #$92
	STA SND_PTR_RUN_CODE_0612 ;Store.
	LDY SND_D2 ;Get index
	INC SND_D2 ;++
	LDA (SND_FC_IND?),Y ;Get data
	JMP SOUND_UPDATE_E0/D4/D0,X_AND_JMP_0610/0612 ;Do this.
	TYA  ;SND_PTR_RUN_CODE, Y to A
	BPL Y_WAS_POSITIVE_0
	JSR SOUND_A+E5_TO_DC,X ;Y negative, run.
	LDY SND_E4
	BEQ E4_IS_ZERO
	LDA #$FF ;Counter
	BNE WRITE_TRI.CNTR ;Always taken.
E4_IS_ZERO:
	CLC 
	ADC #$FE ;Sub
	ASL A
	ASL A ;Mul by 4
	CMP #$3C
	BCC WRITE_TRI.CNTR ;if <3C, don't clamp to $3C
	LDA #$3C ;Clamp
WRITE_TRI.CNTR:
	STA APU_TRI_COUNTER ;Store to TRI[0]
	STA SND_TRI.CNTR_RELOAD ;Store stored.
	LDY SND_D2 ;Get index
	INC SND_D2 ;Next
	LDA (SND_FC_IND?),Y ;Get data
Y_WAS_POSITIVE_0:
	JSR TRI_TIMER_WRITE ;Write A to timer.
	BNE TIMER_WAS_WRITTEN
	LDY #$00 ;Timer not written.
	BEQ SND_WRITE_TRI.CNTR_APU
TIMER_WAS_WRITTEN:
	LDY SND_TRI.CNTR_RELOAD ;Write to RAM
SND_WRITE_TRI.CNTR_APU:
	STY APU_TRI_COUNTER ;Write Y to TRI.CNTR
	LDA SND_DE ;Move
	STA SND_DA
SND_FD_NO_UPDATE:
	LDA SND_FF ;Get
	BEQ NO_SND_UPDATE_FF
	DEC SND_DB ;Timer
	BNE NO_SND_UPDATE_FF ;Not yet
	LDX #$03 ;Index for sub
	LDA #$EE
	STA SND_PTR_RUN_CODE_0610 ;Code to run
	LDA #$E5
	STA SND_PTR_RUN_CODE_0612 ;Code to run 2
	LDY SND_D3 ;Get index
	INC SND_D3 ;++
	LDA (SND_FE),Y ;Get data
	JMP SOUND_UPDATE_E0/D4/D0,X_AND_JMP_0610/0612 ;Do
	TYA  ;Test Y
	BPL Y_WAS_POSITIVE_1
	JSR SOUND_A+E5_TO_DC,X ;Do
FRAME_B_DATA_03:
	LDY SND_D3 ;Index get
	INC SND_D3 ;++
	LDA (SND_FE),Y ;Get data
Y_WAS_POSITIVE_1:
	JSR NOISE_RTN? ;Could have put the code inline and branched around lol. Only ref here.
	LDA SND_DF ;Move
	STA SND_DB
NO_SND_UPDATE_FF:
	RTS  ;Leave all channel update?
NOISE_RTN?:
	TAY  ;A to Y
	LDA SND_PLAY_F3 ;Get F3
	CMP #$02
	BEQ RTS_27
	LDA SND_DATA_NOISE_COUNTER,Y ;Move
	STA APU_NOISE_COUNTER
	LDA SOUND_DATA_NOISE_PERIOD,Y ;Move
	STA APU_NOISE_PERIOD
	LDA SOUND_DATA_NOISE_LENGTH,Y ;Move
	STA APU_NOISE_LENGTH
RTS_27:
	RTS  ;Leave
SOUND_UPDATE_E0/D4/D0,X_AND_JMP_0610/0612:
	TAY  ;A to Y
	CMP #$FF ;Is FF?
	BEQ WAS_FF
	AND #$C0 ;Not sure why
	CMP #$C0
	BEQ WAS_C0
	JMP (SND_PTR_RUN_CODE_0610) ;JMP to sound code.
WAS_FF:
	LDA SND_E0,X ;Get
	BEQ JMP_PTR_0612 ;If 0
	DEC SND_E0,X ;Dec
	LDA SND_D4,X ;State move?
	STA SND_D0,X
	BNE JMP_PTR_0612 ;Always taken?
WAS_C0:
	TYA  ;Y to A
	AND #$3F ;And bits.
	STA SND_E0,X ;Store to
	DEC SND_E0,X ;Dec
	LDA SND_D0,X ;Move
	STA SND_D4,X
JMP_PTR_0612:
	JMP (SND_PTR_RUN_CODE_0612)
SOUND_A+E5_TO_DC,X:
	AND #$07 ;Get bottom bits.
	CLC 
	ADC SND_E5 ;Add to E5
	TAY  ;Put to Y
	LDA SND_DATA_DC[],Y ;Move
	STA SND_DC,X
	RTS  ;RTS
SQ1_TIMER_WRITE:
	LDX #$00
LOOP_WRITE_TIMER:
	TAY  ;A is index of data to write to timer.
	LDA SND_TIMERS_LOW_DATA,Y
	BEQ RTS_26 ;If 0, n ot enabled.
	STA APU_PULSE1_TIMERL,X ;Store
	LDA SOUND_DATA_TIMERS_HIGH,Y
	ORA #$08 ;Always set at least one length? Idk why.
	STA APU_PULSE1_TIMERH,X ;Store timer high.
RTS_26:
	RTS  ;Leave
SQ2_TIMER_WRITE:
	LDX #$04
	BNE LOOP_WRITE_TIMER
TRI_TIMER_WRITE:
	LDX #$08
	BNE LOOP_WRITE_TIMER
PLAY_SOUNDS:
	LDA #$C0 ;enable 5-step, disable irq. bug?
	STA APU_FRAMECOUNTER
	JSR SND_PLAY_F0/F3_0
	JSR SND_PLAY_F0/F3
	JSR SND_PLAY_F1/F2
	JSR SND_PLAY_DMC ;DMC
	LDA #$00 ;Clear
	BEQ SET_F0/F1/F2_FROM_A
#F4->$611+613:
	LDA #$F4 ;as of 15 commits on git, still have no idea wtf this is.
	STA UNK_0613
	STA UNK_0611
	RTS 
SET_F0/F1/F2_FROM_A:
	STA SND_PLAY_F0 ;Set all.
	STA SND_PLAY_F1
	STA SND_PLAY_F2
	RTS 
SND_PLAY_DMC:
	LDA SND_PLAY_F2 ;DMA flags on 0000.00XX
	LSR A
	BCS SND_PLAY_DMC_FB00 ;0000.000X
	LSR A
	BCS SND_PLAY_DMC_FD00 ;0000.000X
	RTS 
SND_PLAY_DMC_FD00:
	LDA #$20 ;512 bytes in length
	LDX #$F4 ;FD00
	LDY #$0F ;playback rate
	BNE PLAY_DMC_SAMPLE(AXY)
SND_PLAY_DMC_FB00:
	LDA #$20 ;512 bytes
	LDX #$EC ;FB00
	LDY #$0E ;rate
PLAY_DMC_SAMPLE(AXY):
	STA APU_DMC_SAMLEN
	STX APU_DMC_SAMADDR
	STY APU_DMC_IRQ
	LDA #$1F
	STA APU_STATUS ;turn on DMC
	RTS  ;Leave
	.db #$9F
	.db #$7F
	.db #$60
	.db #$00
	.db #$9F
	.db #$7F
	.db #$61
	.db #$00
INIT_DOG_LAUGH:
	LDX #$DD ;Uses $F3DD
	LDY #$F3
	JSR SND_WRITE_@XY_TO_TRI
	LDA #$00 ;clear all counters
	STA SND_COUNTER_EB
	STA SND_INDEX_ED
	STA SND_COUNTER_EE
	LDA #$06
	STA SND_COUNTER_EF ;change target init
	LDA #$3E
	STA SND_EC ;dog laugh lenc_l
	LDA #$40
	STA SND_PLAY_F3 ;Enable laugh advance?
L_RTS:
	RTS 
DOG_LAUGH_ADVANCE:
	INC SND_COUNTER_EE ;inc counter
	LDA SND_COUNTER_EE
	CMP #$01
	BNE L_RTS ;never taken, runs every frame. Can rip out.
	LDA #$00
	STA SND_COUNTER_EE ;this is why it runs every time.
	INC SND_COUNTER_EB ;update counter
	LDA SND_COUNTER_EB
	CMP SND_COUNTER_EF ;raise timer target
	BEQ LOWER_LAUGH_FREQ ;if match target, raise freq
	DEC SND_EC ;TRI_TIMERL copy
	DEC SND_EC ;decrease with math
	DEC SND_EC ;this makes it higher pitch
	LDA SND_EC
	STA APU_TRI_TIMERL ;store higher pitch to timer
	RTS 
LOWER_LAUGH_FREQ:
	LDA SND_COUNTER_EF ;update target
	CLC 
	ADC #$06 ;6 updates until we raise length counter again
	STA SND_COUNTER_EF ;store new target
	LDY SND_INDEX_ED ;get update count
	LDA SND_TRI_DOG_LAUGH_DATA,Y ;load timer for this update
	STA APU_TRI_TIMERL ;store data
	STA SND_EC ;Save to raise later
	LDA #$F0
	STA APU_TRI_TIMEH ;load length counter
	INC SND_INDEX_ED ;steps done++
	LDA SND_INDEX_ED
	CMP #$0E ;final step?
	BNE L_RTS ;no, dont clear vars.
	LDA #$00 ;clear state, we're done making laughing sounds
	STA APU_TRI_COUNTER
	STA SND_PLAY_F3
	RTS 
SND_PLAY_F0/F3:
	LDA SND_PLAY_F0 ;Init changes?
	ASL A
	BCS SET_PULSE2_DUTY ;X000.0000
	ASL A
	BCS INIT_DOG_LAUGH ;0X00.0000
	ASL A
	BCS INIT_SQ1_F3F3 ;00X0.0000
	ASL A
	BCS INIT_SQ1_F3EF ;000X.0000
	LDA SND_PLAY_F3 ;Continued state?
	ASL A
	ASL A
	BCS DOG_LAUGH_ADVANCE ;0X00.0000
	ASL A
	BCS SND_WAIT_FRAMES_SET_DTY2 ;00X0.0000
	RTS 
INIT_SQ1_F3EF:
	LDX #$EF ;Ptr
	LDY #$F3
	JSR SND_WRITE_@XY_TO_SQ1 ;Write
	RTS 
INIT_SQ1_F3F3:
	LDX #$F3 ;Ptr
	LDY #$F3
	JSR SND_WRITE_@XY_TO_SQ2 ;Write
	LDA SND_PLAY_F3
	ORA #$20 ;Set bit to wait frames and set SQR2.DUTY
	STA SND_PLAY_F3
	LDA #$00 ;clear counters
	STA SND_COUNTER_EF
	STA SND_COUNTER_EE
L_RTS_0:
	RTS 
SND_WAIT_FRAMES_SET_DTY2:
	INC SND_COUNTER_EE
	LDA SND_COUNTER_EE
	CMP #$02
	BNE L_RTS_0 ;run every 2 frames
	LDA #$00
	STA SND_COUNTER_EE
	INC SND_COUNTER_EF
	LDA SND_COUNTER_EF
	CMP #$A0 ;wait 160*2 runs
	BNE L_RTS_0
SET_PULSE2_DUTY:
	LDA #$10
	STA APU_PULSE2_DUTY ;Set duty.
	LDA SND_PLAY_F3 ;Modifying
	AND #$DF ;XX0X.XXXX
	STA SND_PLAY_F3 ;Store
	RTS 
SETUP_NOISE_PULSE1:
	LDX #$F7
	LDY #$F3
	JSR SND_WRITE_@XY_TO_NOISE
	LDA #$10
	STA APU_PULSE1_DUTY ;set constant volume
	LDA SND_PLAY_F3
	AND #$F0 ;Update XXXX.0000
	STA SND_PLAY_F3
	RTS 
SOUNT_HALT_CLEAR+CLEAR_F3:
	LDA #$00
	STA SND_PLAY_F3
SOUND_HALT/WRITE:
	STA APU_TRI_COUNTER
	STA APU_DMC_LOAD
	STA SND_E6_LOADED?
	STA SND_E4
	LDA #$10
	STA APU_PULSE1_DUTY ;halt length counter
	STA APU_PULSE2_DUTY ;same
	STA APU_NOISE_COUNTER ;same
	RTS 
SND_SETUP_NOISE:
	LDX #$FB ;Ptr
	LDY #$F3
	JSR SND_WRITE_@XY_TO_NOISE ;Write
	LDA #$00
	STA SND_COUNTER_EB
	LDA SND_PLAY_F3
	ORA #$08 ;XXXX.1XXX, Noise enable?
	STA SND_PLAY_F3
RTS_24:
	RTS 
SND_SHOT_PERIOD:
	LDY SND_COUNTER_EB
	LDA NOISE_PERIODS,Y
	STA APU_NOISE_PERIOD
	INC SND_COUNTER_EB
	LDA SND_COUNTER_EB
	CMP #$04
	BNE RTS_24 ;rts
	LDA SND_PLAY_F3
	AND #$FE ;clear bit 0
	STA SND_PLAY_F3
	RTS 
NOISE_PERIODS:
	.db #$00
	.db #$02
	.db #$01
	.db #$00
SND_PLAY_F0/F3_0:
	LDA SND_PLAY_F0
	LSR A
	BCS SOUNT_HALT_CLEAR+CLEAR_F3 ;X000.0000
	LSR A
	BCS SETUP_NOISE_DMC ;0X00.0000
	LSR A
	BCS SETUP_NOISE_PULSE1 ;00X0.0000
	LSR A
	BCS SND_SETUP_NOISE ;000X.0000
	LDA SND_PLAY_F3
	LSR A
	LSR A
	BCS FWD_NOISE_PERIOD+COUNTER ;0X00.0000
	LSR A
	LSR A
	BCS SND_SHOT_PERIOD ;000X.0000
	RTS 
SETUP_NOISE_DMC:
	LDX #$FF
	LDY #$F6
	JSR SND_WRITE_@XY_TO_NOISE
	LDA #$00
	STA SND_EC ;clear whatever these are
	STA SND_INDEX_ED
	STA APU_DMC_LOAD ;clear dmc level
	LDA SND_PLAY_F3
	ORA #$02 ;DMC+NOISE = bit 1
	STA SND_PLAY_F3
RTS_25:
	RTS 
SND_INDIR_UNREF_DATA_NOISE:
	.db #$3F
	.db #$7F
	.db #$0F
	.db #$08
FWD_NOISE_PERIOD+COUNTER:
	INC SND_EC ;Inc
	LDA SND_EC ;Load
	CMP #$02 ;Run every 2nd frame
	BNE RTS_25
	LDA #$00
	STA SND_EC ;Clear
	LDY SND_INDEX_ED ;Get index
	LDA NOISE_PERIOD_DATA,Y ;Move
	STA APU_NOISE_PERIOD
	LDA NOISE_COUNTER_DATA,Y ;Move
	STA APU_NOISE_COUNTER
	INC SND_INDEX_ED ;Next index.
	LDA SND_INDEX_ED
	CMP #$30 ;End value.
	BNE RTS_26_0 ;Leave if not done.
	LDA #$10
	STA APU_NOISE_COUNTER ;Halt length on noise.
	LDA SND_PLAY_F3
	AND #$FD ;XXXX.XX0X, Clear bit.
	STA SND_PLAY_F3 ;Store.
RTS_26_0:
	RTS  ;Leave
NOISE_PERIOD_DATA:
	.db #$0E
	.db #$0B
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$05
	.db #$04
	.db #$04
	.db #$04
	.db #$04
	.db #$04
	.db #$04
	.db #$03
	.db #$03
	.db #$03
	.db #$03
	.db #$03
	.db #$04
	.db #$03
	.db #$02
	.db #$02
	.db #$02
	.db #$02
	.db #$02
	.db #$02
	.db #$02
	.db #$02
	.db #$01
	.db #$01
	.db #$01
	.db #$02
	.db #$02
	.db #$01
	.db #$01
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
NOISE_COUNTER_DATA:
	.db #$3F
	.db #$3F
	.db #$3F
	.db #$3F
	.db #$3F
	.db #$3F
	.db #$3D
	.db #$3C
	.db #$38
	.db #$38
	.db #$38
	.db #$37
	.db #$37
	.db #$37
	.db #$36
	.db #$36
	.db #$34
	.db #$34
	.db #$34
	.db #$34
	.db #$34
	.db #$34
	.db #$34
	.db #$34
	.db #$33
	.db #$33
	.db #$33
	.db #$33
	.db #$33
	.db #$33
	.db #$33
	.db #$33
	.db #$32
	.db #$32
	.db #$32
	.db #$32
	.db #$32
	.db #$32
	.db #$32
	.db #$32
	.db #$32
	.db #$32
	.db #$32
	.db #$32
	.db #$32
	.db #$32
	.db #$32
	.db #$32
SOUND_F5B7@SQ1,F5BB@SQ2:
	LDX #$B7 ;Ptr
	LDY #$F5
	JSR SND_WRITE_@XY_TO_SQ1
	LDX #$BB ;Ptr
	LDY #$F5
SOUND_WRITE_XY_TO_SQ2+RTS:
	JSR SND_WRITE_@XY_TO_SQ2
	RTS 
	.db #$84
	.db #$93
	.db #$70
	.db #$E3
	.db #$84
	.db #$93
	.db #$72
	.db #$E3
SOUND_CLEAR_SQ1.DUTY,WRITE_PTRS:
	LDA #$00
	STA APU_PULSE1_DUTY ;Clear duty.
	LDX #$A0
	LDY #$F7
	JSR SND_WRITE_@XY_TO_SQ1 ;Write ptr
	LDX #$A4
	LDY #$F7
	BNE SOUND_WRITE_XY_TO_SQ2+RTS ;Write and leave.
SETUP_SOUND_A=80,Y=6_86:
	LDY #$06 ;Data set?
	LDA #$80 ;Stored to E6
	BNE SOUND_SETUP_86
Setup_SOUND_A=04,Y=04_C0:
	LDY #$04 ;Data set
	LDA #$04
	BNE SOUND_SETUP_C0 ;Setup.
SETUP_SOUND_A=08,Y=05_C0:
	LDY #$05 ;Data set
	LDA #$08
	BNE SOUND_SETUP_C0
SND_PLAY_F1/F2:
	LDA SND_PLAY_F1
	LSR A
	BCS SOUND_SETUP_A=1,Y=0_C0
	LSR A
	BCS SOUND_SETUP_A=2,Y=3_86
	LSR A
	BCS Setup_SOUND_A=04,Y=04_C0
	LSR A
	BCS SETUP_SOUND_A=08,Y=05_C0
	LSR A
	BCS SOUND_SETUP_A=10,Y=1_C0
	LSR A
	BCS SOUND_SETUP_A=20,Y=7_C0
	LSR A
	BCS SOUND_SETUP_A=40,Y=2_C0
	LSR A
	BCS SETUP_SOUND_A=80,Y=6_86
	LDA SND_PLAY_F2
	ASL A
	BCS SOUND_SET_NOISE_CONSTANT_VOLUME+DO_86
	ASL A
	ASL A
	BCS SOUND_F5B7@SQ1,F5BB@SQ2
	ASL A
	BCS SOUND_SETUP_A=EF,Y=9_C0
	ASL A
	BCS SOUND_CLEAR_SQ1.DUTY,WRITE_PTRS
	LDA SND_E6_LOADED?
	BNE JMP_SND_PTR_CODE/OTHER
	RTS 
JMP_SND_PTR_CODE/OTHER:
	JMP SOUND_PTR_CODE+OTHER
SOUND_SETUP_A=1,Y=0_C0:
	LDY #$00 ;Data set
	LDA #$01
	BNE SOUND_SETUP_C0
SOUND_SETUP_A=2,Y=3_86:
	LDY #$03 ;Data set
	LDA #$02
	BNE SOUND_SETUP_86
SOUND_SETUP_A=10,Y=1_C0:
	LDY #$01 ;Data set
	LDA #$10
	BNE SOUND_SETUP_C0
SOUND_SETUP_A=20,Y=7_C0:
	LDY #$07 ;Data set
	LDA #$20
	BNE SOUND_SETUP_C0
SOUND_SETUP_A=40,Y=2_C0:
	LDY #$02 ;Data set
	LDA #$40
	BNE SOUND_SETUP_C0
SOUND_SET_NOISE_CONSTANT_VOLUME+DO_86:
	LDA #$10
	STA APU_NOISE_COUNTER ;Constant Volume.
	LDY #$08 ;Data set
	LDA #$EF
	BNE SOUND_SETUP_86
SOUND_SETUP_C0:
	JSR SOUND_SETUP_E5,F8-FF,D0-D3,D8-DB
	LDX #$C0 ;E9
	LDY #$C0 ;EA
	BNE SOUND_SETUP+CLEAR_E4 ;Extra steps.
SOUND_SETUP_86:
	JSR SOUND_SETUP_E5,F8-FF,D0-D3,D8-DB
	LDX #$86 ;E9
	LDY #$86 ;EA
SOUND_SETUP+CLEAR_E4:
	JSR DISABLE_SQ1+2.SWEEP_X>$E9,Y>$EA
	LDA #$00
	STA SND_E4 ;Clear
	JMP SOUND_PTR_CODE+OTHER
SOUND_SETUP_A=EF,Y=9_C0:
	LDY #$09 ;Data set
	LDA #$EF
	BNE SOUND_SETUP_C0
L_3846:
	.db #$0A
L_3847:
	.db #$13
L_3848:
	.db #$1C
L_3849:
	.db #$25
L_384A:
	.db #$2E
L_384B:
	.db #$37
L_384C:
	.db #$40
L_384D:
	.db #$49
L_384E:
	.db #$52
	.db #$5B
	.db #$07
	.db #$C3
	.db #$F8
	.db #$E2
	.db #$F8
	.db #$08
	.db #$F9
	.db #$1B
	.db #$F9
	.db #$07
	.db #$2F
	.db #$F9
	.db #$60
	.db #$F9
	.db #$A1
	.db #$F9
	.db #$CC
	.db #$F9
	.db #$07
	.db #$AF
	.db #$FA
	.db #$CA
	.db #$FA
	.db #$E4
	.db #$FA
	.db #$F5
	.db #$FA
	.db #$07
	.db #$DA
	.db #$F9
	.db #$F7
	.db #$F9
	.db #$13
	.db #$FA
	.db #$28
	.db #$FA
	.db #$07
	.db #$2F
	.db #$FA
	.db #$3F
	.db #$FA
	.db #$64
	.db #$FA
	.db #$80
	.db #$FA
	.db #$07
	.db #$91
	.db #$FA
	.db #$9A
	.db #$FA
	.db #$A7
	.db #$FA
	.db #$00
	.db #$00
	.db #$07
	.db #$BD
	.db #$F8
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$26
	.db #$F9
	.db #$2A
	.db #$F9
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$AA
	.db #$F8
	.db #$B1
	.db #$F8
	.db #$B7
	.db #$F8
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$FF
	.db #$18
	.db #$FF
	.db #$00
	.db #$00
	.db #$00
	.db #$00
	.db #$85
	.db #$3E
	.db #$3C
	.db #$3A
	.db #$38
	.db #$36
	.db #$00
	.db #$85
	.db #$44
	.db #$42
	.db #$40
	.db #$3E
	.db #$3C
	.db #$85
	.db #$3E
	.db #$3C
	.db #$3A
	.db #$38
	.db #$36
	.db #$C3
	.db #$80
	.db #$10
	.db #$4E
	.db #$FF
	.db #$00
	.db #$84
	.db #$02
	.db #$81
	.db #$02
	.db #$2A
	.db #$2A
	.db #$02
	.db #$2C
	.db #$02
	.db #$2C
	.db #$02
	.db #$2E
	.db #$30
	.db #$02
	.db #$22
	.db #$83
	.db #$02
	.db #$81
	.db #$02
	.db #$08
	.db #$02
	.db #$02
	.db #$06
	.db #$02
	.db #$06
	.db #$02
	.db #$28
	.db #$2A
	.db #$02
	.db #$22
	.db #$00
	.db #$84
	.db #$02
	.db #$81
	.db #$02
	.db #$80
	.db #$46
	.db #$46
	.db #$81
	.db #$46
	.db #$02
	.db #$1C
	.db #$1E
	.db #$20
	.db #$22
	.db #$80
	.db #$28
	.db #$28
	.db #$81
FRAME_18_DATA_01:
	.db #$2A
	.db #$02
	.db #$40
	.db #$83
FRAME_8_DATA_01:
	.db #$02
	.db #$81
	.db #$02
	.db #$30
	.db #$02
	.db #$02
	.db #$80
	.db #$2C
	.db #$2C
	.db #$81
	.db #$1E
	.db #$20
	.db #$22
	.db #$30
	.db #$83
	.db #$02
	.db #$C6
	.db #$80
	.db #$0C
	.db #$02
	.db #$0C
	.db #$02
	.db #$18
	.db #$02
	.db #$18
	.db #$02
	.db #$4C
	.db #$02
	.db #$4C
	.db #$02
	.db #$18
	.db #$02
	.db #$18
	.db #$02
	.db #$FF
	.db #$C6
	.db #$81
	.db #$03
	.db #$03
	.db #$06
	.db #$06
	.db #$03
	.db #$03
	.db #$06
	.db #$03
	.db #$FF
	.db #$81
	.db #$16
	.db #$4A
	.db #$00
	.db #$80
	.db #$02
	.db #$81
	.db #$16
	.db #$4A
	.db #$81
	.db #$0C
	.db #$0C
	.db #$12
	.db #$02
	.db #$0C
	.db #$02
	.db #$12
	.db #$02
	.db #$0E
	.db #$0E
	.db #$16
	.db #$02
	.db #$0E
	.db #$02
	.db #$16
	.db #$02
	.db #$0C
	.db #$0C
	.db #$12
	.db #$02
	.db #$0C
	.db #$02
	.db #$12
	.db #$02
	.db #$12
	.db #$10
	.db #$0E
	.db #$0C
	.db #$08
	.db #$04
	.db #$30
	.db #$02
	.db #$80
	.db #$04
	.db #$04
	.db #$81
	.db #$08
	.db #$0A
	.db #$0C
	.db #$80
	.db #$0E
	.db #$0E
	.db #$81
	.db #$12
	.db #$16
	.db #$18
	.db #$48
	.db #$00
	.db #$80
	.db #$04
	.db #$04
	.db #$81
	.db #$04
	.db #$22
	.db #$28
	.db #$04
	.db #$22
	.db #$24
	.db #$28
	.db #$80
	.db #$2C
	.db #$2C
	.db #$81
	.db #$2C
	.db #$24
	.db #$2C
	.db #$04
	.db #$2C
	.db #$80
	.db #$04
	.db #$30
	.db #$2C
	.db #$28
	.db #$80
	.db #$04
	.db #$04
	.db #$81
	.db #$22
	.db #$24
	.db #$10
	.db #$28
	.db #$2A
	.db #$2C
	.db #$2E
	.db #$80
	.db #$30
	.db #$30
	.db #$81
	.db #$2E
	.db #$2C
	.db #$28
	.db #$80
	.db #$24
	.db #$24
	.db #$81
	.db #$22
	.db #$1E
	.db #$02
	.db #$80
	.db #$22
	.db #$22
	.db #$81
	.db #$24
	.db #$26
	.db #$28
	.db #$80
	.db #$2C
	.db #$2C
	.db #$81
	.db #$30
	.db #$04
	.db #$08
	.db #$0C
	.db #$81
	.db #$1A
	.db #$1A
	.db #$02
	.db #$20
	.db #$22
	.db #$02
	.db #$3E
	.db #$02
	.db #$3A
	.db #$3A
	.db #$02
	.db #$40
	.db #$42
	.db #$02
	.db #$1A
	.db #$42
	.db #$1A
	.db #$32
	.db #$02
	.db #$34
	.db #$36
	.db #$38
	.db #$3A
	.db #$02
	.db #$3E
	.db #$82
	.db #$3E
	.db #$81
	.db #$42
	.db #$44
	.db #$46
	.db #$3E
	.db #$02
	.db #$1A
	.db #$1A
	.db #$02
	.db #$38
	.db #$3A
	.db #$3A
	.db #$02
	.db #$3A
	.db #$1A
	.db #$C8
	.db #$81
	.db #$06
	.db #$03
	.db #$06
	.db #$80
	.db #$09
	.db #$03
	.db #$81
	.db #$03
	.db #$03
	.db #$82
	.db #$0C
	.db #$FF
	.db #$81
	.db #$2A
	.db #$2A
	.db #$28
	.db #$02
	.db #$26
	.db #$02
	.db #$24
	.db #$02
	.db #$85
	.db #$22
	.db #$81
	.db #$24
	.db #$83
	.db #$02
	.db #$81
	.db #$02
	.db #$0E
	.db #$06
	.db #$2A
	.db #$2A
	.db #$28
	.db #$26
	.db #$24
	.db #$85
	.db #$22
	.db #$81
	.db #$24
	.db #$00
	.db #$81
	.db #$24
	.db #$24
	.db #$22
	.db #$02
FRAME_19_DATA_05:
	.db #$20
	.db #$02
	.db #$1E
	.db #$02
	.db #$85
	.db #$3E
	.db #$81
	.db #$40
	.db #$83
	.db #$02
	.db #$81
	.db #$02
	.db #$2A
	.db #$24
	.db #$1C
	.db #$1A
	.db #$46
	.db #$44
	.db #$40
	.db #$85
FRAME_8_DATA_07:
	.db #$3E
	.db #$81
	.db #$40
	.db #$84
	.db #$02
	.db #$85
	.db #$1A
	.db #$81
	.db #$1C
	.db #$83
	.db #$02
	.db #$81
	.db #$02
	.db #$4A
	.db #$14
	.db #$0E
	.db #$0A
	.db #$08
	.db #$06
	.db #$04
	.db #$85
	.db #$1A
	.db #$81
	.db #$1C
	.db #$CC
	.db #$81
	.db #$06
	.db #$06
	.db #$09
	.db #$03
	.db #$FF
	.db #$82
	.db #$08
	.db #$10
	.db #$16
	.db #$48
	.db #$18
	.db #$02
	.db #$12
	.db #$02
	.db #$10
	.db #$0C
	.db #$08
	.db #$06
	.db #$81
	.db #$08
	.db #$00
	.db #$81
	.db #$26
	.db #$26
	.db #$82
	.db #$2C
	.db #$81
	.db #$08
	.db #$0C
	.db #$10
	.db #$16
	.db #$80
	.db #$12
	.db #$12
	.db #$81
	.db #$28
	.db #$10
	.db #$0C
	.db #$30
	.db #$2E
	.db #$30
	.db #$04
	.db #$80
	.db #$2C
	.db #$2C
	.db #$81
	.db #$08
	.db #$28
	.db #$30
	.db #$80
	.db #$26
	.db #$26
	.db #$81
	.db #$2C
	.db #$22
	.db #$2C
	.db #$82
	.db #$26
	.db #$85
	.db #$1E
	.db #$81
	.db #$1E
	.db #$82
	.db #$3C
	.db #$3C
	.db #$85
	.db #$3E
	.db #$81
	.db #$3E
	.db #$85
	.db #$3E
	.db #$81
	.db #$3E
	.db #$85
	.db #$42
	.db #$81
	.db #$42
	.db #$85
	.db #$42
	.db #$81
	.db #$42
	.db #$82
	.db #$1E
	.db #$81
	.db #$1E
	.db #$1E
	.db #$C4
	.db #$81
	.db #$06
	.db #$82
	.db #$0C
	.db #$81
	.db #$06
	.db #$80
	.db #$09
	.db #$03
	.db #$03
	.db #$03
	.db #$09
	.db #$03
	.db #$03
	.db #$03
	.db #$FF
	.db #$81
	.db #$0A
	.db #$24
	.db #$26
	.db #$28
	.db #$2E
	.db #$0A
	.db #$04
	.db #$00
	.db #$80
	.db #$12
	.db #$12
	.db #$81
	.db #$0A
	.db #$0A
	.db #$80
	.db #$20
	.db #$20
	.db #$81
	.db #$28
	.db #$2E
	.db #$2A
	.db #$81
	.db #$20
	.db #$02
	.db #$20
	.db #$28
	.db #$02
	.db #$28
	.db #$2A
	.db #$82
	.db #$02
	.db #$81
	.db #$0E
	.db #$08
	.db #$04
	.db #$2C
	.db #$2A
	.db #$28
	.db #$24
	.db #$1E
	.db #$1C
	.db #$1A
	.db #$1E
	.db #$24
	.db #$2E
	.db #$24
	.db #$2C
	.db #$04
	.db #$28
	.db #$2E
	.db #$08
	.db #$28
	.db #$30
	.db #$0E
	.db #$0C
	.db #$00
	.db #$82
	.db #$02
	.db #$81
	.db #$2C
	.db #$2C
	.db #$02
	.db #$02
	.db #$1E
	.db #$02
	.db #$02
	.db #$02
	.db #$02
	.db #$02
	.db #$44
	.db #$1E
	.db #$24
	.db #$42
	.db #$1A
	.db #$2C
	.db #$44
	.db #$1E
	.db #$24
	.db #$46
	.db #$1E
	.db #$1E
	.db #$28
	.db #$82
	.db #$1E
	.db #$81
	.db #$1E
	.db #$85
	.db #$22
	.db #$24
	.db #$3C
	.db #$82
	.db #$3E
	.db #$81
	.db #$3E
	.db #$85
	.db #$42
	.db #$44
	.db #$46
	.db #$1A
	.db #$C5
	.db #$81
	.db #$06
	.db #$06
	.db #$06
	.db #$09
	.db #$03
FRAME_1A_DATA_05:
	.db #$06
	.db #$FF
	.db #$FF
	.db #$FF
SND_SAMPLE_1:
	.db #$55
	.db #$AD
	.db #$4A
	.db #$55
	.db #$D5
	.db #$AA
	.db #$52
	.db #$55
	.db #$AD
	.db #$2A
	.db #$55
	.db #$B5
	.db #$2A
	.db #$49
	.db #$BB
ANIM_FRAME_FILE_PTR_04_0:
	.db #$55
FRAME_7_DATA_07:
	.db #$45
	.db #$A9
	.db #$6E
	.db #$53
	.db #$44
	.db #$B5
	.db #$6B
	.db #$15
	.db #$A5
	.db #$DA
	.db #$56
	.db #$49
	.db #$A4
	.db #$FB
	.db #$96
	.db #$10
	.db #$D5
	.db #$FA
	.db #$4A
	.db #$50
	.db #$B6
	.db #$5B
	.db #$45
	.db #$B2
	.db #$B6
	.db #$4B
	.db #$01
	.db #$E9
	.db #$FF
	.db #$45
	.db #$00
	.db #$BA
	.db #$FF
	.db #$01
	.db #$90
	.db #$FE
	.db #$57
	.db #$04
	.db #$B5
	.db #$2F
	.db #$01
	.db #$B5
	.db #$FF
	.db #$01
	.db #$44
	.db #$FE
	.db #$1F
	.db #$01
	.db #$B0
	.db #$FF
	.db #$17
	.db #$00
	.db #$E8
	.db #$FF
	.db #$17
	.db #$00
	.db #$FA
	.db #$7F
	.db #$01
	.db #$50
	.db #$FB
	.db #$1B
	.db #$41
	.db #$EA
	.db #$BF
	.db #$04
	.db #$50
	.db #$FB
	.db #$2F
	.db #$01
	.db #$D2
	.db #$FE
	.db #$4B
	.db #$00
	.db #$F8
	.db #$FF
	.db #$05
	.db #$40
	.db #$FB
	.db #$4F
	.db #$40
	.db #$EA
	.db #$2B
	.db #$55
	.db #$B5
	.db #$2B
	.db #$11
	.db #$D1
	.db #$FE
	.db #$45
	.db #$44
	.db #$6D
	.db #$55
	.db #$D5
	.db #$6A
	.db #$45
	.db #$D4
	.db #$FA
	.db #$2A
	.db #$49
	.db #$45
	.db #$51
	.db #$FF
	.db #$6E
	.db #$04
	.db #$A0
	.db #$FE
	.db #$1F
	.db #$01
	.db #$11
	.db #$FB
	.db #$BF
	.db #$12
	.db #$10
	.db #$B5
	.db #$FF
	.db #$4A
	.db #$04
	.db #$C0
	.db #$FE
	.db #$7F
	.db #$00
	.db #$A8
	.db #$FF
	.db #$15
	.db #$95
	.db #$04
	.db #$B8
	.db #$FF
	.db #$4B
	.db #$04
	.db #$E4
	.db #$FE
	.db #$17
	.db #$00
	.db #$F8
	.db #$FF
	.db #$03
	.db #$00
	.db #$EE
	.db #$FF
	.db #$07
	.db #$00
	.db #$E8
	.db #$FF
	.db #$17
	.db #$00
	.db #$E8
	.db #$FF
	.db #$1F
	.db #$00
	.db #$F0
	.db #$FF
	.db #$03
	.db #$00
	.db #$FE
	.db #$FF
	.db #$00
	.db #$80
	.db #$FF
	.db #$1F
	.db #$00
	.db #$F0
	.db #$FF
	.db #$1F
	.db #$00
	.db #$E0
	.db #$FF
	.db #$0F
	.db #$00
	.db #$E8
	.db #$FF
	.db #$07
	.db #$00
	.db #$FE
	.db #$FF
	.db #$01
	.db #$00
	.db #$FF
	.db #$7F
	.db #$00
	.db #$A0
	.db #$FF
	.db #$0F
	.db #$00
	.db #$F8
	.db #$FF
	.db #$03
	.db #$00
	.db #$FE
	.db #$7F
	.db #$00
	.db #$E0
	.db #$FF
	.db #$0F
	.db #$00
	.db #$F8
	.db #$FF
	.db #$01
	.db #$80
	.db #$FF
	.db #$1F
	.db #$00
	.db #$F8
	.db #$FF
	.db #$03
	.db #$00
	.db #$FE
	.db #$1F
	.db #$00
	.db #$FE
	.db #$7F
	.db #$01
	.db #$80
	.db #$FF
	.db #$07
	.db #$C0
	.db #$FE
	.db #$3F
	.db #$00
	.db #$D8
	.db #$7F
	.db #$00
	.db #$F8
	.db #$FF
	.db #$17
	.db #$00
SND_INDIR_DAT:
	.db #$F8
	.db #$0F
	.db #$80
	.db #$FF
	.db #$7F
	.db #$01
	.db #$80
	.db #$7F
	.db #$40
	.db #$B5
	.db #$FE
	.db #$3F
	.db #$00
FRAME_1D_DATA_03:
	.db #$E8
FRAME_1C_DATA_05:
	.db #$03
	.db #$F4
FRAME_19_DATA_03:
	.db #$BF
	.db #$E4
	.db #$5E
	.db #$01
	.db #$10
	.db #$EE
	.db #$BF
	.db #$90
	.db #$FF
	.db #$05
	.db #$00
	.db #$FC
	.db #$7F
FRAME_6_DATA_03:
	.db #$00
	.db #$F8
	.db #$7F
	.db #$00
	.db #$F0
	.db #$FF
	.db #$01
	.db #$E0
	.db #$FF
	.db #$04
	.db #$A0
	.db #$FF
	.db #$07
	.db #$80
	.db #$FE
	.db #$0F
	.db #$00
	.db #$FF
	.db #$1F
	.db #$00
	.db #$F8
	.db #$FF
	.db #$00
	.db #$E0
	.db #$FF
	.db #$05
	.db #$A0
	.db #$FF
	.db #$07
	.db #$00
	.db #$FE
	.db #$3F
	.db #$00
	.db #$FA
	.db #$3F
	.db #$00
	.db #$F8
	.db #$FF
	.db #$00
	.db #$ED
	.db #$17
	.db #$00
	.db #$FB
	.db #$5F
	.db #$A0
	.db #$FB
	.db #$13
	.db #$00
	.db #$FC
	.db #$3F
	.db #$00
	.db #$FB
	.db #$3F
	.db #$00
	.db #$E8
	.db #$FF
	.db #$00
	.db #$E0
	.db #$FF
	.db #$07
	.db #$00
	.db #$FF
	.db #$0F
	.db #$00
	.db #$FF
	.db #$7F
	.db #$00
	.db #$E0
	.db #$7F
	.db #$01
	.db #$F0
	.db #$FF
	.db #$07
	.db #$00
	.db #$FE
	.db #$1F
	.db #$00
	.db #$F8
	.db #$FF
	.db #$01
	.db #$80
	.db #$FF
	.db #$07
	.db #$80
	.db #$FF
	.db #$7F
	.db #$00
	.db #$E0
	.db #$FF
	.db #$01
	.db #$A0
	.db #$FF
	.db #$0F
	.db #$00
	.db #$FA
	.db #$7F
	.db #$00
	.db #$E8
	.db #$FF
	.db #$01
	.db #$80
	.db #$FF
	.db #$1F
	.db #$00
	.db #$F8
	.db #$FF
	.db #$01
	.db #$80
	.db #$FF
	.db #$1F
	.db #$00
	.db #$F8
	.db #$FF
	.db #$01
	.db #$A0
	.db #$FF
	.db #$0F
	.db #$00
	.db #$F8
	.db #$FF
	.db #$01
	.db #$A0
	.db #$FF
	.db #$1F
	.db #$00
	.db #$F0
	.db #$FF
	.db #$05
	.db #$E0
	.db #$BF
	.db #$12
	.db #$00
	.db #$F8
	.db #$FF
	.db #$07
	.db #$80
	.db #$FE
	.db #$3F
	.db #$00
	.db #$11
	.db #$EA
	.db #$FE
	.db #$17
	.db #$E8
	.db #$AA
	.db #$EE
	.db #$04
	.db #$A9
	.db #$15
	.db #$81
	.db #$FB
	.db #$5F
	.db #$51
	.db #$A4
	.db #$FB
	.db #$01
	.db #$A0
	.db #$FF
	.db #$03
	.db #$40
	.db #$FE
	.db #$FF
	.db #$00
	.db #$C0
	.db #$FF
	.db #$47
	.db #$00
	.db #$EB
	.db #$5F
	.db #$00
	.db #$B4
	.db #$FF
	.db #$0F
	.db #$00
	.db #$EC
	.db #$FF
	.db #$05
	.db #$80
	.db #$EE
	.db #$57
	.db #$11
	.db #$D5
	.db #$BE
	.db #$45
	.db #$A4
	.db #$D6
	.db #$AA
	.db #$54
	.db #$55
	.db #$D5
	.db #$54
	.db #$AA
	.db #$BA
	.db #$52
	.db #$D5
	.db #$B6
	.db #$54
	.db #$4A
	.db #$A9
	.db #$2A
	.db #$55
	.db #$BB
	.db #$4D
	.db #$A5
	.db #$94
	.db #$6A
	.db #$AB
	.db #$4A
	.db #$55
	.db #$AD
	.db #$2B
	.db #$11
	.db #$A9
	.db #$AE
	.db #$B7
	.db #$44
	.db #$DA
	.db #$56
	.db #$15
	.db #$91
	.db #$FA
	.db #$AB
	.db #$14
	.db #$A5
FRAME_4_DATA_03:
	.db #$AD
	.db #$4A
	.db #$A4
	.db #$BE
	.db #$AB
FRAME_19_DATA_01:
	.db #$14
	.db #$49
FRAME_1C_DATA_01:
	.db #$EB
FRAME_24_DATA_01:
	.db #$56
FRAME_1E_DATA_01:
	.db #$25
	.db #$D1
FRAME_20_DATA_03:
	.db #$6E
FRAME_23_DATA_01:
	.db #$4B
FRAME_22_DATA_03:
	.db #$91
	.db #$54
FRAME_1E_DATA_03:
	.db #$EB
	.db #$AA
	.db #$52
	.db #$55
	.db #$55
	.db #$53
	.db #$55
	.db #$55
	.db #$55
	.db #$AB
	.db #$AA
	.db #$54
	.db #$55
	.db #$55
	.db #$AB
	.db #$AA
	.db #$54
	.db #$55
	.db #$D5
	.db #$52
	.db #$A9
	.db #$AE
	.db #$2B
	.db #$45
	.db #$52
	.db #$6B
	.db #$AB
	.db #$AA
	.db #$AA
	.db #$52
	.db #$55
	.db #$55
	.db #$B5
	.db #$AA
	.db #$52
	.db #$D5
	.db #$52
	.db #$55
	.db #$55
	.db #$AD
	.db #$A6
	.db #$52
	.db #$55
	.db #$55
	.db #$D5
	.db #$AA
	.db #$2A
	.db #$55
	.db #$95
	.db #$AA
	.db #$ED
	.db #$4A
	.db #$91
	.db #$D4
	.db #$6A
	.db #$AB
	.db #$AA
	.db #$2A
	.db #$55
	.db #$55
	.db #$55
	.db #$55
	.db #$55
	.db #$D5
	.db #$AA
	.db #$54
	.db #$59
	.db #$AB
	.db #$2A
	.db #$55
	.db #$55
	.db #$55
	.db #$55
	.db #$AD
	.db #$AA
	.db #$14
	.db #$B5
	.db #$BB
	.db #$46
	.db #$44
	.db #$D5
	.db #$BA
	.db #$AA
	.db #$AA
	.db #$52
	.db #$A5
	.db #$6A
	.db #$D5
	.db #$2A
	.db #$55
	.db #$55
	.db #$2B
	.db #$55
	.db #$D5
	.db #$AA
	.db #$52
	.db #$95
	.db #$6A
	.db #$B5
	.db #$AA
	.db #$2A
	.db #$45
	.db #$EA
	.db #$7B
	.db #$15
	.db #$41
	.db #$AA
	.db #$DB
	.db #$5A
	.db #$95
	.db #$52
	.db #$A5
	.db #$55
	.db #$D5
	.db #$54
	.db #$55
	.db #$B5
	.db #$AA
	.db #$AA
	.db #$AA
	.db #$54
	.db #$AA
	.db #$DA
	.db #$5A
	.db #$A9
	.db #$54
	.db #$A9
	.db #$D4
	.db #$EE
	.db #$55
	.db #$04
	.db #$A9
	.db #$EB
	.db #$5A
	.db #$4A
	.db #$55
	.db #$B5
	.db #$52
	.db #$55
	.db #$5A
	.db #$55
	.db #$AD
	.db #$56
	.db #$15
	.db #$91
	.db #$BA
	.db #$6B
	.db #$55
	.db #$49
	.db #$A9
	.db #$B6
	.db #$44
	.db #$B9
	.db #$BF
	.db #$44
	.db #$A0
	.db #$BA
	.db #$6B
	.db #$52
	.db #$D5
	.db #$AA
	.db #$4A
	.db #$A9
	.db #$AA
	.db #$AD
	.db #$AA
	.db #$2B
	.db #$11
	.db #$A9
	.db #$BE
	.db #$2E
	.db #$45
	.db #$69
	.db #$6B
	.db #$49
	.db #$90
	.db #$FE
	.db #$5F
	.db #$00
	.db #$E8
	.db #$3F
	.db #$05
	.db #$B5
	.db #$AF
	.db #$12
	.db #$51
	.db #$6D
	.db #$AB
	.db #$54
	.db #$DB
	.db #$12
	.db #$91
	.db #$FA
	.db #$56
	.db #$52
	.db #$6D
	.db #$53
	.db #$44
	.db #$C4
	.db #$FF
	.db #$17
	.db #$00
	.db #$FD
	.db #$13
	.db #$A4
	.db #$EF
	.db #$46
	.db #$A8
	.db #$56
	.db #$95
	.db #$D5
	.db #$AA
	.db #$AA
	.db #$4A
	.db #$B2
	.db #$B6
	.db #$52
	.db #$B5
	.db #$2D
	.db #$11
	.db #$91
	.db #$FE
	.db #$1F
	.db #$80
	.db #$BE
	.db #$12
	.db #$ED
	.db #$4E
	.db #$52
	.db #$AD
	.db #$44
	.db #$ED
	.db #$47
	.db #$50
	.db #$6F
	.db #$05
	.db #$ED
	.db #$2A
	.db #$A5
	.db #$DB
	.db #$12
	.db #$41
	.db #$FA
	.db #$3F
	.db #$C0
	.db #$2E
	.db #$91
	.db #$BE
	.db #$15
	.db #$B5
	.db #$13
	.db #$94
	.db #$FB
FRAME_1A_DATA_07:
	.db #$12
	.db #$65
	.db #$4B
	.db #$A9
	.db #$AD
	.db #$AA
	.db #$52
	.db #$B5
	.db #$16
	.db #$01
	.db #$FF
	.db #$0F
	.db #$F0
	.db #$03
	.db #$F4
	.db #$17
	.db #$EA
	.db #$17
	.db #$C4
	.db #$5A
	.db #$B5
	.db #$15
	.db #$A9
	.db #$55
	.db #$A5
	.db #$6D
	.db #$45
	.db #$EC
	.db #$5A
	.db #$04
	.db #$F9
	.db #$5F
	.db #$A0
	.db #$17
	.db #$E0
	.db #$1F
	.db #$F8
	.db #$17
	.db #$E8
	.db #$12
	.db #$F9
	.db #$47
	.db #$E8
	.db #$12
	.db #$BB
	.db #$AA
	.db #$2A
	.db #$A9
	.db #$5B
	.db #$01
	.db #$FA
	.db #$1F
	.db #$F8
	.db #$04
	.db #$F8
	.db #$07
	.db #$FE
	.db #$44
	.db #$5B
	.db #$90
	.db #$7B
	.db #$51
	.db #$4B
	.db #$B4
	.db #$1B
	.db #$EA
	.db #$96
	.db #$5A
	.db #$11
	.db #$E0
	.db #$FF
	.db #$C1
	.db #$16
	.db #$D0
	.db #$4F
	.db #$EC
	.db #$93
	.db #$5A
	.db #$44
	.db #$ED
	.db #$56
	.db #$94
	.db #$AA
	.db #$5A
	.db #$AB
	.db #$AA
	.db #$49
	.db #$A9
	.db #$80
	.db #$FF
	.db #$87
	.db #$16
	.db #$D0
	.db #$5E
	.db #$BA
	.db #$AA
	.db #$96
	.db #$94
	.db #$AA
	.db #$5B
	.db #$54
	.db #$AA
	.db #$6A
	.db #$AB
	.db #$55
	.db #$49
	.db #$15
	.db #$E0
	.db #$FF
	.db #$45
	.db #$05
	.db #$AA
	.db #$57
	.db #$AD
	.db #$5A
	.db #$49
	.db #$95
	.db #$EA
	.db #$55
	.db #$94
	.db #$B4
	.db #$DA
	.db #$56
	.db #$A5
	.db #$B4
	.db #$04
	.db #$F8
	.db #$7F
	.db #$52
	.db #$90
	.db #$BA
	.db #$56
	.db #$AB
	.db #$95
	.db #$52
	.db #$A9
	.db #$6E
	.db #$25
	.db #$49
	.db #$6D
	.db #$B5
	.db #$56
	.db #$AA
	.db #$12
	.db #$A0
	.db #$FF
	.db #$17
	.db #$11
	.db #$69
	.db #$6B
	.db #$B5
	.db #$56
	.db #$49
	.db #$A5
	.db #$EA
	.db #$4D
	.db #$11
	.db #$D5
	.db #$D6
	.db #$5A
	.db #$A9
	.db #$26
	.db #$01
	.db #$FE
	.db #$5F
	.db #$44
	.db #$A4
	.db #$B6
	.db #$B5
	.db #$56
	.db #$25
	.db #$A5
	.db #$EA
	.db #$36
	.db #$45
	.db #$54
	.db #$6B
	.db #$AB
	.db #$55
	.db #$55
	.db #$00
	.db #$FE
	.db #$3F
	.db #$41
	.db #$92
	.db #$B6
	.db #$D6
	.db #$5A
	.db #$55
	.db #$14
	.db #$B5
	.db #$BB
	.db #$14
	.db #$91
	.db #$EE
	.db #$AA
	.db #$55
	.db #$AA
	.db #$04
	.db #$F8
	.db #$FF
	.db #$10
	.db #$52
	.db #$DA
	.db #$DA
	.db #$5A
	.db #$55
	.db #$94
	.db #$B4
	.db #$BB
	.db #$14
	.db #$54
	.db #$EB
	.db #$AA
	.db #$5A
	.db #$55
	.db #$00
	.db #$FE
	.db #$3F
	.db #$41
	.db #$51
	.db #$B6
	.db #$DA
	.db #$6A
	.db #$95
	.db #$94
	.db #$B4
	.db #$BB
	.db #$12
	.db #$54
	.db #$ED
	.db #$AA
	.db #$56
	.db #$55
	.db #$00
	.db #$FE
	.db #$5F
	.db #$44
	.db #$52
	.db #$AD
	.db #$B6
	.db #$6A
	.db #$95
	.db #$94
FRAME_17_DATA_09:
	.db #$AA
	.db #$5B
	.db #$15
	.db #$51
	.db #$EB
	.db #$AA
	.db #$AA
	.db #$55
	.db #$01
	.db #$FA
	.db #$5F
	.db #$44
FRAME_19_DATA_07:
	.db #$4A
	.db #$AB
	.db #$D6
	.db #$AA
	.db #$87
	.db #$04
	.db #$28
	.db #$04
	.db #$28
	.db #$04
	.db #$0C
	.db #$04
	.db #$0C
	.db #$04
	.db #$0C
	.db #$12
	.db #$0C
	.db #$12
	.db #$0C
	.db #$12
	.db #$48
	.db #$12
	.db #$48
	.db #$12
	.db #$48
	.db #$80
	.db #$02
	.db #$00
	.db #$80
	.db #$02
	.db #$87
	.db #$04
	.db #$28
	.db #$04
	.db #$28
	.db #$04
	.db #$0C
	.db #$04
	.db #$0C
	.db #$04
	.db #$0C
	.db #$12
	.db #$0C
	.db #$12
	.db #$0C
	.db #$12
	.db #$48
	.db #$12
	.db #$48
	.db #$12
	.db #$48
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
FRAME_7_DATA_03:
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.db #$FF
	.LOW VECTOR_ENTRY_NMI
	.HIGH VECTOR_ENTRY_NMI
	.LOW VECTOR_ENTRY_RESET
	.HIGH VECTOR_ENTRY_RESET
	.LOW VECTOR_ENTRY_RESET
	.HIGH VECTOR_ENTRY_RESET
